/*     */ package androidx.compose.ui.graphics.vector;
/*     */ 
/*     */ import androidx.compose.runtime.Immutable;
/*     */ import kotlin.Metadata;
/*     */ import kotlin.jvm.internal.DefaultConstructorMarker;
/*     */ import org.jetbrains.annotations.NotNull;
/*     */ import org.jetbrains.annotations.Nullable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000`\n\002\030\002\n\002\020\000\n\000\n\002\020\013\n\002\b\026\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\000\b7\030\0002\0020\001:\023\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031B\033\b\004\022\b\b\002\020\002\032\0020\003\022\b\b\002\020\004\032\0020\003¢\006\002\020\005R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\002\020\006R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\004\020\006\001\023\032\033\034\035\036\037 !\"#$%&'()*+,¨\006-"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode;", "", "isCurve", "", "isQuad", "(ZZ)V", "()Z", "ArcTo", "Close", "CurveTo", "HorizontalTo", "LineTo", "MoveTo", "QuadTo", "ReflectiveCurveTo", "ReflectiveQuadTo", "RelativeArcTo", "RelativeCurveTo", "RelativeHorizontalTo", "RelativeLineTo", "RelativeMoveTo", "RelativeQuadTo", "RelativeReflectiveCurveTo", "RelativeReflectiveQuadTo", "RelativeVerticalTo", "VerticalTo", "Landroidx/compose/ui/graphics/vector/PathNode$ArcTo;", "Landroidx/compose/ui/graphics/vector/PathNode$Close;", "Landroidx/compose/ui/graphics/vector/PathNode$CurveTo;", "Landroidx/compose/ui/graphics/vector/PathNode$HorizontalTo;", "Landroidx/compose/ui/graphics/vector/PathNode$LineTo;", "Landroidx/compose/ui/graphics/vector/PathNode$MoveTo;", "Landroidx/compose/ui/graphics/vector/PathNode$QuadTo;", "Landroidx/compose/ui/graphics/vector/PathNode$ReflectiveCurveTo;", "Landroidx/compose/ui/graphics/vector/PathNode$ReflectiveQuadTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeArcTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeCurveTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeHorizontalTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeLineTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeMoveTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeQuadTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeReflectiveCurveTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeReflectiveQuadTo;", "Landroidx/compose/ui/graphics/vector/PathNode$RelativeVerticalTo;", "Landroidx/compose/ui/graphics/vector/PathNode$VerticalTo;", "ui-graphics"})
/*     */ @Immutable
/*     */ public abstract class PathNode
/*     */ {
/*     */   private final boolean isCurve;
/*     */   private final boolean isQuad;
/*     */   
/*     */   private PathNode(boolean isCurve, boolean isQuad) {
/*  28 */     this.isCurve = isCurve; this.isQuad = isQuad; } public final boolean isCurve() { return this.isCurve; } public final boolean isQuad() { return this.isQuad; } @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000\f\n\002\030\002\n\002\030\002\n\002\b\002\bÇ\002\030\0002\0020\001B\007\b\002¢\006\002\020\002¨\006\003"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$Close;", "Landroidx/compose/ui/graphics/vector/PathNode;", "()V", "ui-graphics"})
/*     */   @Immutable
/*     */   public static final class Close extends PathNode { @NotNull
/*     */     public static final Close INSTANCE = new Close();
/*  32 */     private Close() { super(false, false, 3, null); } } @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\t\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\025\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003¢\006\002\020\005J\t\020\t\032\0020\003HÆ\003J\t\020\n\032\0020\003HÆ\003J\035\020\013\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\003HÆ\001J\023\020\f\032\0020\r2\b\020\016\032\004\030\0010\017HÖ\003J\t\020\020\032\0020\021HÖ\001J\t\020\022\032\0020\023HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\006\020\007R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\b\020\007¨\006\024"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeMoveTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "dx", "", "dy", "(FF)V", "getDx", "()F", "getDy", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"})
/*     */   @Immutable
/*     */   public static final class RelativeMoveTo extends PathNode { private final float dx; private final float dy;
/*  35 */     public RelativeMoveTo(float dx, float dy) { super(false, false, 3, null); this.dx = dx; this.dy = dy; } public final float getDx() { return this.dx; } public final float getDy() { return this.dy; } public final float component1() { return this.dx; } public final float component2() { return this.dy; } @NotNull public final RelativeMoveTo copy(float dx, float dy) { return new RelativeMoveTo(dx, dy); } @NotNull public String toString() { return "RelativeMoveTo(dx=" + this.dx + ", dy=" + this.dy + ')'; } public int hashCode() { result = Float.hashCode(this.dx); return result * 31 + Float.hashCode(this.dy); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeMoveTo)) return false;  RelativeMoveTo relativeMoveTo = (RelativeMoveTo)other; return (Float.compare(this.dx, relativeMoveTo.dx) != 0) ? false : (!(Float.compare(this.dy, relativeMoveTo.dy) != 0)); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\t\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\025\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003¢\006\002\020\005J\t\020\t\032\0020\003HÆ\003J\t\020\n\032\0020\003HÆ\003J\035\020\013\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\003HÆ\001J\023\020\f\032\0020\r2\b\020\016\032\004\030\0010\017HÖ\003J\t\020\020\032\0020\021HÖ\001J\t\020\022\032\0020\023HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\006\020\007R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\b\020\007¨\006\024"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$MoveTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "x", "", "y", "(FF)V", "getX", "()F", "getY", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class MoveTo extends PathNode { private final float x; private final float y;
/*  38 */     public MoveTo(float x, float y) { super(false, false, 3, null); this.x = x; this.y = y; } public final float getX() { return this.x; } public final float getY() { return this.y; } public final float component1() { return this.x; } public final float component2() { return this.y; } @NotNull public final MoveTo copy(float x, float y) { return new MoveTo(x, y); } @NotNull public String toString() { return "MoveTo(x=" + this.x + ", y=" + this.y + ')'; } public int hashCode() { result = Float.hashCode(this.x); return result * 31 + Float.hashCode(this.y); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof MoveTo)) return false;  MoveTo moveTo = (MoveTo)other; return (Float.compare(this.x, moveTo.x) != 0) ? false : (!(Float.compare(this.y, moveTo.y) != 0)); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\t\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\025\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003¢\006\002\020\005J\t\020\t\032\0020\003HÆ\003J\t\020\n\032\0020\003HÆ\003J\035\020\013\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\003HÆ\001J\023\020\f\032\0020\r2\b\020\016\032\004\030\0010\017HÖ\003J\t\020\020\032\0020\021HÖ\001J\t\020\022\032\0020\023HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\006\020\007R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\b\020\007¨\006\024"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeLineTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "dx", "", "dy", "(FF)V", "getDx", "()F", "getDy", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class RelativeLineTo extends PathNode { private final float dx; private final float dy;
/*  41 */     public RelativeLineTo(float dx, float dy) { super(false, false, 3, null); this.dx = dx; this.dy = dy; } public final float getDx() { return this.dx; } public final float getDy() { return this.dy; } public final float component1() { return this.dx; } public final float component2() { return this.dy; } @NotNull public final RelativeLineTo copy(float dx, float dy) { return new RelativeLineTo(dx, dy); } @NotNull public String toString() { return "RelativeLineTo(dx=" + this.dx + ", dy=" + this.dy + ')'; } public int hashCode() { result = Float.hashCode(this.dx); return result * 31 + Float.hashCode(this.dy); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeLineTo)) return false;  RelativeLineTo relativeLineTo = (RelativeLineTo)other; return (Float.compare(this.dx, relativeLineTo.dx) != 0) ? false : (!(Float.compare(this.dy, relativeLineTo.dy) != 0)); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\t\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\025\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003¢\006\002\020\005J\t\020\t\032\0020\003HÆ\003J\t\020\n\032\0020\003HÆ\003J\035\020\013\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\003HÆ\001J\023\020\f\032\0020\r2\b\020\016\032\004\030\0010\017HÖ\003J\t\020\020\032\0020\021HÖ\001J\t\020\022\032\0020\023HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\006\020\007R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\b\020\007¨\006\024"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$LineTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "x", "", "y", "(FF)V", "getX", "()F", "getY", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class LineTo extends PathNode { private final float x; private final float y;
/*  44 */     public LineTo(float x, float y) { super(false, false, 3, null); this.x = x; this.y = y; } public final float getX() { return this.x; } public final float getY() { return this.y; } public final float component1() { return this.x; } public final float component2() { return this.y; } @NotNull public final LineTo copy(float x, float y) { return new LineTo(x, y); } @NotNull public String toString() { return "LineTo(x=" + this.x + ", y=" + this.y + ')'; } public int hashCode() { result = Float.hashCode(this.x); return result * 31 + Float.hashCode(this.y); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof LineTo)) return false;  LineTo lineTo = (LineTo)other; return (Float.compare(this.x, lineTo.x) != 0) ? false : (!(Float.compare(this.y, lineTo.y) != 0)); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\006\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\r\022\006\020\002\032\0020\003¢\006\002\020\004J\t\020\007\032\0020\003HÆ\003J\023\020\b\032\0020\0002\b\b\002\020\002\032\0020\003HÆ\001J\023\020\t\032\0020\n2\b\020\013\032\004\030\0010\fHÖ\003J\t\020\r\032\0020\016HÖ\001J\t\020\017\032\0020\020HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\005\020\006¨\006\021"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeHorizontalTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "dx", "", "(F)V", "getDx", "()F", "component1", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class RelativeHorizontalTo extends PathNode { private final float dx;
/*  47 */     public RelativeHorizontalTo(float dx) { super(false, false, 3, null); this.dx = dx; } public final float getDx() { return this.dx; } public final float component1() { return this.dx; } @NotNull public final RelativeHorizontalTo copy(float dx) { return new RelativeHorizontalTo(dx); } @NotNull public String toString() { return "RelativeHorizontalTo(dx=" + this.dx + ')'; } public int hashCode() { return Float.hashCode(this.dx); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeHorizontalTo)) return false;  RelativeHorizontalTo relativeHorizontalTo = (RelativeHorizontalTo)other; return !(Float.compare(this.dx, relativeHorizontalTo.dx) != 0); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\006\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\r\022\006\020\002\032\0020\003¢\006\002\020\004J\t\020\007\032\0020\003HÆ\003J\023\020\b\032\0020\0002\b\b\002\020\002\032\0020\003HÆ\001J\023\020\t\032\0020\n2\b\020\013\032\004\030\0010\fHÖ\003J\t\020\r\032\0020\016HÖ\001J\t\020\017\032\0020\020HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\005\020\006¨\006\021"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$HorizontalTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "x", "", "(F)V", "getX", "()F", "component1", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class HorizontalTo extends PathNode { private final float x;
/*  50 */     public HorizontalTo(float x) { super(false, false, 3, null); this.x = x; } public final float getX() { return this.x; } public final float component1() { return this.x; } @NotNull public final HorizontalTo copy(float x) { return new HorizontalTo(x); } @NotNull public String toString() { return "HorizontalTo(x=" + this.x + ')'; } public int hashCode() { return Float.hashCode(this.x); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof HorizontalTo)) return false;  HorizontalTo horizontalTo = (HorizontalTo)other; return !(Float.compare(this.x, horizontalTo.x) != 0); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\006\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\r\022\006\020\002\032\0020\003¢\006\002\020\004J\t\020\007\032\0020\003HÆ\003J\023\020\b\032\0020\0002\b\b\002\020\002\032\0020\003HÆ\001J\023\020\t\032\0020\n2\b\020\013\032\004\030\0010\fHÖ\003J\t\020\r\032\0020\016HÖ\001J\t\020\017\032\0020\020HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\005\020\006¨\006\021"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeVerticalTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "dy", "", "(F)V", "getDy", "()F", "component1", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class RelativeVerticalTo extends PathNode { private final float dy;
/*  53 */     public RelativeVerticalTo(float dy) { super(false, false, 3, null); this.dy = dy; } public final float getDy() { return this.dy; } public final float component1() { return this.dy; } @NotNull public final RelativeVerticalTo copy(float dy) { return new RelativeVerticalTo(dy); } @NotNull public String toString() { return "RelativeVerticalTo(dy=" + this.dy + ')'; } public int hashCode() { return Float.hashCode(this.dy); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeVerticalTo)) return false;  RelativeVerticalTo relativeVerticalTo = (RelativeVerticalTo)other; return !(Float.compare(this.dy, relativeVerticalTo.dy) != 0); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\006\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\r\022\006\020\002\032\0020\003¢\006\002\020\004J\t\020\007\032\0020\003HÆ\003J\023\020\b\032\0020\0002\b\b\002\020\002\032\0020\003HÆ\001J\023\020\t\032\0020\n2\b\020\013\032\004\030\0010\fHÖ\003J\t\020\r\032\0020\016HÖ\001J\t\020\017\032\0020\020HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\005\020\006¨\006\021"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$VerticalTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "y", "", "(F)V", "getY", "()F", "component1", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class VerticalTo extends PathNode { private final float y;
/*  56 */     public VerticalTo(float y) { super(false, false, 3, null); this.y = y; } public final float getY() { return this.y; } public final float component1() { return this.y; } @NotNull public final VerticalTo copy(float y) { return new VerticalTo(y); } @NotNull public String toString() { return "VerticalTo(y=" + this.y + ')'; }
/*     */     public int hashCode() { return Float.hashCode(this.y); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof VerticalTo)) return false;  VerticalTo verticalTo = (VerticalTo)other; return !(Float.compare(this.y, verticalTo.y) != 0); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\025\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B5\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003\022\006\020\006\032\0020\003\022\006\020\007\032\0020\003\022\006\020\b\032\0020\003¢\006\002\020\tJ\t\020\021\032\0020\003HÆ\003J\t\020\022\032\0020\003HÆ\003J\t\020\023\032\0020\003HÆ\003J\t\020\024\032\0020\003HÆ\003J\t\020\025\032\0020\003HÆ\003J\t\020\026\032\0020\003HÆ\003JE\020\027\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\0032\b\b\002\020\006\032\0020\0032\b\b\002\020\007\032\0020\0032\b\b\002\020\b\032\0020\003HÆ\001J\023\020\030\032\0020\0312\b\020\032\032\004\030\0010\033HÖ\003J\t\020\034\032\0020\035HÖ\001J\t\020\036\032\0020\037HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\n\020\013R\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\f\020\013R\021\020\007\032\0020\003¢\006\b\n\000\032\004\b\r\020\013R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\016\020\013R\021\020\006\032\0020\003¢\006\b\n\000\032\004\b\017\020\013R\021\020\b\032\0020\003¢\006\b\n\000\032\004\b\020\020\013¨\006 "}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeCurveTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "dx1", "", "dy1", "dx2", "dy2", "dx3", "dy3", "(FFFFFF)V", "getDx1", "()F", "getDx2", "getDx3", "getDy1", "getDy2", "getDy3", "component1", "component2", "component3", "component4", "component5", "component6", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class RelativeCurveTo extends PathNode { private final float dx1; private final float dy1; private final float dx2; private final float dy2; private final float dx3; private final float dy3;
/*  60 */     public final float getDx1() { return this.dx1; }
/*  61 */     public final float getDy1() { return this.dy1; }
/*  62 */     public final float getDx2() { return this.dx2; }
/*  63 */     public final float getDy2() { return this.dy2; }
/*  64 */     public final float getDx3() { return this.dx3; }
/*  65 */     public final float getDy3() { return this.dy3; }
/*  66 */     public RelativeCurveTo(float dx1, float dy1, float dx2, float dy2, float dx3, float dy3) { super(true, false, 2, null); this.dx1 = dx1; this.dy1 = dy1; this.dx2 = dx2; this.dy2 = dy2; this.dx3 = dx3; this.dy3 = dy3; } public final float component1() { return this.dx1; } public final float component2() { return this.dy1; } public final float component3() { return this.dx2; } public final float component4() { return this.dy2; } public final float component5() { return this.dx3; } public final float component6() { return this.dy3; } @NotNull public final RelativeCurveTo copy(float dx1, float dy1, float dx2, float dy2, float dx3, float dy3) { return new RelativeCurveTo(dx1, dy1, dx2, dy2, dx3, dy3); } @NotNull public String toString() { return "RelativeCurveTo(dx1=" + this.dx1 + ", dy1=" + this.dy1 + ", dx2=" + this.dx2 + ", dy2=" + this.dy2 + ", dx3=" + this.dx3 + ", dy3=" + this.dy3 + ')'; }
/*     */     public int hashCode() { result = Float.hashCode(this.dx1); result = result * 31 + Float.hashCode(this.dy1); result = result * 31 + Float.hashCode(this.dx2); result = result * 31 + Float.hashCode(this.dy2); result = result * 31 + Float.hashCode(this.dx3); return result * 31 + Float.hashCode(this.dy3); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeCurveTo)) return false;  RelativeCurveTo relativeCurveTo = (RelativeCurveTo)other; return (Float.compare(this.dx1, relativeCurveTo.dx1) != 0) ? false : ((Float.compare(this.dy1, relativeCurveTo.dy1) != 0) ? false : ((Float.compare(this.dx2, relativeCurveTo.dx2) != 0) ? false : ((Float.compare(this.dy2, relativeCurveTo.dy2) != 0) ? false : ((Float.compare(this.dx3, relativeCurveTo.dx3) != 0) ? false : (!(Float.compare(this.dy3, relativeCurveTo.dy3) != 0)))))); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\025\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B5\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003\022\006\020\006\032\0020\003\022\006\020\007\032\0020\003\022\006\020\b\032\0020\003¢\006\002\020\tJ\t\020\021\032\0020\003HÆ\003J\t\020\022\032\0020\003HÆ\003J\t\020\023\032\0020\003HÆ\003J\t\020\024\032\0020\003HÆ\003J\t\020\025\032\0020\003HÆ\003J\t\020\026\032\0020\003HÆ\003JE\020\027\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\0032\b\b\002\020\006\032\0020\0032\b\b\002\020\007\032\0020\0032\b\b\002\020\b\032\0020\003HÆ\001J\023\020\030\032\0020\0312\b\020\032\032\004\030\0010\033HÖ\003J\t\020\034\032\0020\035HÖ\001J\t\020\036\032\0020\037HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\n\020\013R\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\f\020\013R\021\020\007\032\0020\003¢\006\b\n\000\032\004\b\r\020\013R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\016\020\013R\021\020\006\032\0020\003¢\006\b\n\000\032\004\b\017\020\013R\021\020\b\032\0020\003¢\006\b\n\000\032\004\b\020\020\013¨\006 "}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$CurveTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "x1", "", "y1", "x2", "y2", "x3", "y3", "(FFFFFF)V", "getX1", "()F", "getX2", "getX3", "getY1", "getY2", "getY3", "component1", "component2", "component3", "component4", "component5", "component6", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class CurveTo extends PathNode { private final float x1; private final float y1; private final float x2; private final float y2; private final float x3; private final float y3;
/*  70 */     public final float getX1() { return this.x1; }
/*  71 */     public final float getY1() { return this.y1; }
/*  72 */     public final float getX2() { return this.x2; }
/*  73 */     public final float getY2() { return this.y2; }
/*  74 */     public final float getX3() { return this.x3; }
/*  75 */     public final float getY3() { return this.y3; }
/*  76 */     public CurveTo(float x1, float y1, float x2, float y2, float x3, float y3) { super(true, false, 2, null); this.x1 = x1; this.y1 = y1; this.x2 = x2; this.y2 = y2; this.x3 = x3; this.y3 = y3; } public final float component1() { return this.x1; } public final float component2() { return this.y1; } public final float component3() { return this.x2; } public final float component4() { return this.y2; } public final float component5() { return this.x3; } public final float component6() { return this.y3; } @NotNull public final CurveTo copy(float x1, float y1, float x2, float y2, float x3, float y3) { return new CurveTo(x1, y1, x2, y2, x3, y3); } @NotNull public String toString() { return "CurveTo(x1=" + this.x1 + ", y1=" + this.y1 + ", x2=" + this.x2 + ", y2=" + this.y2 + ", x3=" + this.x3 + ", y3=" + this.y3 + ')'; }
/*     */     public int hashCode() { result = Float.hashCode(this.x1); result = result * 31 + Float.hashCode(this.y1); result = result * 31 + Float.hashCode(this.x2); result = result * 31 + Float.hashCode(this.y2); result = result * 31 + Float.hashCode(this.x3); return result * 31 + Float.hashCode(this.y3); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof CurveTo)) return false;  CurveTo curveTo = (CurveTo)other; return (Float.compare(this.x1, curveTo.x1) != 0) ? false : ((Float.compare(this.y1, curveTo.y1) != 0) ? false : ((Float.compare(this.x2, curveTo.x2) != 0) ? false : ((Float.compare(this.y2, curveTo.y2) != 0) ? false : ((Float.compare(this.x3, curveTo.x3) != 0) ? false : (!(Float.compare(this.y3, curveTo.y3) != 0)))))); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\017\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B%\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003\022\006\020\006\032\0020\003¢\006\002\020\007J\t\020\r\032\0020\003HÆ\003J\t\020\016\032\0020\003HÆ\003J\t\020\017\032\0020\003HÆ\003J\t\020\020\032\0020\003HÆ\003J1\020\021\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\0032\b\b\002\020\006\032\0020\003HÆ\001J\023\020\022\032\0020\0232\b\020\024\032\004\030\0010\025HÖ\003J\t\020\026\032\0020\027HÖ\001J\t\020\030\032\0020\031HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\b\020\tR\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\n\020\tR\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\013\020\tR\021\020\006\032\0020\003¢\006\b\n\000\032\004\b\f\020\t¨\006\032"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeReflectiveCurveTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "dx1", "", "dy1", "dx2", "dy2", "(FFFF)V", "getDx1", "()F", "getDx2", "getDy1", "getDy2", "component1", "component2", "component3", "component4", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class RelativeReflectiveCurveTo extends PathNode { private final float dx1; private final float dy1; private final float dx2; private final float dy2;
/*  80 */     public final float getDx1() { return this.dx1; }
/*  81 */     public final float getDy1() { return this.dy1; }
/*  82 */     public final float getDx2() { return this.dx2; }
/*  83 */     public final float getDy2() { return this.dy2; }
/*  84 */     public RelativeReflectiveCurveTo(float dx1, float dy1, float dx2, float dy2) { super(true, false, 2, null); this.dx1 = dx1; this.dy1 = dy1; this.dx2 = dx2; this.dy2 = dy2; } public final float component1() { return this.dx1; } public final float component2() { return this.dy1; } public final float component3() { return this.dx2; } public final float component4() { return this.dy2; } @NotNull public final RelativeReflectiveCurveTo copy(float dx1, float dy1, float dx2, float dy2) { return new RelativeReflectiveCurveTo(dx1, dy1, dx2, dy2); } @NotNull public String toString() { return "RelativeReflectiveCurveTo(dx1=" + this.dx1 + ", dy1=" + this.dy1 + ", dx2=" + this.dx2 + ", dy2=" + this.dy2 + ')'; }
/*     */     public int hashCode() { result = Float.hashCode(this.dx1); result = result * 31 + Float.hashCode(this.dy1); result = result * 31 + Float.hashCode(this.dx2); return result * 31 + Float.hashCode(this.dy2); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeReflectiveCurveTo)) return false;  RelativeReflectiveCurveTo relativeReflectiveCurveTo = (RelativeReflectiveCurveTo)other; return (Float.compare(this.dx1, relativeReflectiveCurveTo.dx1) != 0) ? false : ((Float.compare(this.dy1, relativeReflectiveCurveTo.dy1) != 0) ? false : ((Float.compare(this.dx2, relativeReflectiveCurveTo.dx2) != 0) ? false : (!(Float.compare(this.dy2, relativeReflectiveCurveTo.dy2) != 0)))); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\017\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B%\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003\022\006\020\006\032\0020\003¢\006\002\020\007J\t\020\r\032\0020\003HÆ\003J\t\020\016\032\0020\003HÆ\003J\t\020\017\032\0020\003HÆ\003J\t\020\020\032\0020\003HÆ\003J1\020\021\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\0032\b\b\002\020\006\032\0020\003HÆ\001J\023\020\022\032\0020\0232\b\020\024\032\004\030\0010\025HÖ\003J\t\020\026\032\0020\027HÖ\001J\t\020\030\032\0020\031HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\b\020\tR\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\n\020\tR\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\013\020\tR\021\020\006\032\0020\003¢\006\b\n\000\032\004\b\f\020\t¨\006\032"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$ReflectiveCurveTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "x1", "", "y1", "x2", "y2", "(FFFF)V", "getX1", "()F", "getX2", "getY1", "getY2", "component1", "component2", "component3", "component4", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class ReflectiveCurveTo extends PathNode { private final float x1; private final float y1; private final float x2; private final float y2;
/*  88 */     public final float getX1() { return this.x1; }
/*  89 */     public final float getY1() { return this.y1; }
/*  90 */     public final float getX2() { return this.x2; }
/*  91 */     public final float getY2() { return this.y2; }
/*  92 */     public ReflectiveCurveTo(float x1, float y1, float x2, float y2) { super(true, false, 2, null); this.x1 = x1; this.y1 = y1; this.x2 = x2; this.y2 = y2; } public final float component1() { return this.x1; } public final float component2() { return this.y1; } public final float component3() { return this.x2; } public final float component4() { return this.y2; } @NotNull public final ReflectiveCurveTo copy(float x1, float y1, float x2, float y2) { return new ReflectiveCurveTo(x1, y1, x2, y2); } @NotNull public String toString() { return "ReflectiveCurveTo(x1=" + this.x1 + ", y1=" + this.y1 + ", x2=" + this.x2 + ", y2=" + this.y2 + ')'; }
/*     */     public int hashCode() { result = Float.hashCode(this.x1); result = result * 31 + Float.hashCode(this.y1); result = result * 31 + Float.hashCode(this.x2); return result * 31 + Float.hashCode(this.y2); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof ReflectiveCurveTo)) return false;  ReflectiveCurveTo reflectiveCurveTo = (ReflectiveCurveTo)other; return (Float.compare(this.x1, reflectiveCurveTo.x1) != 0) ? false : ((Float.compare(this.y1, reflectiveCurveTo.y1) != 0) ? false : ((Float.compare(this.x2, reflectiveCurveTo.x2) != 0) ? false : (!(Float.compare(this.y2, reflectiveCurveTo.y2) != 0)))); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\017\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B%\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003\022\006\020\006\032\0020\003¢\006\002\020\007J\t\020\r\032\0020\003HÆ\003J\t\020\016\032\0020\003HÆ\003J\t\020\017\032\0020\003HÆ\003J\t\020\020\032\0020\003HÆ\003J1\020\021\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\0032\b\b\002\020\006\032\0020\003HÆ\001J\023\020\022\032\0020\0232\b\020\024\032\004\030\0010\025HÖ\003J\t\020\026\032\0020\027HÖ\001J\t\020\030\032\0020\031HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\b\020\tR\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\n\020\tR\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\013\020\tR\021\020\006\032\0020\003¢\006\b\n\000\032\004\b\f\020\t¨\006\032"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeQuadTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "dx1", "", "dy1", "dx2", "dy2", "(FFFF)V", "getDx1", "()F", "getDx2", "getDy1", "getDy2", "component1", "component2", "component3", "component4", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class RelativeQuadTo extends PathNode { private final float dx1; private final float dy1; private final float dx2; private final float dy2;
/*  96 */     public final float getDx1() { return this.dx1; }
/*  97 */     public final float getDy1() { return this.dy1; }
/*  98 */     public final float getDx2() { return this.dx2; }
/*  99 */     public final float getDy2() { return this.dy2; }
/* 100 */     public RelativeQuadTo(float dx1, float dy1, float dx2, float dy2) { super(false, true, 1, null); this.dx1 = dx1; this.dy1 = dy1; this.dx2 = dx2; this.dy2 = dy2; } public final float component1() { return this.dx1; } public final float component2() { return this.dy1; } public final float component3() { return this.dx2; } public final float component4() { return this.dy2; } @NotNull public final RelativeQuadTo copy(float dx1, float dy1, float dx2, float dy2) { return new RelativeQuadTo(dx1, dy1, dx2, dy2); } @NotNull public String toString() { return "RelativeQuadTo(dx1=" + this.dx1 + ", dy1=" + this.dy1 + ", dx2=" + this.dx2 + ", dy2=" + this.dy2 + ')'; }
/*     */     public int hashCode() { result = Float.hashCode(this.dx1); result = result * 31 + Float.hashCode(this.dy1); result = result * 31 + Float.hashCode(this.dx2); return result * 31 + Float.hashCode(this.dy2); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeQuadTo)) return false;  RelativeQuadTo relativeQuadTo = (RelativeQuadTo)other; return (Float.compare(this.dx1, relativeQuadTo.dx1) != 0) ? false : ((Float.compare(this.dy1, relativeQuadTo.dy1) != 0) ? false : ((Float.compare(this.dx2, relativeQuadTo.dx2) != 0) ? false : (!(Float.compare(this.dy2, relativeQuadTo.dy2) != 0)))); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\017\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B%\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003\022\006\020\006\032\0020\003¢\006\002\020\007J\t\020\r\032\0020\003HÆ\003J\t\020\016\032\0020\003HÆ\003J\t\020\017\032\0020\003HÆ\003J\t\020\020\032\0020\003HÆ\003J1\020\021\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\0032\b\b\002\020\006\032\0020\003HÆ\001J\023\020\022\032\0020\0232\b\020\024\032\004\030\0010\025HÖ\003J\t\020\026\032\0020\027HÖ\001J\t\020\030\032\0020\031HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\b\020\tR\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\n\020\tR\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\013\020\tR\021\020\006\032\0020\003¢\006\b\n\000\032\004\b\f\020\t¨\006\032"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$QuadTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "x1", "", "y1", "x2", "y2", "(FFFF)V", "getX1", "()F", "getX2", "getY1", "getY2", "component1", "component2", "component3", "component4", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class QuadTo extends PathNode { private final float x1; private final float y1; private final float x2; private final float y2;
/* 104 */     public final float getX1() { return this.x1; }
/* 105 */     public final float getY1() { return this.y1; }
/* 106 */     public final float getX2() { return this.x2; }
/* 107 */     public final float getY2() { return this.y2; }
/* 108 */     public QuadTo(float x1, float y1, float x2, float y2) { super(false, true, 1, null); this.x1 = x1; this.y1 = y1; this.x2 = x2; this.y2 = y2; } public final float component1() { return this.x1; } public final float component2() { return this.y1; } public final float component3() { return this.x2; } public final float component4() { return this.y2; } @NotNull public final QuadTo copy(float x1, float y1, float x2, float y2) { return new QuadTo(x1, y1, x2, y2); } @NotNull public String toString() { return "QuadTo(x1=" + this.x1 + ", y1=" + this.y1 + ", x2=" + this.x2 + ", y2=" + this.y2 + ')'; }
/*     */     public int hashCode() { result = Float.hashCode(this.x1); result = result * 31 + Float.hashCode(this.y1); result = result * 31 + Float.hashCode(this.x2); return result * 31 + Float.hashCode(this.y2); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof QuadTo)) return false;  QuadTo quadTo = (QuadTo)other; return (Float.compare(this.x1, quadTo.x1) != 0) ? false : ((Float.compare(this.y1, quadTo.y1) != 0) ? false : ((Float.compare(this.x2, quadTo.x2) != 0) ? false : (!(Float.compare(this.y2, quadTo.y2) != 0)))); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\t\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\025\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003¢\006\002\020\005J\t\020\t\032\0020\003HÆ\003J\t\020\n\032\0020\003HÆ\003J\035\020\013\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\003HÆ\001J\023\020\f\032\0020\r2\b\020\016\032\004\030\0010\017HÖ\003J\t\020\020\032\0020\021HÖ\001J\t\020\022\032\0020\023HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\006\020\007R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\b\020\007¨\006\024"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeReflectiveQuadTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "dx", "", "dy", "(FF)V", "getDx", "()F", "getDy", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class RelativeReflectiveQuadTo extends PathNode { private final float dx; private final float dy;
/* 112 */     public final float getDx() { return this.dx; }
/* 113 */     public final float getDy() { return this.dy; }
/* 114 */     public RelativeReflectiveQuadTo(float dx, float dy) { super(false, true, 1, null); this.dx = dx; this.dy = dy; } public final float component1() { return this.dx; } public final float component2() { return this.dy; } @NotNull public final RelativeReflectiveQuadTo copy(float dx, float dy) { return new RelativeReflectiveQuadTo(dx, dy); } @NotNull public String toString() { return "RelativeReflectiveQuadTo(dx=" + this.dx + ", dy=" + this.dy + ')'; }
/*     */     public int hashCode() { result = Float.hashCode(this.dx); return result * 31 + Float.hashCode(this.dy); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeReflectiveQuadTo)) return false;  RelativeReflectiveQuadTo relativeReflectiveQuadTo = (RelativeReflectiveQuadTo)other; return (Float.compare(this.dx, relativeReflectiveQuadTo.dx) != 0) ? false : (!(Float.compare(this.dy, relativeReflectiveQuadTo.dy) != 0)); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\t\n\002\020\013\n\000\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B\025\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003¢\006\002\020\005J\t\020\t\032\0020\003HÆ\003J\t\020\n\032\0020\003HÆ\003J\035\020\013\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\003HÆ\001J\023\020\f\032\0020\r2\b\020\016\032\004\030\0010\017HÖ\003J\t\020\020\032\0020\021HÖ\001J\t\020\022\032\0020\023HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\006\020\007R\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\b\020\007¨\006\024"}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$ReflectiveQuadTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "x", "", "y", "(FF)V", "getX", "()F", "getY", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class ReflectiveQuadTo extends PathNode { private final float x; private final float y;
/* 118 */     public final float getX() { return this.x; }
/* 119 */     public final float getY() { return this.y; }
/* 120 */     public ReflectiveQuadTo(float x, float y) { super(false, true, 1, null); this.x = x; this.y = y; } public final float component1() { return this.x; } public final float component2() { return this.y; } @NotNull public final ReflectiveQuadTo copy(float x, float y) { return new ReflectiveQuadTo(x, y); } @NotNull public String toString() { return "ReflectiveQuadTo(x=" + this.x + ", y=" + this.y + ')'; }
/*     */     public int hashCode() { result = Float.hashCode(this.x); return result * 31 + Float.hashCode(this.y); }
/*     */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof ReflectiveQuadTo)) return false;  ReflectiveQuadTo reflectiveQuadTo = (ReflectiveQuadTo)other; return (Float.compare(this.x, reflectiveQuadTo.x) != 0) ? false : (!(Float.compare(this.y, reflectiveQuadTo.y) != 0)); } }
/*     */   @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000,\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\003\n\002\020\013\n\002\b\025\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B=\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003\022\006\020\006\032\0020\007\022\006\020\b\032\0020\007\022\006\020\t\032\0020\003\022\006\020\n\032\0020\003¢\006\002\020\013J\t\020\023\032\0020\003HÆ\003J\t\020\024\032\0020\003HÆ\003J\t\020\025\032\0020\003HÆ\003J\t\020\026\032\0020\007HÆ\003J\t\020\027\032\0020\007HÆ\003J\t\020\030\032\0020\003HÆ\003J\t\020\031\032\0020\003HÆ\003JO\020\032\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\0032\b\b\002\020\006\032\0020\0072\b\b\002\020\b\032\0020\0072\b\b\002\020\t\032\0020\0032\b\b\002\020\n\032\0020\003HÆ\001J\023\020\033\032\0020\0072\b\020\034\032\004\030\0010\035HÖ\003J\t\020\036\032\0020\037HÖ\001J\t\020 \032\0020!HÖ\001R\021\020\t\032\0020\003¢\006\b\n\000\032\004\b\f\020\rR\021\020\n\032\0020\003¢\006\b\n\000\032\004\b\016\020\rR\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\017\020\rR\021\020\006\032\0020\007¢\006\b\n\000\032\004\b\006\020\020R\021\020\b\032\0020\007¢\006\b\n\000\032\004\b\b\020\020R\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\021\020\rR\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\022\020\r¨\006\""}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$RelativeArcTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "horizontalEllipseRadius", "", "verticalEllipseRadius", "theta", "isMoreThanHalf", "", "isPositiveArc", "arcStartDx", "arcStartDy", "(FFFZZFF)V", "getArcStartDx", "()F", "getArcStartDy", "getHorizontalEllipseRadius", "()Z", "getTheta", "getVerticalEllipseRadius", "component1", "component2", "component3", "component4", "component5", "component6", "component7", "copy", "equals", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class RelativeArcTo extends PathNode { private final float horizontalEllipseRadius; private final float verticalEllipseRadius; private final float theta; private final boolean isMoreThanHalf; private final boolean isPositiveArc; private final float arcStartDx; private final float arcStartDy;
/* 124 */     public final float getHorizontalEllipseRadius() { return this.horizontalEllipseRadius; }
/* 125 */     public final float getVerticalEllipseRadius() { return this.verticalEllipseRadius; }
/* 126 */     public final float getTheta() { return this.theta; }
/* 127 */     public final boolean isMoreThanHalf() { return this.isMoreThanHalf; }
/* 128 */     public final boolean isPositiveArc() { return this.isPositiveArc; }
/* 129 */     public final float getArcStartDx() { return this.arcStartDx; }
/* 130 */     public final float getArcStartDy() { return this.arcStartDy; }
/* 131 */     public final float component1() { return this.horizontalEllipseRadius; } public final float component2() { return this.verticalEllipseRadius; } public final float component3() { return this.theta; } public final boolean component4() { return this.isMoreThanHalf; } public final boolean component5() { return this.isPositiveArc; } public final float component6() { return this.arcStartDx; } public RelativeArcTo(float horizontalEllipseRadius, float verticalEllipseRadius, float theta, boolean isMoreThanHalf, boolean isPositiveArc, float arcStartDx, float arcStartDy) { super(false, false, 3, null); this.horizontalEllipseRadius = horizontalEllipseRadius; this.verticalEllipseRadius = verticalEllipseRadius; this.theta = theta; this.isMoreThanHalf = isMoreThanHalf; this.isPositiveArc = isPositiveArc; this.arcStartDx = arcStartDx; this.arcStartDy = arcStartDy; }
/*     */     public final float component7() { return this.arcStartDy; } @NotNull public final RelativeArcTo copy(float horizontalEllipseRadius, float verticalEllipseRadius, float theta, boolean isMoreThanHalf, boolean isPositiveArc, float arcStartDx, float arcStartDy) { return new RelativeArcTo(horizontalEllipseRadius, verticalEllipseRadius, theta, isMoreThanHalf, isPositiveArc, arcStartDx, arcStartDy); } @NotNull public String toString() { return "RelativeArcTo(horizontalEllipseRadius=" + this.horizontalEllipseRadius + ", verticalEllipseRadius=" + this.verticalEllipseRadius + ", theta=" + this.theta + ", isMoreThanHalf=" + this.isMoreThanHalf + ", isPositiveArc=" + this.isPositiveArc + ", arcStartDx=" + this.arcStartDx + ", arcStartDy=" + this.arcStartDy + ')'; } public int hashCode() { result = Float.hashCode(this.horizontalEllipseRadius); result = result * 31 + Float.hashCode(this.verticalEllipseRadius); result = result * 31 + Float.hashCode(this.theta); result = result * 31 + Boolean.hashCode(this.isMoreThanHalf); result = result * 31 + Boolean.hashCode(this.isPositiveArc); result = result * 31 + Float.hashCode(this.arcStartDx); return result * 31 + Float.hashCode(this.arcStartDy); } public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof RelativeArcTo)) return false;  RelativeArcTo relativeArcTo = (RelativeArcTo)other; return (Float.compare(this.horizontalEllipseRadius, relativeArcTo.horizontalEllipseRadius) != 0) ? false : ((Float.compare(this.verticalEllipseRadius, relativeArcTo.verticalEllipseRadius) != 0) ? false : ((Float.compare(this.theta, relativeArcTo.theta) != 0) ? false : ((this.isMoreThanHalf != relativeArcTo.isMoreThanHalf) ? false : ((this.isPositiveArc != relativeArcTo.isPositiveArc) ? false : ((Float.compare(this.arcStartDx, relativeArcTo.arcStartDx) != 0) ? false : (!(Float.compare(this.arcStartDy, relativeArcTo.arcStartDy) != 0))))))); } }
/*     */    @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000,\n\002\030\002\n\002\030\002\n\000\n\002\020\007\n\002\b\003\n\002\020\013\n\002\b\025\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\b\b\030\0002\0020\001B=\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003\022\006\020\006\032\0020\007\022\006\020\b\032\0020\007\022\006\020\t\032\0020\003\022\006\020\n\032\0020\003¢\006\002\020\013J\t\020\023\032\0020\003HÆ\003J\t\020\024\032\0020\003HÆ\003J\t\020\025\032\0020\003HÆ\003J\t\020\026\032\0020\007HÆ\003J\t\020\027\032\0020\007HÆ\003J\t\020\030\032\0020\003HÆ\003J\t\020\031\032\0020\003HÆ\003JO\020\032\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\0032\b\b\002\020\006\032\0020\0072\b\b\002\020\b\032\0020\0072\b\b\002\020\t\032\0020\0032\b\b\002\020\n\032\0020\003HÆ\001J\023\020\033\032\0020\0072\b\020\034\032\004\030\0010\035HÖ\003J\t\020\036\032\0020\037HÖ\001J\t\020 \032\0020!HÖ\001R\021\020\t\032\0020\003¢\006\b\n\000\032\004\b\f\020\rR\021\020\n\032\0020\003¢\006\b\n\000\032\004\b\016\020\rR\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\017\020\rR\021\020\006\032\0020\007¢\006\b\n\000\032\004\b\006\020\020R\021\020\b\032\0020\007¢\006\b\n\000\032\004\b\b\020\020R\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\021\020\rR\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\022\020\r¨\006\""}, d2 = {"Landroidx/compose/ui/graphics/vector/PathNode$ArcTo;", "Landroidx/compose/ui/graphics/vector/PathNode;", "horizontalEllipseRadius", "", "verticalEllipseRadius", "theta", "isMoreThanHalf", "", "isPositiveArc", "arcStartX", "arcStartY", "(FFFZZFF)V", "getArcStartX", "()F", "getArcStartY", "getHorizontalEllipseRadius", "()Z", "getTheta", "getVerticalEllipseRadius", "component1", "component2", "component3", "component4", "component5", "component6", "component7", "copy", "equals", "other", "", "hashCode", "", "toString", "", "ui-graphics"}) @Immutable public static final class ArcTo extends PathNode
/*     */   {
/* 135 */     private final float horizontalEllipseRadius; private final float verticalEllipseRadius; private final float theta; public final float getHorizontalEllipseRadius() { return this.horizontalEllipseRadius; } private final boolean isMoreThanHalf; private final boolean isPositiveArc; private final float arcStartX; private final float arcStartY; public final float getVerticalEllipseRadius() {
/* 136 */       return this.verticalEllipseRadius; }
/* 137 */     public final float getTheta() { return this.theta; }
/* 138 */     public final boolean isMoreThanHalf() { return this.isMoreThanHalf; }
/* 139 */     public final boolean isPositiveArc() { return this.isPositiveArc; }
/* 140 */     public final float getArcStartX() { return this.arcStartX; }
/* 141 */     public final float getArcStartY() { return this.arcStartY; } public ArcTo(float horizontalEllipseRadius, float verticalEllipseRadius, float theta, boolean isMoreThanHalf, boolean isPositiveArc, float arcStartX, float arcStartY) {
/* 142 */       super(false, false, 3, null);
/*     */       this.horizontalEllipseRadius = horizontalEllipseRadius;
/*     */       this.verticalEllipseRadius = verticalEllipseRadius;
/*     */       this.theta = theta;
/*     */       this.isMoreThanHalf = isMoreThanHalf;
/*     */       this.isPositiveArc = isPositiveArc;
/*     */       this.arcStartX = arcStartX;
/*     */       this.arcStartY = arcStartY;
/*     */     }
/*     */     
/*     */     public final float component1() {
/*     */       return this.horizontalEllipseRadius;
/*     */     }
/*     */     
/*     */     public final float component2() {
/*     */       return this.verticalEllipseRadius;
/*     */     }
/*     */     
/*     */     public final float component3() {
/*     */       return this.theta;
/*     */     }
/*     */     
/*     */     public final boolean component4() {
/*     */       return this.isMoreThanHalf;
/*     */     }
/*     */     
/*     */     public final boolean component5() {
/*     */       return this.isPositiveArc;
/*     */     }
/*     */     
/*     */     public final float component6() {
/*     */       return this.arcStartX;
/*     */     }
/*     */     
/*     */     public final float component7() {
/*     */       return this.arcStartY;
/*     */     }
/*     */     
/*     */     @NotNull
/*     */     public final ArcTo copy(float horizontalEllipseRadius, float verticalEllipseRadius, float theta, boolean isMoreThanHalf, boolean isPositiveArc, float arcStartX, float arcStartY) {
/*     */       return new ArcTo(horizontalEllipseRadius, verticalEllipseRadius, theta, isMoreThanHalf, isPositiveArc, arcStartX, arcStartY);
/*     */     }
/*     */     
/*     */     @NotNull
/*     */     public String toString() {
/*     */       return "ArcTo(horizontalEllipseRadius=" + this.horizontalEllipseRadius + ", verticalEllipseRadius=" + this.verticalEllipseRadius + ", theta=" + this.theta + ", isMoreThanHalf=" + this.isMoreThanHalf + ", isPositiveArc=" + this.isPositiveArc + ", arcStartX=" + this.arcStartX + ", arcStartY=" + this.arcStartY + ')';
/*     */     }
/*     */     
/*     */     public int hashCode() {
/*     */       result = Float.hashCode(this.horizontalEllipseRadius);
/*     */       result = result * 31 + Float.hashCode(this.verticalEllipseRadius);
/*     */       result = result * 31 + Float.hashCode(this.theta);
/*     */       result = result * 31 + Boolean.hashCode(this.isMoreThanHalf);
/*     */       result = result * 31 + Boolean.hashCode(this.isPositiveArc);
/*     */       result = result * 31 + Float.hashCode(this.arcStartX);
/*     */       return result * 31 + Float.hashCode(this.arcStartY);
/*     */     }
/*     */     
/*     */     public boolean equals(@Nullable Object other) {
/*     */       if (this == other)
/*     */         return true; 
/*     */       if (!(other instanceof ArcTo))
/*     */         return false; 
/*     */       ArcTo arcTo = (ArcTo)other;
/*     */       return (Float.compare(this.horizontalEllipseRadius, arcTo.horizontalEllipseRadius) != 0) ? false : ((Float.compare(this.verticalEllipseRadius, arcTo.verticalEllipseRadius) != 0) ? false : ((Float.compare(this.theta, arcTo.theta) != 0) ? false : ((this.isMoreThanHalf != arcTo.isMoreThanHalf) ? false : ((this.isPositiveArc != arcTo.isPositiveArc) ? false : ((Float.compare(this.arcStartX, arcTo.arcStartX) != 0) ? false : (!(Float.compare(this.arcStartY, arcTo.arcStartY) != 0)))))));
/*     */     }
/*     */   }
/*     */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\li\\ui-graphics-desktop-1.7.3.jar!\androidx\compos\\ui\graphics\vector\PathNode.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */