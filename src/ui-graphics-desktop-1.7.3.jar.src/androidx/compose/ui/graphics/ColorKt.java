/*      */ package androidx.compose.ui.graphics;
/*      */ 
/*      */ import androidx.annotation.ColorInt;
/*      */ import androidx.annotation.FloatRange;
/*      */ import androidx.annotation.IntRange;
/*      */ import androidx.annotation.Size;
/*      */ import androidx.compose.runtime.Stable;
/*      */ import androidx.compose.ui.graphics.colorspace.ColorSpace;
/*      */ import androidx.compose.ui.graphics.colorspace.ColorSpaces;
/*      */ import androidx.compose.ui.util.MathHelpersKt;
/*      */ import kotlin.Metadata;
/*      */ import kotlin.PublishedApi;
/*      */ import kotlin.ULong;
/*      */ import kotlin.jvm.functions.Function0;
/*      */ import kotlin.jvm.internal.Intrinsics;
/*      */ import kotlin.jvm.internal.SourceDebugExtension;
/*      */ import org.jetbrains.annotations.NotNull;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ @Metadata(mv = {1, 9, 0}, k = 2, xi = 48, d1 = {"\000F\n\000\n\002\030\002\n\002\b\004\n\002\020\013\n\002\030\002\n\002\b\t\n\002\020\007\n\002\b\004\n\002\030\002\n\002\b\002\n\002\020\b\n\002\b\002\n\002\020\t\n\002\b\023\n\002\020\024\n\002\b\007\n\002\030\002\n\002\b\006\0329\020\017\032\0020\0072\006\020\020\032\0020\0212\006\020\022\032\0020\0212\006\020\023\032\0020\0212\b\b\002\020\024\032\0020\0212\b\b\002\020\025\032\0020\026H\007¢\006\002\020\027\032\027\020\017\032\0020\0072\b\b\001\020\030\032\0020\031H\007¢\006\002\020\032\0325\020\017\032\0020\0072\b\b\001\020\020\032\0020\0312\b\b\001\020\022\032\0020\0312\b\b\001\020\023\032\0020\0312\b\b\003\020\024\032\0020\031H\007¢\006\002\020\033\032\025\020\017\032\0020\0072\006\020\030\032\0020\034H\007¢\006\002\020\035\0329\020\036\032\0020\0072\006\020\020\032\0020\0212\006\020\022\032\0020\0212\006\020\023\032\0020\0212\b\b\002\020\024\032\0020\0212\b\b\002\020\025\032\0020\026H\001¢\006\002\020\027\0321\020\037\032\0020\0212\006\020 \032\0020\0212\006\020!\032\0020\0212\006\020\"\032\0020\0212\006\020#\032\0020\0212\006\020$\032\0020\021H\b\032,\020%\032\0020\0072\006\020&\032\0020\0072\006\020'\032\0020\0072\b\b\001\020(\032\0020\021H\007ø\001\000¢\006\004\b)\020*\032\036\020+\032\0020\007*\0020\0072\006\020,\032\0020\007H\007ø\001\000¢\006\004\b-\020.\032\026\020/\032\00200*\0020\007H\003ø\001\000¢\006\004\b1\0202\032\026\0203\032\0020\021*\0020\007H\007ø\001\000¢\006\004\b4\0205\032(\0206\032\0020\007*\0020\0072\f\0207\032\b\022\004\022\0020\00708H\bø\001\001ø\001\000¢\006\004\b9\020:\032\026\020;\032\0020\031*\0020\007H\007ø\001\000¢\006\004\b<\020=\"\030\020\000\032\0020\0018\000XT¢\006\n\n\002\020\004\022\004\b\002\020\003\"\037\020\005\032\0020\006*\0020\0078Æ\002X\004¢\006\f\022\004\b\b\020\t\032\004\b\n\020\013\"\037\020\f\032\0020\006*\0020\0078Æ\002X\004¢\006\f\022\004\b\r\020\t\032\004\b\016\020\013\002\016\n\005\b¡\0360\001\n\005\b20\001¨\006>"}, d2 = {"UnspecifiedColor", "Lkotlin/ULong;", "getUnspecifiedColor$annotations", "()V", "J", "isSpecified", "", "Landroidx/compose/ui/graphics/Color;", "isSpecified-8_81llA$annotations", "(J)V", "isSpecified-8_81llA", "(J)Z", "isUnspecified", "isUnspecified-8_81llA$annotations", "isUnspecified-8_81llA", "Color", "red", "", "green", "blue", "alpha", "colorSpace", "Landroidx/compose/ui/graphics/colorspace/ColorSpace;", "(FFFFLandroidx/compose/ui/graphics/colorspace/ColorSpace;)J", "color", "", "(I)J", "(IIII)J", "", "(J)J", "UncheckedColor", "compositeComponent", "fgC", "bgC", "fgA", "bgA", "a", "lerp", "start", "stop", "fraction", "lerp-jxsXWHM", "(JJF)J", "compositeOver", "background", "compositeOver--OWjLjI", "(JJ)J", "getComponents", "", "getComponents-8_81llA", "(J)[F", "luminance", "luminance-8_81llA", "(J)F", "takeOrElse", "block", "Lkotlin/Function0;", "takeOrElse-DxMtmZc", "(JLkotlin/jvm/functions/Function0;)J", "toArgb", "toArgb-8_81llA", "(J)I", "ui-graphics"})
/*      */ @SourceDebugExtension({"SMAP\nColor.kt\nKotlin\n*S Kotlin\n*F\n+ 1 Color.kt\nandroidx/compose/ui/graphics/ColorKt\n+ 2 MathHelpers.kt\nandroidx/compose/ui/util/MathHelpersKt\n+ 3 InlineClassHelper.kt\nandroidx/compose/ui/graphics/InlineClassHelperKt\n+ 4 Float16.kt\nandroidx/compose/ui/graphics/Float16Kt\n*L\n1#1,723:1\n641#1:1110\n641#1:1111\n641#1:1112\n696#1:1136\n71#2,16:724\n71#2,16:740\n71#2,16:756\n71#2,16:772\n71#2,16:802\n71#2,16:856\n71#2,16:910\n71#2,16:964\n71#2,16:1094\n71#2,16:1120\n33#3,7:788\n33#3,7:795\n33#3,7:1113\n605#4,38:818\n605#4,38:872\n605#4,38:926\n605#4,38:980\n605#4,38:1018\n605#4,38:1056\n*S KotlinDebug\n*F\n+ 1 Color.kt\nandroidx/compose/ui/graphics/ColorKt\n*L\n621#1:1110\n622#1:1111\n623#1:1112\n708#1:1136\n432#1:724,16\n433#1:740,16\n434#1:756,16\n435#1:772,16\n449#1:802,16\n450#1:856,16\n451#1:910,16\n452#1:964,16\n591#1:1094,16\n676#1:1120,16\n440#1:788,7\n445#1:795,7\n666#1:1113,7\n449#1:818,38\n450#1:872,38\n451#1:926,38\n489#1:980,38\n490#1:1018,38\n491#1:1056,38\n*E\n"})
/*      */ public final class ColorKt
/*      */ {
/*      */   public static final long UnspecifiedColor = 16L;
/*      */   
/*      */   @Stable
/*      */   public static final long Color(float red, float green, float blue, float alpha, @NotNull ColorSpace colorSpace) {
/*      */     // Byte code:
/*      */     //   0: aload #4
/*      */     //   2: ldc 'colorSpace'
/*      */     //   4: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   7: aload #4
/*      */     //   9: invokevirtual isSrgb : ()Z
/*      */     //   12: ifeq -> 297
/*      */     //   15: fload_3
/*      */     //   16: fstore #6
/*      */     //   18: fconst_0
/*      */     //   19: fstore #7
/*      */     //   21: fconst_1
/*      */     //   22: fstore #8
/*      */     //   24: iconst_0
/*      */     //   25: istore #9
/*      */     //   27: fload #6
/*      */     //   29: fstore #10
/*      */     //   31: iconst_0
/*      */     //   32: istore #11
/*      */     //   34: fload #10
/*      */     //   36: fload #7
/*      */     //   38: fcmpg
/*      */     //   39: ifge -> 47
/*      */     //   42: fload #7
/*      */     //   44: goto -> 49
/*      */     //   47: fload #10
/*      */     //   49: fstore #10
/*      */     //   51: nop
/*      */     //   52: iconst_0
/*      */     //   53: istore #11
/*      */     //   55: fload #10
/*      */     //   57: fload #8
/*      */     //   59: fcmpl
/*      */     //   60: ifle -> 68
/*      */     //   63: fload #8
/*      */     //   65: goto -> 70
/*      */     //   68: fload #10
/*      */     //   70: nop
/*      */     //   71: ldc 255.0
/*      */     //   73: fmul
/*      */     //   74: ldc 0.5
/*      */     //   76: fadd
/*      */     //   77: f2i
/*      */     //   78: bipush #24
/*      */     //   80: ishl
/*      */     //   81: fload_0
/*      */     //   82: fstore #6
/*      */     //   84: fconst_0
/*      */     //   85: fstore #7
/*      */     //   87: fconst_1
/*      */     //   88: fstore #8
/*      */     //   90: iconst_0
/*      */     //   91: istore #9
/*      */     //   93: fload #6
/*      */     //   95: fstore #10
/*      */     //   97: iconst_0
/*      */     //   98: istore #11
/*      */     //   100: fload #10
/*      */     //   102: fload #7
/*      */     //   104: fcmpg
/*      */     //   105: ifge -> 113
/*      */     //   108: fload #7
/*      */     //   110: goto -> 115
/*      */     //   113: fload #10
/*      */     //   115: fstore #10
/*      */     //   117: nop
/*      */     //   118: iconst_0
/*      */     //   119: istore #11
/*      */     //   121: fload #10
/*      */     //   123: fload #8
/*      */     //   125: fcmpl
/*      */     //   126: ifle -> 134
/*      */     //   129: fload #8
/*      */     //   131: goto -> 136
/*      */     //   134: fload #10
/*      */     //   136: nop
/*      */     //   137: ldc 255.0
/*      */     //   139: fmul
/*      */     //   140: ldc 0.5
/*      */     //   142: fadd
/*      */     //   143: f2i
/*      */     //   144: bipush #16
/*      */     //   146: ishl
/*      */     //   147: ior
/*      */     //   148: fload_1
/*      */     //   149: fstore #6
/*      */     //   151: fconst_0
/*      */     //   152: fstore #7
/*      */     //   154: fconst_1
/*      */     //   155: fstore #8
/*      */     //   157: iconst_0
/*      */     //   158: istore #9
/*      */     //   160: fload #6
/*      */     //   162: fstore #10
/*      */     //   164: iconst_0
/*      */     //   165: istore #11
/*      */     //   167: fload #10
/*      */     //   169: fload #7
/*      */     //   171: fcmpg
/*      */     //   172: ifge -> 180
/*      */     //   175: fload #7
/*      */     //   177: goto -> 182
/*      */     //   180: fload #10
/*      */     //   182: fstore #10
/*      */     //   184: nop
/*      */     //   185: iconst_0
/*      */     //   186: istore #11
/*      */     //   188: fload #10
/*      */     //   190: fload #8
/*      */     //   192: fcmpl
/*      */     //   193: ifle -> 201
/*      */     //   196: fload #8
/*      */     //   198: goto -> 203
/*      */     //   201: fload #10
/*      */     //   203: nop
/*      */     //   204: ldc 255.0
/*      */     //   206: fmul
/*      */     //   207: ldc 0.5
/*      */     //   209: fadd
/*      */     //   210: f2i
/*      */     //   211: bipush #8
/*      */     //   213: ishl
/*      */     //   214: ior
/*      */     //   215: fload_2
/*      */     //   216: fstore #6
/*      */     //   218: fconst_0
/*      */     //   219: fstore #7
/*      */     //   221: fconst_1
/*      */     //   222: fstore #8
/*      */     //   224: iconst_0
/*      */     //   225: istore #9
/*      */     //   227: fload #6
/*      */     //   229: fstore #10
/*      */     //   231: iconst_0
/*      */     //   232: istore #11
/*      */     //   234: fload #10
/*      */     //   236: fload #7
/*      */     //   238: fcmpg
/*      */     //   239: ifge -> 247
/*      */     //   242: fload #7
/*      */     //   244: goto -> 249
/*      */     //   247: fload #10
/*      */     //   249: fstore #10
/*      */     //   251: nop
/*      */     //   252: iconst_0
/*      */     //   253: istore #11
/*      */     //   255: fload #10
/*      */     //   257: fload #8
/*      */     //   259: fcmpl
/*      */     //   260: ifle -> 268
/*      */     //   263: fload #8
/*      */     //   265: goto -> 270
/*      */     //   268: fload #10
/*      */     //   270: nop
/*      */     //   271: ldc 255.0
/*      */     //   273: fmul
/*      */     //   274: ldc 0.5
/*      */     //   276: fadd
/*      */     //   277: f2i
/*      */     //   278: ior
/*      */     //   279: istore #5
/*      */     //   281: iload #5
/*      */     //   283: i2l
/*      */     //   284: invokestatic constructor-impl : (J)J
/*      */     //   287: bipush #32
/*      */     //   289: lshl
/*      */     //   290: invokestatic constructor-impl : (J)J
/*      */     //   293: invokestatic constructor-impl : (J)J
/*      */     //   296: lreturn
/*      */     //   297: aload #4
/*      */     //   299: invokevirtual getComponentCount : ()I
/*      */     //   302: iconst_3
/*      */     //   303: if_icmpne -> 310
/*      */     //   306: iconst_1
/*      */     //   307: goto -> 311
/*      */     //   310: iconst_0
/*      */     //   311: istore #5
/*      */     //   313: iconst_0
/*      */     //   314: istore #6
/*      */     //   316: nop
/*      */     //   317: iload #5
/*      */     //   319: ifne -> 330
/*      */     //   322: iconst_0
/*      */     //   323: istore #7
/*      */     //   325: ldc 'Color only works with ColorSpaces with 3 components'
/*      */     //   327: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   330: nop
/*      */     //   331: aload #4
/*      */     //   333: invokevirtual getId$ui_graphics : ()I
/*      */     //   336: istore #5
/*      */     //   338: iload #5
/*      */     //   340: iconst_m1
/*      */     //   341: if_icmpeq -> 348
/*      */     //   344: iconst_1
/*      */     //   345: goto -> 349
/*      */     //   348: iconst_0
/*      */     //   349: istore #6
/*      */     //   351: iconst_0
/*      */     //   352: istore #7
/*      */     //   354: nop
/*      */     //   355: iload #6
/*      */     //   357: ifne -> 368
/*      */     //   360: iconst_0
/*      */     //   361: istore #8
/*      */     //   363: ldc 'Unknown color space, please use a color space in ColorSpaces'
/*      */     //   365: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   368: nop
/*      */     //   369: fload_0
/*      */     //   370: fstore #7
/*      */     //   372: aload #4
/*      */     //   374: iconst_0
/*      */     //   375: invokevirtual getMinValue : (I)F
/*      */     //   378: fstore #8
/*      */     //   380: aload #4
/*      */     //   382: iconst_0
/*      */     //   383: invokevirtual getMaxValue : (I)F
/*      */     //   386: fstore #9
/*      */     //   388: iconst_0
/*      */     //   389: istore #10
/*      */     //   391: fload #7
/*      */     //   393: fstore #11
/*      */     //   395: iconst_0
/*      */     //   396: istore #12
/*      */     //   398: fload #11
/*      */     //   400: fload #8
/*      */     //   402: fcmpg
/*      */     //   403: ifge -> 411
/*      */     //   406: fload #8
/*      */     //   408: goto -> 413
/*      */     //   411: fload #11
/*      */     //   413: fstore #11
/*      */     //   415: nop
/*      */     //   416: iconst_0
/*      */     //   417: istore #12
/*      */     //   419: fload #11
/*      */     //   421: fload #9
/*      */     //   423: fcmpl
/*      */     //   424: ifle -> 432
/*      */     //   427: fload #9
/*      */     //   429: goto -> 434
/*      */     //   432: fload #11
/*      */     //   434: nop
/*      */     //   435: fstore #7
/*      */     //   437: nop
/*      */     //   438: iconst_0
/*      */     //   439: istore #8
/*      */     //   441: fload #7
/*      */     //   443: invokestatic floatToRawIntBits : (F)I
/*      */     //   446: istore #9
/*      */     //   448: iload #9
/*      */     //   450: bipush #31
/*      */     //   452: iushr
/*      */     //   453: istore #10
/*      */     //   455: iload #9
/*      */     //   457: bipush #23
/*      */     //   459: iushr
/*      */     //   460: sipush #255
/*      */     //   463: iand
/*      */     //   464: istore #11
/*      */     //   466: iload #9
/*      */     //   468: ldc 8388607
/*      */     //   470: iand
/*      */     //   471: istore #12
/*      */     //   473: iconst_0
/*      */     //   474: istore #13
/*      */     //   476: iconst_0
/*      */     //   477: istore #14
/*      */     //   479: iload #11
/*      */     //   481: sipush #255
/*      */     //   484: if_icmpne -> 508
/*      */     //   487: bipush #31
/*      */     //   489: istore #13
/*      */     //   491: iload #12
/*      */     //   493: ifeq -> 502
/*      */     //   496: sipush #512
/*      */     //   499: goto -> 503
/*      */     //   502: iconst_0
/*      */     //   503: istore #14
/*      */     //   505: goto -> 628
/*      */     //   508: iload #11
/*      */     //   510: bipush #127
/*      */     //   512: isub
/*      */     //   513: bipush #15
/*      */     //   515: iadd
/*      */     //   516: istore #11
/*      */     //   518: iload #11
/*      */     //   520: bipush #31
/*      */     //   522: if_icmplt -> 532
/*      */     //   525: bipush #49
/*      */     //   527: istore #13
/*      */     //   529: goto -> 628
/*      */     //   532: iload #11
/*      */     //   534: ifgt -> 583
/*      */     //   537: iload #11
/*      */     //   539: bipush #-10
/*      */     //   541: if_icmplt -> 628
/*      */     //   544: iload #12
/*      */     //   546: ldc 8388608
/*      */     //   548: ior
/*      */     //   549: iconst_1
/*      */     //   550: iload #11
/*      */     //   552: isub
/*      */     //   553: ishr
/*      */     //   554: istore #12
/*      */     //   556: iload #12
/*      */     //   558: sipush #4096
/*      */     //   561: iand
/*      */     //   562: ifeq -> 573
/*      */     //   565: iload #12
/*      */     //   567: sipush #8192
/*      */     //   570: iadd
/*      */     //   571: istore #12
/*      */     //   573: iload #12
/*      */     //   575: bipush #13
/*      */     //   577: ishr
/*      */     //   578: istore #14
/*      */     //   580: goto -> 628
/*      */     //   583: iload #11
/*      */     //   585: istore #13
/*      */     //   587: iload #12
/*      */     //   589: bipush #13
/*      */     //   591: ishr
/*      */     //   592: istore #14
/*      */     //   594: iload #12
/*      */     //   596: sipush #4096
/*      */     //   599: iand
/*      */     //   600: ifeq -> 628
/*      */     //   603: iload #13
/*      */     //   605: bipush #10
/*      */     //   607: ishl
/*      */     //   608: iload #14
/*      */     //   610: ior
/*      */     //   611: istore #15
/*      */     //   613: iinc #15, 1
/*      */     //   616: iload #15
/*      */     //   618: iload #10
/*      */     //   620: bipush #15
/*      */     //   622: ishl
/*      */     //   623: ior
/*      */     //   624: i2s
/*      */     //   625: goto -> 643
/*      */     //   628: iload #10
/*      */     //   630: bipush #15
/*      */     //   632: ishl
/*      */     //   633: iload #13
/*      */     //   635: bipush #10
/*      */     //   637: ishl
/*      */     //   638: ior
/*      */     //   639: iload #14
/*      */     //   641: ior
/*      */     //   642: i2s
/*      */     //   643: istore #6
/*      */     //   645: fload_1
/*      */     //   646: fstore #8
/*      */     //   648: aload #4
/*      */     //   650: iconst_1
/*      */     //   651: invokevirtual getMinValue : (I)F
/*      */     //   654: fstore #9
/*      */     //   656: aload #4
/*      */     //   658: iconst_1
/*      */     //   659: invokevirtual getMaxValue : (I)F
/*      */     //   662: fstore #10
/*      */     //   664: iconst_0
/*      */     //   665: istore #11
/*      */     //   667: fload #8
/*      */     //   669: fstore #12
/*      */     //   671: iconst_0
/*      */     //   672: istore #13
/*      */     //   674: fload #12
/*      */     //   676: fload #9
/*      */     //   678: fcmpg
/*      */     //   679: ifge -> 687
/*      */     //   682: fload #9
/*      */     //   684: goto -> 689
/*      */     //   687: fload #12
/*      */     //   689: fstore #12
/*      */     //   691: nop
/*      */     //   692: iconst_0
/*      */     //   693: istore #13
/*      */     //   695: fload #12
/*      */     //   697: fload #10
/*      */     //   699: fcmpl
/*      */     //   700: ifle -> 708
/*      */     //   703: fload #10
/*      */     //   705: goto -> 710
/*      */     //   708: fload #12
/*      */     //   710: nop
/*      */     //   711: fstore #8
/*      */     //   713: nop
/*      */     //   714: iconst_0
/*      */     //   715: istore #9
/*      */     //   717: fload #8
/*      */     //   719: invokestatic floatToRawIntBits : (F)I
/*      */     //   722: istore #10
/*      */     //   724: iload #10
/*      */     //   726: bipush #31
/*      */     //   728: iushr
/*      */     //   729: istore #11
/*      */     //   731: iload #10
/*      */     //   733: bipush #23
/*      */     //   735: iushr
/*      */     //   736: sipush #255
/*      */     //   739: iand
/*      */     //   740: istore #12
/*      */     //   742: iload #10
/*      */     //   744: ldc 8388607
/*      */     //   746: iand
/*      */     //   747: istore #13
/*      */     //   749: iconst_0
/*      */     //   750: istore #14
/*      */     //   752: iconst_0
/*      */     //   753: istore #15
/*      */     //   755: iload #12
/*      */     //   757: sipush #255
/*      */     //   760: if_icmpne -> 784
/*      */     //   763: bipush #31
/*      */     //   765: istore #14
/*      */     //   767: iload #13
/*      */     //   769: ifeq -> 778
/*      */     //   772: sipush #512
/*      */     //   775: goto -> 779
/*      */     //   778: iconst_0
/*      */     //   779: istore #15
/*      */     //   781: goto -> 904
/*      */     //   784: iload #12
/*      */     //   786: bipush #127
/*      */     //   788: isub
/*      */     //   789: bipush #15
/*      */     //   791: iadd
/*      */     //   792: istore #12
/*      */     //   794: iload #12
/*      */     //   796: bipush #31
/*      */     //   798: if_icmplt -> 808
/*      */     //   801: bipush #49
/*      */     //   803: istore #14
/*      */     //   805: goto -> 904
/*      */     //   808: iload #12
/*      */     //   810: ifgt -> 859
/*      */     //   813: iload #12
/*      */     //   815: bipush #-10
/*      */     //   817: if_icmplt -> 904
/*      */     //   820: iload #13
/*      */     //   822: ldc 8388608
/*      */     //   824: ior
/*      */     //   825: iconst_1
/*      */     //   826: iload #12
/*      */     //   828: isub
/*      */     //   829: ishr
/*      */     //   830: istore #13
/*      */     //   832: iload #13
/*      */     //   834: sipush #4096
/*      */     //   837: iand
/*      */     //   838: ifeq -> 849
/*      */     //   841: iload #13
/*      */     //   843: sipush #8192
/*      */     //   846: iadd
/*      */     //   847: istore #13
/*      */     //   849: iload #13
/*      */     //   851: bipush #13
/*      */     //   853: ishr
/*      */     //   854: istore #15
/*      */     //   856: goto -> 904
/*      */     //   859: iload #12
/*      */     //   861: istore #14
/*      */     //   863: iload #13
/*      */     //   865: bipush #13
/*      */     //   867: ishr
/*      */     //   868: istore #15
/*      */     //   870: iload #13
/*      */     //   872: sipush #4096
/*      */     //   875: iand
/*      */     //   876: ifeq -> 904
/*      */     //   879: iload #14
/*      */     //   881: bipush #10
/*      */     //   883: ishl
/*      */     //   884: iload #15
/*      */     //   886: ior
/*      */     //   887: istore #16
/*      */     //   889: iinc #16, 1
/*      */     //   892: iload #16
/*      */     //   894: iload #11
/*      */     //   896: bipush #15
/*      */     //   898: ishl
/*      */     //   899: ior
/*      */     //   900: i2s
/*      */     //   901: goto -> 919
/*      */     //   904: iload #11
/*      */     //   906: bipush #15
/*      */     //   908: ishl
/*      */     //   909: iload #14
/*      */     //   911: bipush #10
/*      */     //   913: ishl
/*      */     //   914: ior
/*      */     //   915: iload #15
/*      */     //   917: ior
/*      */     //   918: i2s
/*      */     //   919: istore #7
/*      */     //   921: fload_2
/*      */     //   922: fstore #9
/*      */     //   924: aload #4
/*      */     //   926: iconst_2
/*      */     //   927: invokevirtual getMinValue : (I)F
/*      */     //   930: fstore #10
/*      */     //   932: aload #4
/*      */     //   934: iconst_2
/*      */     //   935: invokevirtual getMaxValue : (I)F
/*      */     //   938: fstore #11
/*      */     //   940: iconst_0
/*      */     //   941: istore #12
/*      */     //   943: fload #9
/*      */     //   945: fstore #13
/*      */     //   947: iconst_0
/*      */     //   948: istore #14
/*      */     //   950: fload #13
/*      */     //   952: fload #10
/*      */     //   954: fcmpg
/*      */     //   955: ifge -> 963
/*      */     //   958: fload #10
/*      */     //   960: goto -> 965
/*      */     //   963: fload #13
/*      */     //   965: fstore #13
/*      */     //   967: nop
/*      */     //   968: iconst_0
/*      */     //   969: istore #14
/*      */     //   971: fload #13
/*      */     //   973: fload #11
/*      */     //   975: fcmpl
/*      */     //   976: ifle -> 984
/*      */     //   979: fload #11
/*      */     //   981: goto -> 986
/*      */     //   984: fload #13
/*      */     //   986: nop
/*      */     //   987: fstore #9
/*      */     //   989: nop
/*      */     //   990: iconst_0
/*      */     //   991: istore #10
/*      */     //   993: fload #9
/*      */     //   995: invokestatic floatToRawIntBits : (F)I
/*      */     //   998: istore #11
/*      */     //   1000: iload #11
/*      */     //   1002: bipush #31
/*      */     //   1004: iushr
/*      */     //   1005: istore #12
/*      */     //   1007: iload #11
/*      */     //   1009: bipush #23
/*      */     //   1011: iushr
/*      */     //   1012: sipush #255
/*      */     //   1015: iand
/*      */     //   1016: istore #13
/*      */     //   1018: iload #11
/*      */     //   1020: ldc 8388607
/*      */     //   1022: iand
/*      */     //   1023: istore #14
/*      */     //   1025: iconst_0
/*      */     //   1026: istore #15
/*      */     //   1028: iconst_0
/*      */     //   1029: istore #16
/*      */     //   1031: iload #13
/*      */     //   1033: sipush #255
/*      */     //   1036: if_icmpne -> 1060
/*      */     //   1039: bipush #31
/*      */     //   1041: istore #15
/*      */     //   1043: iload #14
/*      */     //   1045: ifeq -> 1054
/*      */     //   1048: sipush #512
/*      */     //   1051: goto -> 1055
/*      */     //   1054: iconst_0
/*      */     //   1055: istore #16
/*      */     //   1057: goto -> 1180
/*      */     //   1060: iload #13
/*      */     //   1062: bipush #127
/*      */     //   1064: isub
/*      */     //   1065: bipush #15
/*      */     //   1067: iadd
/*      */     //   1068: istore #13
/*      */     //   1070: iload #13
/*      */     //   1072: bipush #31
/*      */     //   1074: if_icmplt -> 1084
/*      */     //   1077: bipush #49
/*      */     //   1079: istore #15
/*      */     //   1081: goto -> 1180
/*      */     //   1084: iload #13
/*      */     //   1086: ifgt -> 1135
/*      */     //   1089: iload #13
/*      */     //   1091: bipush #-10
/*      */     //   1093: if_icmplt -> 1180
/*      */     //   1096: iload #14
/*      */     //   1098: ldc 8388608
/*      */     //   1100: ior
/*      */     //   1101: iconst_1
/*      */     //   1102: iload #13
/*      */     //   1104: isub
/*      */     //   1105: ishr
/*      */     //   1106: istore #14
/*      */     //   1108: iload #14
/*      */     //   1110: sipush #4096
/*      */     //   1113: iand
/*      */     //   1114: ifeq -> 1125
/*      */     //   1117: iload #14
/*      */     //   1119: sipush #8192
/*      */     //   1122: iadd
/*      */     //   1123: istore #14
/*      */     //   1125: iload #14
/*      */     //   1127: bipush #13
/*      */     //   1129: ishr
/*      */     //   1130: istore #16
/*      */     //   1132: goto -> 1180
/*      */     //   1135: iload #13
/*      */     //   1137: istore #15
/*      */     //   1139: iload #14
/*      */     //   1141: bipush #13
/*      */     //   1143: ishr
/*      */     //   1144: istore #16
/*      */     //   1146: iload #14
/*      */     //   1148: sipush #4096
/*      */     //   1151: iand
/*      */     //   1152: ifeq -> 1180
/*      */     //   1155: iload #15
/*      */     //   1157: bipush #10
/*      */     //   1159: ishl
/*      */     //   1160: iload #16
/*      */     //   1162: ior
/*      */     //   1163: istore #17
/*      */     //   1165: iinc #17, 1
/*      */     //   1168: iload #17
/*      */     //   1170: iload #12
/*      */     //   1172: bipush #15
/*      */     //   1174: ishl
/*      */     //   1175: ior
/*      */     //   1176: i2s
/*      */     //   1177: goto -> 1195
/*      */     //   1180: iload #12
/*      */     //   1182: bipush #15
/*      */     //   1184: ishl
/*      */     //   1185: iload #15
/*      */     //   1187: bipush #10
/*      */     //   1189: ishl
/*      */     //   1190: ior
/*      */     //   1191: iload #16
/*      */     //   1193: ior
/*      */     //   1194: i2s
/*      */     //   1195: istore #8
/*      */     //   1197: fload_3
/*      */     //   1198: fstore #10
/*      */     //   1200: fconst_0
/*      */     //   1201: fstore #11
/*      */     //   1203: fconst_1
/*      */     //   1204: fstore #12
/*      */     //   1206: iconst_0
/*      */     //   1207: istore #13
/*      */     //   1209: fload #10
/*      */     //   1211: fstore #14
/*      */     //   1213: iconst_0
/*      */     //   1214: istore #15
/*      */     //   1216: fload #14
/*      */     //   1218: fload #11
/*      */     //   1220: fcmpg
/*      */     //   1221: ifge -> 1229
/*      */     //   1224: fload #11
/*      */     //   1226: goto -> 1231
/*      */     //   1229: fload #14
/*      */     //   1231: fstore #14
/*      */     //   1233: nop
/*      */     //   1234: iconst_0
/*      */     //   1235: istore #15
/*      */     //   1237: fload #14
/*      */     //   1239: fload #12
/*      */     //   1241: fcmpl
/*      */     //   1242: ifle -> 1250
/*      */     //   1245: fload #12
/*      */     //   1247: goto -> 1252
/*      */     //   1250: fload #14
/*      */     //   1252: nop
/*      */     //   1253: ldc 1023.0
/*      */     //   1255: fmul
/*      */     //   1256: ldc 0.5
/*      */     //   1258: fadd
/*      */     //   1259: f2i
/*      */     //   1260: istore #9
/*      */     //   1262: nop
/*      */     //   1263: iload #6
/*      */     //   1265: i2l
/*      */     //   1266: ldc2_w 65535
/*      */     //   1269: land
/*      */     //   1270: bipush #48
/*      */     //   1272: lshl
/*      */     //   1273: iload #7
/*      */     //   1275: i2l
/*      */     //   1276: ldc2_w 65535
/*      */     //   1279: land
/*      */     //   1280: bipush #32
/*      */     //   1282: lshl
/*      */     //   1283: lor
/*      */     //   1284: iload #8
/*      */     //   1286: i2l
/*      */     //   1287: ldc2_w 65535
/*      */     //   1290: land
/*      */     //   1291: bipush #16
/*      */     //   1293: lshl
/*      */     //   1294: lor
/*      */     //   1295: iload #9
/*      */     //   1297: i2l
/*      */     //   1298: ldc2_w 1023
/*      */     //   1301: land
/*      */     //   1302: bipush #6
/*      */     //   1304: lshl
/*      */     //   1305: lor
/*      */     //   1306: iload #5
/*      */     //   1308: i2l
/*      */     //   1309: ldc2_w 63
/*      */     //   1312: land
/*      */     //   1313: lor
/*      */     //   1314: invokestatic constructor-impl : (J)J
/*      */     //   1317: invokestatic constructor-impl : (J)J
/*      */     //   1320: lreturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #430	-> 7
/*      */     //   #432	-> 15
/*      */     //   #724	-> 27
/*      */     //   #731	-> 34
/*      */     //   #724	-> 51
/*      */     //   #739	-> 55
/*      */     //   #724	-> 70
/*      */     //   #432	-> 71
/*      */     //   #433	-> 81
/*      */     //   #740	-> 93
/*      */     //   #747	-> 100
/*      */     //   #740	-> 117
/*      */     //   #755	-> 121
/*      */     //   #740	-> 136
/*      */     //   #433	-> 137
/*      */     //   #432	-> 147
/*      */     //   #434	-> 148
/*      */     //   #756	-> 160
/*      */     //   #763	-> 167
/*      */     //   #756	-> 184
/*      */     //   #771	-> 188
/*      */     //   #756	-> 203
/*      */     //   #434	-> 204
/*      */     //   #432	-> 214
/*      */     //   #435	-> 215
/*      */     //   #772	-> 227
/*      */     //   #779	-> 234
/*      */     //   #772	-> 251
/*      */     //   #787	-> 255
/*      */     //   #772	-> 270
/*      */     //   #435	-> 271
/*      */     //   #432	-> 278
/*      */     //   #431	-> 279
/*      */     //   #437	-> 281
/*      */     //   #437	-> 287
/*      */     //   #437	-> 293
/*      */     //   #440	-> 297
/*      */     //   #788	-> 316
/*      */     //   #791	-> 317
/*      */     //   #792	-> 322
/*      */     //   #441	-> 325
/*      */     //   #792	-> 327
/*      */     //   #794	-> 330
/*      */     //   #444	-> 331
/*      */     //   #445	-> 338
/*      */     //   #795	-> 354
/*      */     //   #798	-> 355
/*      */     //   #799	-> 360
/*      */     //   #446	-> 363
/*      */     //   #799	-> 365
/*      */     //   #801	-> 368
/*      */     //   #449	-> 369
/*      */     //   #802	-> 391
/*      */     //   #809	-> 398
/*      */     //   #802	-> 415
/*      */     //   #817	-> 419
/*      */     //   #802	-> 434
/*      */     //   #449	-> 437
/*      */     //   #818	-> 441
/*      */     //   #818	-> 446
/*      */     //   #819	-> 448
/*      */     //   #820	-> 455
/*      */     //   #821	-> 466
/*      */     //   #823	-> 473
/*      */     //   #824	-> 476
/*      */     //   #826	-> 479
/*      */     //   #827	-> 487
/*      */     //   #828	-> 491
/*      */     //   #830	-> 508
/*      */     //   #831	-> 518
/*      */     //   #832	-> 525
/*      */     //   #833	-> 532
/*      */     //   #834	-> 537
/*      */     //   #839	-> 544
/*      */     //   #840	-> 556
/*      */     //   #841	-> 573
/*      */     //   #844	-> 583
/*      */     //   #845	-> 587
/*      */     //   #846	-> 594
/*      */     //   #848	-> 603
/*      */     //   #849	-> 613
/*      */     //   #850	-> 616
/*      */     //   #855	-> 628
/*      */     //   #449	-> 643
/*      */     //   #450	-> 645
/*      */     //   #856	-> 667
/*      */     //   #863	-> 674
/*      */     //   #856	-> 691
/*      */     //   #871	-> 695
/*      */     //   #856	-> 710
/*      */     //   #450	-> 713
/*      */     //   #872	-> 717
/*      */     //   #872	-> 722
/*      */     //   #873	-> 724
/*      */     //   #874	-> 731
/*      */     //   #875	-> 742
/*      */     //   #877	-> 749
/*      */     //   #878	-> 752
/*      */     //   #880	-> 755
/*      */     //   #881	-> 763
/*      */     //   #882	-> 767
/*      */     //   #884	-> 784
/*      */     //   #885	-> 794
/*      */     //   #886	-> 801
/*      */     //   #887	-> 808
/*      */     //   #888	-> 813
/*      */     //   #893	-> 820
/*      */     //   #894	-> 832
/*      */     //   #895	-> 849
/*      */     //   #898	-> 859
/*      */     //   #899	-> 863
/*      */     //   #900	-> 870
/*      */     //   #902	-> 879
/*      */     //   #903	-> 889
/*      */     //   #904	-> 892
/*      */     //   #909	-> 904
/*      */     //   #450	-> 919
/*      */     //   #451	-> 921
/*      */     //   #910	-> 943
/*      */     //   #917	-> 950
/*      */     //   #910	-> 967
/*      */     //   #925	-> 971
/*      */     //   #910	-> 986
/*      */     //   #451	-> 989
/*      */     //   #926	-> 993
/*      */     //   #926	-> 998
/*      */     //   #927	-> 1000
/*      */     //   #928	-> 1007
/*      */     //   #929	-> 1018
/*      */     //   #931	-> 1025
/*      */     //   #932	-> 1028
/*      */     //   #934	-> 1031
/*      */     //   #935	-> 1039
/*      */     //   #936	-> 1043
/*      */     //   #938	-> 1060
/*      */     //   #939	-> 1070
/*      */     //   #940	-> 1077
/*      */     //   #941	-> 1084
/*      */     //   #942	-> 1089
/*      */     //   #947	-> 1096
/*      */     //   #948	-> 1108
/*      */     //   #949	-> 1125
/*      */     //   #952	-> 1135
/*      */     //   #953	-> 1139
/*      */     //   #954	-> 1146
/*      */     //   #956	-> 1155
/*      */     //   #957	-> 1165
/*      */     //   #958	-> 1168
/*      */     //   #963	-> 1180
/*      */     //   #451	-> 1195
/*      */     //   #452	-> 1197
/*      */     //   #964	-> 1209
/*      */     //   #971	-> 1216
/*      */     //   #964	-> 1233
/*      */     //   #979	-> 1237
/*      */     //   #964	-> 1252
/*      */     //   #452	-> 1253
/*      */     //   #461	-> 1262
/*      */     //   #456	-> 1263
/*      */     //   #457	-> 1273
/*      */     //   #456	-> 1283
/*      */     //   #458	-> 1284
/*      */     //   #456	-> 1294
/*      */     //   #459	-> 1295
/*      */     //   #456	-> 1305
/*      */     //   #460	-> 1306
/*      */     //   #456	-> 1313
/*      */     //   #454	-> 1317
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   34	15	11	$i$f$fastCoerceAtLeast	I
/*      */     //   31	18	10	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   55	15	11	$i$f$fastCoerceAtMost	I
/*      */     //   52	18	10	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   27	44	9	$i$f$fastCoerceIn	I
/*      */     //   24	47	6	$this$fastCoerceIn$iv	F
/*      */     //   24	47	7	minimumValue$iv	F
/*      */     //   24	47	8	maximumValue$iv	F
/*      */     //   100	15	11	$i$f$fastCoerceAtLeast	I
/*      */     //   97	18	10	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   121	15	11	$i$f$fastCoerceAtMost	I
/*      */     //   118	18	10	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   93	44	9	$i$f$fastCoerceIn	I
/*      */     //   90	47	6	$this$fastCoerceIn$iv	F
/*      */     //   90	47	7	minimumValue$iv	F
/*      */     //   90	47	8	maximumValue$iv	F
/*      */     //   167	15	11	$i$f$fastCoerceAtLeast	I
/*      */     //   164	18	10	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   188	15	11	$i$f$fastCoerceAtMost	I
/*      */     //   185	18	10	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   160	44	9	$i$f$fastCoerceIn	I
/*      */     //   157	47	6	$this$fastCoerceIn$iv	F
/*      */     //   157	47	7	minimumValue$iv	F
/*      */     //   157	47	8	maximumValue$iv	F
/*      */     //   234	15	11	$i$f$fastCoerceAtLeast	I
/*      */     //   231	18	10	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   255	15	11	$i$f$fastCoerceAtMost	I
/*      */     //   252	18	10	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   227	44	9	$i$f$fastCoerceIn	I
/*      */     //   224	47	6	$this$fastCoerceIn$iv	F
/*      */     //   224	47	7	minimumValue$iv	F
/*      */     //   224	47	8	maximumValue$iv	F
/*      */     //   281	16	5	argb	I
/*      */     //   325	2	7	$i$a$-requirePrecondition-ColorKt$Color$1	I
/*      */     //   316	15	6	$i$f$requirePrecondition	I
/*      */     //   313	18	5	value$iv	Z
/*      */     //   363	2	8	$i$a$-requirePrecondition-ColorKt$Color$2	I
/*      */     //   354	15	7	$i$f$requirePrecondition	I
/*      */     //   351	18	6	value$iv	Z
/*      */     //   398	15	12	$i$f$fastCoerceAtLeast	I
/*      */     //   395	18	11	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   419	15	12	$i$f$fastCoerceAtMost	I
/*      */     //   416	18	11	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   391	44	10	$i$f$fastCoerceIn	I
/*      */     //   388	47	7	$this$fastCoerceIn$iv	F
/*      */     //   388	47	8	minimumValue$iv	F
/*      */     //   388	47	9	maximumValue$iv	F
/*      */     //   613	15	15	out$iv	I
/*      */     //   441	202	8	$i$f$floatToHalf	I
/*      */     //   448	195	9	bits$iv	I
/*      */     //   455	188	10	s$iv	I
/*      */     //   466	177	11	e$iv	I
/*      */     //   473	170	12	m$iv	I
/*      */     //   476	167	13	outE$iv	I
/*      */     //   479	164	14	outM$iv	I
/*      */     //   438	205	7	f$iv	F
/*      */     //   674	15	13	$i$f$fastCoerceAtLeast	I
/*      */     //   671	18	12	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   695	15	13	$i$f$fastCoerceAtMost	I
/*      */     //   692	18	12	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   667	44	11	$i$f$fastCoerceIn	I
/*      */     //   664	47	8	$this$fastCoerceIn$iv	F
/*      */     //   664	47	9	minimumValue$iv	F
/*      */     //   664	47	10	maximumValue$iv	F
/*      */     //   889	15	16	out$iv	I
/*      */     //   717	202	9	$i$f$floatToHalf	I
/*      */     //   724	195	10	bits$iv	I
/*      */     //   731	188	11	s$iv	I
/*      */     //   742	177	12	e$iv	I
/*      */     //   749	170	13	m$iv	I
/*      */     //   752	167	14	outE$iv	I
/*      */     //   755	164	15	outM$iv	I
/*      */     //   714	205	8	f$iv	F
/*      */     //   950	15	14	$i$f$fastCoerceAtLeast	I
/*      */     //   947	18	13	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   971	15	14	$i$f$fastCoerceAtMost	I
/*      */     //   968	18	13	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   943	44	12	$i$f$fastCoerceIn	I
/*      */     //   940	47	9	$this$fastCoerceIn$iv	F
/*      */     //   940	47	10	minimumValue$iv	F
/*      */     //   940	47	11	maximumValue$iv	F
/*      */     //   1165	15	17	out$iv	I
/*      */     //   993	202	10	$i$f$floatToHalf	I
/*      */     //   1000	195	11	bits$iv	I
/*      */     //   1007	188	12	s$iv	I
/*      */     //   1018	177	13	e$iv	I
/*      */     //   1025	170	14	m$iv	I
/*      */     //   1028	167	15	outE$iv	I
/*      */     //   1031	164	16	outM$iv	I
/*      */     //   990	205	9	f$iv	F
/*      */     //   1216	15	15	$i$f$fastCoerceAtLeast	I
/*      */     //   1213	18	14	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   1237	15	15	$i$f$fastCoerceAtMost	I
/*      */     //   1234	18	14	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   1209	44	13	$i$f$fastCoerceIn	I
/*      */     //   1206	47	10	$this$fastCoerceIn$iv	F
/*      */     //   1206	47	11	minimumValue$iv	F
/*      */     //   1206	47	12	maximumValue$iv	F
/*      */     //   338	983	5	id	I
/*      */     //   645	676	6	r	S
/*      */     //   921	400	7	g	S
/*      */     //   1197	124	8	b	S
/*      */     //   1262	59	9	a	I
/*      */     //   0	1321	0	red	F
/*      */     //   0	1321	1	green	F
/*      */     //   0	1321	2	blue	F
/*      */     //   0	1321	3	alpha	F
/*      */     //   0	1321	4	colorSpace	Landroidx/compose/ui/graphics/colorspace/ColorSpace;
/*      */   }
/*      */   
/*      */   @Stable
/*      */   public static final long UncheckedColor(float red, float green, float blue, float alpha, @NotNull ColorSpace colorSpace) {
/*      */     // Byte code:
/*      */     //   0: aload #4
/*      */     //   2: ldc 'colorSpace'
/*      */     //   4: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   7: aload #4
/*      */     //   9: invokevirtual isSrgb : ()Z
/*      */     //   12: ifeq -> 77
/*      */     //   15: fload_3
/*      */     //   16: ldc 255.0
/*      */     //   18: fmul
/*      */     //   19: ldc 0.5
/*      */     //   21: fadd
/*      */     //   22: f2i
/*      */     //   23: bipush #24
/*      */     //   25: ishl
/*      */     //   26: fload_0
/*      */     //   27: ldc 255.0
/*      */     //   29: fmul
/*      */     //   30: ldc 0.5
/*      */     //   32: fadd
/*      */     //   33: f2i
/*      */     //   34: bipush #16
/*      */     //   36: ishl
/*      */     //   37: ior
/*      */     //   38: fload_1
/*      */     //   39: ldc 255.0
/*      */     //   41: fmul
/*      */     //   42: ldc 0.5
/*      */     //   44: fadd
/*      */     //   45: f2i
/*      */     //   46: bipush #8
/*      */     //   48: ishl
/*      */     //   49: ior
/*      */     //   50: fload_2
/*      */     //   51: ldc 255.0
/*      */     //   53: fmul
/*      */     //   54: ldc 0.5
/*      */     //   56: fadd
/*      */     //   57: f2i
/*      */     //   58: ior
/*      */     //   59: istore #5
/*      */     //   61: iload #5
/*      */     //   63: i2l
/*      */     //   64: invokestatic constructor-impl : (J)J
/*      */     //   67: bipush #32
/*      */     //   69: lshl
/*      */     //   70: invokestatic constructor-impl : (J)J
/*      */     //   73: invokestatic constructor-impl : (J)J
/*      */     //   76: lreturn
/*      */     //   77: iconst_0
/*      */     //   78: istore #6
/*      */     //   80: fload_0
/*      */     //   81: invokestatic floatToRawIntBits : (F)I
/*      */     //   84: istore #7
/*      */     //   86: iload #7
/*      */     //   88: bipush #31
/*      */     //   90: iushr
/*      */     //   91: istore #8
/*      */     //   93: iload #7
/*      */     //   95: bipush #23
/*      */     //   97: iushr
/*      */     //   98: sipush #255
/*      */     //   101: iand
/*      */     //   102: istore #9
/*      */     //   104: iload #7
/*      */     //   106: ldc 8388607
/*      */     //   108: iand
/*      */     //   109: istore #10
/*      */     //   111: iconst_0
/*      */     //   112: istore #11
/*      */     //   114: iconst_0
/*      */     //   115: istore #12
/*      */     //   117: iload #9
/*      */     //   119: sipush #255
/*      */     //   122: if_icmpne -> 146
/*      */     //   125: bipush #31
/*      */     //   127: istore #11
/*      */     //   129: iload #10
/*      */     //   131: ifeq -> 140
/*      */     //   134: sipush #512
/*      */     //   137: goto -> 141
/*      */     //   140: iconst_0
/*      */     //   141: istore #12
/*      */     //   143: goto -> 266
/*      */     //   146: iload #9
/*      */     //   148: bipush #127
/*      */     //   150: isub
/*      */     //   151: bipush #15
/*      */     //   153: iadd
/*      */     //   154: istore #9
/*      */     //   156: iload #9
/*      */     //   158: bipush #31
/*      */     //   160: if_icmplt -> 170
/*      */     //   163: bipush #49
/*      */     //   165: istore #11
/*      */     //   167: goto -> 266
/*      */     //   170: iload #9
/*      */     //   172: ifgt -> 221
/*      */     //   175: iload #9
/*      */     //   177: bipush #-10
/*      */     //   179: if_icmplt -> 266
/*      */     //   182: iload #10
/*      */     //   184: ldc 8388608
/*      */     //   186: ior
/*      */     //   187: iconst_1
/*      */     //   188: iload #9
/*      */     //   190: isub
/*      */     //   191: ishr
/*      */     //   192: istore #10
/*      */     //   194: iload #10
/*      */     //   196: sipush #4096
/*      */     //   199: iand
/*      */     //   200: ifeq -> 211
/*      */     //   203: iload #10
/*      */     //   205: sipush #8192
/*      */     //   208: iadd
/*      */     //   209: istore #10
/*      */     //   211: iload #10
/*      */     //   213: bipush #13
/*      */     //   215: ishr
/*      */     //   216: istore #12
/*      */     //   218: goto -> 266
/*      */     //   221: iload #9
/*      */     //   223: istore #11
/*      */     //   225: iload #10
/*      */     //   227: bipush #13
/*      */     //   229: ishr
/*      */     //   230: istore #12
/*      */     //   232: iload #10
/*      */     //   234: sipush #4096
/*      */     //   237: iand
/*      */     //   238: ifeq -> 266
/*      */     //   241: iload #11
/*      */     //   243: bipush #10
/*      */     //   245: ishl
/*      */     //   246: iload #12
/*      */     //   248: ior
/*      */     //   249: istore #13
/*      */     //   251: iinc #13, 1
/*      */     //   254: iload #13
/*      */     //   256: iload #8
/*      */     //   258: bipush #15
/*      */     //   260: ishl
/*      */     //   261: ior
/*      */     //   262: i2s
/*      */     //   263: goto -> 281
/*      */     //   266: iload #8
/*      */     //   268: bipush #15
/*      */     //   270: ishl
/*      */     //   271: iload #11
/*      */     //   273: bipush #10
/*      */     //   275: ishl
/*      */     //   276: ior
/*      */     //   277: iload #12
/*      */     //   279: ior
/*      */     //   280: i2s
/*      */     //   281: istore #5
/*      */     //   283: iconst_0
/*      */     //   284: istore #7
/*      */     //   286: fload_1
/*      */     //   287: invokestatic floatToRawIntBits : (F)I
/*      */     //   290: istore #8
/*      */     //   292: iload #8
/*      */     //   294: bipush #31
/*      */     //   296: iushr
/*      */     //   297: istore #9
/*      */     //   299: iload #8
/*      */     //   301: bipush #23
/*      */     //   303: iushr
/*      */     //   304: sipush #255
/*      */     //   307: iand
/*      */     //   308: istore #10
/*      */     //   310: iload #8
/*      */     //   312: ldc 8388607
/*      */     //   314: iand
/*      */     //   315: istore #11
/*      */     //   317: iconst_0
/*      */     //   318: istore #12
/*      */     //   320: iconst_0
/*      */     //   321: istore #13
/*      */     //   323: iload #10
/*      */     //   325: sipush #255
/*      */     //   328: if_icmpne -> 352
/*      */     //   331: bipush #31
/*      */     //   333: istore #12
/*      */     //   335: iload #11
/*      */     //   337: ifeq -> 346
/*      */     //   340: sipush #512
/*      */     //   343: goto -> 347
/*      */     //   346: iconst_0
/*      */     //   347: istore #13
/*      */     //   349: goto -> 472
/*      */     //   352: iload #10
/*      */     //   354: bipush #127
/*      */     //   356: isub
/*      */     //   357: bipush #15
/*      */     //   359: iadd
/*      */     //   360: istore #10
/*      */     //   362: iload #10
/*      */     //   364: bipush #31
/*      */     //   366: if_icmplt -> 376
/*      */     //   369: bipush #49
/*      */     //   371: istore #12
/*      */     //   373: goto -> 472
/*      */     //   376: iload #10
/*      */     //   378: ifgt -> 427
/*      */     //   381: iload #10
/*      */     //   383: bipush #-10
/*      */     //   385: if_icmplt -> 472
/*      */     //   388: iload #11
/*      */     //   390: ldc 8388608
/*      */     //   392: ior
/*      */     //   393: iconst_1
/*      */     //   394: iload #10
/*      */     //   396: isub
/*      */     //   397: ishr
/*      */     //   398: istore #11
/*      */     //   400: iload #11
/*      */     //   402: sipush #4096
/*      */     //   405: iand
/*      */     //   406: ifeq -> 417
/*      */     //   409: iload #11
/*      */     //   411: sipush #8192
/*      */     //   414: iadd
/*      */     //   415: istore #11
/*      */     //   417: iload #11
/*      */     //   419: bipush #13
/*      */     //   421: ishr
/*      */     //   422: istore #13
/*      */     //   424: goto -> 472
/*      */     //   427: iload #10
/*      */     //   429: istore #12
/*      */     //   431: iload #11
/*      */     //   433: bipush #13
/*      */     //   435: ishr
/*      */     //   436: istore #13
/*      */     //   438: iload #11
/*      */     //   440: sipush #4096
/*      */     //   443: iand
/*      */     //   444: ifeq -> 472
/*      */     //   447: iload #12
/*      */     //   449: bipush #10
/*      */     //   451: ishl
/*      */     //   452: iload #13
/*      */     //   454: ior
/*      */     //   455: istore #14
/*      */     //   457: iinc #14, 1
/*      */     //   460: iload #14
/*      */     //   462: iload #9
/*      */     //   464: bipush #15
/*      */     //   466: ishl
/*      */     //   467: ior
/*      */     //   468: i2s
/*      */     //   469: goto -> 487
/*      */     //   472: iload #9
/*      */     //   474: bipush #15
/*      */     //   476: ishl
/*      */     //   477: iload #12
/*      */     //   479: bipush #10
/*      */     //   481: ishl
/*      */     //   482: ior
/*      */     //   483: iload #13
/*      */     //   485: ior
/*      */     //   486: i2s
/*      */     //   487: istore #6
/*      */     //   489: iconst_0
/*      */     //   490: istore #8
/*      */     //   492: fload_2
/*      */     //   493: invokestatic floatToRawIntBits : (F)I
/*      */     //   496: istore #9
/*      */     //   498: iload #9
/*      */     //   500: bipush #31
/*      */     //   502: iushr
/*      */     //   503: istore #10
/*      */     //   505: iload #9
/*      */     //   507: bipush #23
/*      */     //   509: iushr
/*      */     //   510: sipush #255
/*      */     //   513: iand
/*      */     //   514: istore #11
/*      */     //   516: iload #9
/*      */     //   518: ldc 8388607
/*      */     //   520: iand
/*      */     //   521: istore #12
/*      */     //   523: iconst_0
/*      */     //   524: istore #13
/*      */     //   526: iconst_0
/*      */     //   527: istore #14
/*      */     //   529: iload #11
/*      */     //   531: sipush #255
/*      */     //   534: if_icmpne -> 558
/*      */     //   537: bipush #31
/*      */     //   539: istore #13
/*      */     //   541: iload #12
/*      */     //   543: ifeq -> 552
/*      */     //   546: sipush #512
/*      */     //   549: goto -> 553
/*      */     //   552: iconst_0
/*      */     //   553: istore #14
/*      */     //   555: goto -> 678
/*      */     //   558: iload #11
/*      */     //   560: bipush #127
/*      */     //   562: isub
/*      */     //   563: bipush #15
/*      */     //   565: iadd
/*      */     //   566: istore #11
/*      */     //   568: iload #11
/*      */     //   570: bipush #31
/*      */     //   572: if_icmplt -> 582
/*      */     //   575: bipush #49
/*      */     //   577: istore #13
/*      */     //   579: goto -> 678
/*      */     //   582: iload #11
/*      */     //   584: ifgt -> 633
/*      */     //   587: iload #11
/*      */     //   589: bipush #-10
/*      */     //   591: if_icmplt -> 678
/*      */     //   594: iload #12
/*      */     //   596: ldc 8388608
/*      */     //   598: ior
/*      */     //   599: iconst_1
/*      */     //   600: iload #11
/*      */     //   602: isub
/*      */     //   603: ishr
/*      */     //   604: istore #12
/*      */     //   606: iload #12
/*      */     //   608: sipush #4096
/*      */     //   611: iand
/*      */     //   612: ifeq -> 623
/*      */     //   615: iload #12
/*      */     //   617: sipush #8192
/*      */     //   620: iadd
/*      */     //   621: istore #12
/*      */     //   623: iload #12
/*      */     //   625: bipush #13
/*      */     //   627: ishr
/*      */     //   628: istore #14
/*      */     //   630: goto -> 678
/*      */     //   633: iload #11
/*      */     //   635: istore #13
/*      */     //   637: iload #12
/*      */     //   639: bipush #13
/*      */     //   641: ishr
/*      */     //   642: istore #14
/*      */     //   644: iload #12
/*      */     //   646: sipush #4096
/*      */     //   649: iand
/*      */     //   650: ifeq -> 678
/*      */     //   653: iload #13
/*      */     //   655: bipush #10
/*      */     //   657: ishl
/*      */     //   658: iload #14
/*      */     //   660: ior
/*      */     //   661: istore #15
/*      */     //   663: iinc #15, 1
/*      */     //   666: iload #15
/*      */     //   668: iload #10
/*      */     //   670: bipush #15
/*      */     //   672: ishl
/*      */     //   673: ior
/*      */     //   674: i2s
/*      */     //   675: goto -> 693
/*      */     //   678: iload #10
/*      */     //   680: bipush #15
/*      */     //   682: ishl
/*      */     //   683: iload #13
/*      */     //   685: bipush #10
/*      */     //   687: ishl
/*      */     //   688: ior
/*      */     //   689: iload #14
/*      */     //   691: ior
/*      */     //   692: i2s
/*      */     //   693: istore #7
/*      */     //   695: nop
/*      */     //   696: fconst_0
/*      */     //   697: fload_3
/*      */     //   698: fconst_1
/*      */     //   699: invokestatic min : (FF)F
/*      */     //   702: invokestatic max : (FF)F
/*      */     //   705: ldc 1023.0
/*      */     //   707: fmul
/*      */     //   708: ldc 0.5
/*      */     //   710: fadd
/*      */     //   711: f2i
/*      */     //   712: istore #8
/*      */     //   714: aload #4
/*      */     //   716: invokevirtual getId$ui_graphics : ()I
/*      */     //   719: istore #9
/*      */     //   721: nop
/*      */     //   722: iload #5
/*      */     //   724: i2l
/*      */     //   725: ldc2_w 65535
/*      */     //   728: land
/*      */     //   729: bipush #48
/*      */     //   731: lshl
/*      */     //   732: iload #6
/*      */     //   734: i2l
/*      */     //   735: ldc2_w 65535
/*      */     //   738: land
/*      */     //   739: bipush #32
/*      */     //   741: lshl
/*      */     //   742: lor
/*      */     //   743: iload #7
/*      */     //   745: i2l
/*      */     //   746: ldc2_w 65535
/*      */     //   749: land
/*      */     //   750: bipush #16
/*      */     //   752: lshl
/*      */     //   753: lor
/*      */     //   754: iload #8
/*      */     //   756: i2l
/*      */     //   757: ldc2_w 1023
/*      */     //   760: land
/*      */     //   761: bipush #6
/*      */     //   763: lshl
/*      */     //   764: lor
/*      */     //   765: iload #9
/*      */     //   767: i2l
/*      */     //   768: ldc2_w 63
/*      */     //   771: land
/*      */     //   772: lor
/*      */     //   773: invokestatic constructor-impl : (J)J
/*      */     //   776: invokestatic constructor-impl : (J)J
/*      */     //   779: lreturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #479	-> 7
/*      */     //   #481	-> 15
/*      */     //   #482	-> 26
/*      */     //   #481	-> 37
/*      */     //   #483	-> 38
/*      */     //   #481	-> 49
/*      */     //   #484	-> 50
/*      */     //   #481	-> 58
/*      */     //   #480	-> 59
/*      */     //   #486	-> 61
/*      */     //   #486	-> 67
/*      */     //   #486	-> 73
/*      */     //   #489	-> 77
/*      */     //   #980	-> 80
/*      */     //   #980	-> 84
/*      */     //   #981	-> 86
/*      */     //   #982	-> 93
/*      */     //   #983	-> 104
/*      */     //   #985	-> 111
/*      */     //   #986	-> 114
/*      */     //   #988	-> 117
/*      */     //   #989	-> 125
/*      */     //   #990	-> 129
/*      */     //   #992	-> 146
/*      */     //   #993	-> 156
/*      */     //   #994	-> 163
/*      */     //   #995	-> 170
/*      */     //   #996	-> 175
/*      */     //   #1001	-> 182
/*      */     //   #1002	-> 194
/*      */     //   #1003	-> 211
/*      */     //   #1006	-> 221
/*      */     //   #1007	-> 225
/*      */     //   #1008	-> 232
/*      */     //   #1010	-> 241
/*      */     //   #1011	-> 251
/*      */     //   #1012	-> 254
/*      */     //   #1017	-> 266
/*      */     //   #489	-> 281
/*      */     //   #490	-> 283
/*      */     //   #1018	-> 286
/*      */     //   #1018	-> 290
/*      */     //   #1019	-> 292
/*      */     //   #1020	-> 299
/*      */     //   #1021	-> 310
/*      */     //   #1023	-> 317
/*      */     //   #1024	-> 320
/*      */     //   #1026	-> 323
/*      */     //   #1027	-> 331
/*      */     //   #1028	-> 335
/*      */     //   #1030	-> 352
/*      */     //   #1031	-> 362
/*      */     //   #1032	-> 369
/*      */     //   #1033	-> 376
/*      */     //   #1034	-> 381
/*      */     //   #1039	-> 388
/*      */     //   #1040	-> 400
/*      */     //   #1041	-> 417
/*      */     //   #1044	-> 427
/*      */     //   #1045	-> 431
/*      */     //   #1046	-> 438
/*      */     //   #1048	-> 447
/*      */     //   #1049	-> 457
/*      */     //   #1050	-> 460
/*      */     //   #1055	-> 472
/*      */     //   #490	-> 487
/*      */     //   #491	-> 489
/*      */     //   #1056	-> 492
/*      */     //   #1056	-> 496
/*      */     //   #1057	-> 498
/*      */     //   #1058	-> 505
/*      */     //   #1059	-> 516
/*      */     //   #1061	-> 523
/*      */     //   #1062	-> 526
/*      */     //   #1064	-> 529
/*      */     //   #1065	-> 537
/*      */     //   #1066	-> 541
/*      */     //   #1068	-> 558
/*      */     //   #1069	-> 568
/*      */     //   #1070	-> 575
/*      */     //   #1071	-> 582
/*      */     //   #1072	-> 587
/*      */     //   #1077	-> 594
/*      */     //   #1078	-> 606
/*      */     //   #1079	-> 623
/*      */     //   #1082	-> 633
/*      */     //   #1083	-> 637
/*      */     //   #1084	-> 644
/*      */     //   #1086	-> 653
/*      */     //   #1087	-> 663
/*      */     //   #1088	-> 666
/*      */     //   #1093	-> 678
/*      */     //   #491	-> 693
/*      */     //   #493	-> 695
/*      */     //   #493	-> 696
/*      */     //   #493	-> 705
/*      */     //   #495	-> 714
/*      */     //   #504	-> 721
/*      */     //   #499	-> 722
/*      */     //   #500	-> 732
/*      */     //   #499	-> 742
/*      */     //   #501	-> 743
/*      */     //   #499	-> 753
/*      */     //   #502	-> 754
/*      */     //   #499	-> 764
/*      */     //   #503	-> 765
/*      */     //   #499	-> 772
/*      */     //   #497	-> 776
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   61	16	5	argb	I
/*      */     //   251	15	13	out$iv	I
/*      */     //   80	201	6	$i$f$floatToHalf	I
/*      */     //   86	195	7	bits$iv	I
/*      */     //   93	188	8	s$iv	I
/*      */     //   104	177	9	e$iv	I
/*      */     //   111	170	10	m$iv	I
/*      */     //   114	167	11	outE$iv	I
/*      */     //   117	164	12	outM$iv	I
/*      */     //   457	15	14	out$iv	I
/*      */     //   286	201	7	$i$f$floatToHalf	I
/*      */     //   292	195	8	bits$iv	I
/*      */     //   299	188	9	s$iv	I
/*      */     //   310	177	10	e$iv	I
/*      */     //   317	170	11	m$iv	I
/*      */     //   320	167	12	outE$iv	I
/*      */     //   323	164	13	outM$iv	I
/*      */     //   663	15	15	out$iv	I
/*      */     //   492	201	8	$i$f$floatToHalf	I
/*      */     //   498	195	9	bits$iv	I
/*      */     //   505	188	10	s$iv	I
/*      */     //   516	177	11	e$iv	I
/*      */     //   523	170	12	m$iv	I
/*      */     //   526	167	13	outE$iv	I
/*      */     //   529	164	14	outM$iv	I
/*      */     //   283	497	5	r	S
/*      */     //   489	291	6	g	S
/*      */     //   695	85	7	b	S
/*      */     //   714	66	8	a	I
/*      */     //   721	59	9	id	I
/*      */     //   0	780	0	red	F
/*      */     //   0	780	1	green	F
/*      */     //   0	780	2	blue	F
/*      */     //   0	780	3	alpha	F
/*      */     //   0	780	4	colorSpace	Landroidx/compose/ui/graphics/colorspace/ColorSpace;
/*      */   }
/*      */   
/*      */   @Stable
/*      */   public static final long Color(@ColorInt int color) {
/*  518 */     return Color.constructor-impl(ULong.constructor-impl(ULong.constructor-impl(color) << 32L));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   @Stable
/*      */   public static final long Color(long color) {
/*  535 */     return Color.constructor-impl(ULong.constructor-impl(color << 32L));
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   @Stable
/*      */   public static final long Color(@IntRange(from = 0L, to = 255L) int red, @IntRange(from = 0L, to = 255L) int green, @IntRange(from = 0L, to = 255L) int blue, @IntRange(from = 0L, to = 255L) int alpha) {
/*  557 */     int color = (
/*  558 */       alpha & 0xFF) << 24 | (
/*  559 */       red & 0xFF) << 16 | (
/*  560 */       green & 0xFF) << 8 | 
/*  561 */       blue & 0xFF;
/*  562 */     return Color(color);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   @Stable
/*      */   public static final long lerp-jxsXWHM(long start, long stop, @FloatRange(from = 0.0D, to = 1.0D) float fraction)
/*      */   {
/*  573 */     ColorSpace colorSpace = ColorSpaces.INSTANCE.getOklab();
/*  574 */     long startColor = Color.convert-vNxB06k(start, colorSpace);
/*  575 */     long endColor = Color.convert-vNxB06k(stop, colorSpace);
/*      */     
/*  577 */     float startAlpha = Color.getAlpha-impl(startColor);
/*  578 */     float startL = Color.getRed-impl(startColor);
/*  579 */     float startA = Color.getGreen-impl(startColor);
/*  580 */     float startB = Color.getBlue-impl(startColor);
/*      */     
/*  582 */     float endAlpha = Color.getAlpha-impl(endColor);
/*  583 */     float endL = Color.getRed-impl(endColor);
/*  584 */     float endA = Color.getGreen-impl(endColor);
/*  585 */     float endB = Color.getBlue-impl(endColor);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  591 */     float f1 = fraction, f2 = 0.0F, maximumValue$iv = 1.0F; int $i$f$fastCoerceIn = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1094 */     float $this$fastCoerceAtLeast$iv$iv = f1; int $i$f$fastCoerceAtLeast = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1101 */     float $this$fastCoerceAtMost$iv$iv = ($this$fastCoerceAtLeast$iv$iv < f2) ? f2 : $this$fastCoerceAtLeast$iv$iv;
/*      */ 
/*      */ 
/*      */     
/*      */     int $i$f$fastCoerceAtMost = 0;
/*      */ 
/*      */ 
/*      */     
/* 1109 */     float t = ($this$fastCoerceAtMost$iv$iv > maximumValue$iv) ? maximumValue$iv : $this$fastCoerceAtMost$iv$iv; long interpolated = UncheckedColor(MathHelpersKt.lerp(startL, endL, t), MathHelpersKt.lerp(startA, endA, t), MathHelpersKt.lerp(startB, endB, t), MathHelpersKt.lerp(startAlpha, endAlpha, t), colorSpace); return Color.convert-vNxB06k(interpolated, Color.getColorSpace-impl(stop)); } @Stable public static final long compositeOver--OWjLjI(long $this$compositeOver_u2d_u2dOWjLjI, long background) { long fg = Color.convert-vNxB06k($this$compositeOver_u2d_u2dOWjLjI, Color.getColorSpace-impl(background)); float bgA = Color.getAlpha-impl(background); float fgA = Color.getAlpha-impl(fg); float a = fgA + bgA * (1.0F - fgA); float f1 = Color.getRed-impl(fg), bgC$iv = Color.getRed-impl(background); int $i$f$compositeComponent = 0;
/* 1110 */     float r = ((a == 0.0F)) ? 0.0F : ((f1 * fgA + bgC$iv * bgA * (1.0F - fgA)) / a); bgC$iv = Color.getGreen-impl(fg); float f2 = Color.getGreen-impl(background); int i = 0;
/* 1111 */     float g = ((a == 0.0F)) ? 0.0F : ((bgC$iv * fgA + f2 * bgA * (1.0F - fgA)) / a); f2 = Color.getBlue-impl(fg); float f3 = Color.getBlue-impl(background); int j = 0;
/* 1112 */     float b = ((a == 0.0F)) ? 0.0F : ((f2 * fgA + f3 * bgA * (1.0F - fgA)) / a);
/*      */     return UncheckedColor(r, g, b, a, Color.getColorSpace-impl(background)); }
/*      */    private static final float compositeComponent(float fgC, float bgC, float fgA, float bgA, float a) {
/*      */     int $i$f$compositeComponent = 0;
/*      */     return ((a == 0.0F)) ? 0.0F : ((fgC * fgA + bgC * bgA * (1.0F - fgA)) / a);
/*      */   }
/*      */   @Size(4L)
/*      */   private static final float[] getComponents-8_81llA(long $this$getComponents_u2d8_81llA) {
/*      */     float[] arrayOfFloat = new float[4];
/*      */     arrayOfFloat[0] = Color.getRed-impl($this$getComponents_u2d8_81llA);
/*      */     arrayOfFloat[1] = Color.getGreen-impl($this$getComponents_u2d8_81llA);
/*      */     arrayOfFloat[2] = Color.getBlue-impl($this$getComponents_u2d8_81llA);
/*      */     arrayOfFloat[3] = Color.getAlpha-impl($this$getComponents_u2d8_81llA);
/*      */     return arrayOfFloat;
/*      */   }
/*      */   @Stable
/*      */   public static final float luminance-8_81llA(long $this$luminance_u2d8_81llA) {
/*      */     // Byte code:
/*      */     //   0: lload_0
/*      */     //   1: invokestatic getColorSpace-impl : (J)Landroidx/compose/ui/graphics/colorspace/ColorSpace;
/*      */     //   4: astore_2
/*      */     //   5: aload_2
/*      */     //   6: invokevirtual getModel-xdoWZVw : ()J
/*      */     //   9: getstatic androidx/compose/ui/graphics/colorspace/ColorModel.Companion : Landroidx/compose/ui/graphics/colorspace/ColorModel$Companion;
/*      */     //   12: invokevirtual getRgb-xdoWZVw : ()J
/*      */     //   15: invokestatic equals-impl0 : (JJ)Z
/*      */     //   18: istore_3
/*      */     //   19: iconst_0
/*      */     //   20: istore #4
/*      */     //   22: nop
/*      */     //   23: iload_3
/*      */     //   24: ifne -> 59
/*      */     //   27: iconst_0
/*      */     //   28: istore #5
/*      */     //   30: new java/lang/StringBuilder
/*      */     //   33: dup
/*      */     //   34: invokespecial <init> : ()V
/*      */     //   37: ldc_w 'The specified color must be encoded in an RGB color space. The supplied color space is '
/*      */     //   40: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   43: aload_2
/*      */     //   44: invokevirtual getModel-xdoWZVw : ()J
/*      */     //   47: invokestatic toString-impl : (J)Ljava/lang/String;
/*      */     //   50: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
/*      */     //   53: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   56: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   59: nop
/*      */     //   60: aload_2
/*      */     //   61: ldc_w 'null cannot be cast to non-null type androidx.compose.ui.graphics.colorspace.Rgb'
/*      */     //   64: invokestatic checkNotNull : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   67: aload_2
/*      */     //   68: checkcast androidx/compose/ui/graphics/colorspace/Rgb
/*      */     //   71: invokevirtual getEotfFunc$ui_graphics : ()Landroidx/compose/ui/graphics/colorspace/DoubleFunction;
/*      */     //   74: astore_3
/*      */     //   75: aload_3
/*      */     //   76: lload_0
/*      */     //   77: invokestatic getRed-impl : (J)F
/*      */     //   80: f2d
/*      */     //   81: invokeinterface invoke : (D)D
/*      */     //   86: dstore #4
/*      */     //   88: aload_3
/*      */     //   89: lload_0
/*      */     //   90: invokestatic getGreen-impl : (J)F
/*      */     //   93: f2d
/*      */     //   94: invokeinterface invoke : (D)D
/*      */     //   99: dstore #6
/*      */     //   101: aload_3
/*      */     //   102: lload_0
/*      */     //   103: invokestatic getBlue-impl : (J)F
/*      */     //   106: f2d
/*      */     //   107: invokeinterface invoke : (D)D
/*      */     //   112: dstore #8
/*      */     //   114: ldc2_w 0.2126
/*      */     //   117: dload #4
/*      */     //   119: dmul
/*      */     //   120: ldc2_w 0.7152
/*      */     //   123: dload #6
/*      */     //   125: dmul
/*      */     //   126: dadd
/*      */     //   127: ldc2_w 0.0722
/*      */     //   130: dload #8
/*      */     //   132: dmul
/*      */     //   133: dadd
/*      */     //   134: d2f
/*      */     //   135: fstore #10
/*      */     //   137: fconst_0
/*      */     //   138: fstore #11
/*      */     //   140: fconst_1
/*      */     //   141: fstore #12
/*      */     //   143: iconst_0
/*      */     //   144: istore #13
/*      */     //   146: fload #10
/*      */     //   148: fstore #14
/*      */     //   150: iconst_0
/*      */     //   151: istore #15
/*      */     //   153: fload #14
/*      */     //   155: fload #11
/*      */     //   157: fcmpg
/*      */     //   158: ifge -> 166
/*      */     //   161: fload #11
/*      */     //   163: goto -> 168
/*      */     //   166: fload #14
/*      */     //   168: fstore #14
/*      */     //   170: nop
/*      */     //   171: iconst_0
/*      */     //   172: istore #15
/*      */     //   174: fload #14
/*      */     //   176: fload #12
/*      */     //   178: fcmpl
/*      */     //   179: ifle -> 187
/*      */     //   182: fload #12
/*      */     //   184: goto -> 189
/*      */     //   187: fload #14
/*      */     //   189: nop
/*      */     //   190: freturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #665	-> 0
/*      */     //   #666	-> 5
/*      */     //   #1113	-> 22
/*      */     //   #1116	-> 23
/*      */     //   #1117	-> 27
/*      */     //   #667	-> 30
/*      */     //   #668	-> 43
/*      */     //   #667	-> 47
/*      */     //   #1117	-> 56
/*      */     //   #1119	-> 59
/*      */     //   #671	-> 60
/*      */     //   #672	-> 75
/*      */     //   #673	-> 88
/*      */     //   #674	-> 101
/*      */     //   #676	-> 114
/*      */     //   #1120	-> 146
/*      */     //   #1127	-> 153
/*      */     //   #1120	-> 170
/*      */     //   #1135	-> 174
/*      */     //   #1120	-> 189
/*      */     //   #676	-> 190
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   30	26	5	$i$a$-requirePrecondition-ColorKt$luminance$1	I
/*      */     //   22	38	4	$i$f$requirePrecondition	I
/*      */     //   19	41	3	value$iv	Z
/*      */     //   153	15	15	$i$f$fastCoerceAtLeast	I
/*      */     //   150	18	14	$this$fastCoerceAtLeast$iv$iv	F
/*      */     //   174	15	15	$i$f$fastCoerceAtMost	I
/*      */     //   171	18	14	$this$fastCoerceAtMost$iv$iv	F
/*      */     //   146	44	13	$i$f$fastCoerceIn	I
/*      */     //   143	47	10	$this$fastCoerceIn$iv	F
/*      */     //   143	47	11	minimumValue$iv	F
/*      */     //   143	47	12	maximumValue$iv	F
/*      */     //   5	186	2	colorSpace	Landroidx/compose/ui/graphics/colorspace/ColorSpace;
/*      */     //   75	116	3	eotf	Landroidx/compose/ui/graphics/colorspace/DoubleFunction;
/*      */     //   88	103	4	r	D
/*      */     //   101	90	6	g	D
/*      */     //   114	77	8	b	D
/*      */     //   0	191	0	$this$luminance_u2d8_81llA	J
/*      */   }
/*      */   public static final long takeOrElse-DxMtmZc(long $this$takeOrElse_u2dDxMtmZc, @NotNull Function0 block) {
/*      */     Intrinsics.checkNotNullParameter(block, "block");
/*      */     int $i$f$takeOrElse-DxMtmZc = 0;
/*      */     long $this$isSpecified$iv = $this$takeOrElse_u2dDxMtmZc;
/*      */     int $i$f$isSpecified-8_81llA = 0;
/* 1136 */     return (($this$isSpecified$iv != 16L)) ? $this$takeOrElse_u2dDxMtmZc : ((Color)block.invoke()).unbox-impl();
/*      */   }
/*      */   
/*      */   @Stable
/*      */   @ColorInt
/*      */   public static final int toArgb-8_81llA(long $this$toArgb_u2d8_81llA) {
/*      */     return (int)ULong.constructor-impl(Color.convert-vNxB06k($this$toArgb_u2d8_81llA, (ColorSpace)ColorSpaces.INSTANCE.getSrgb()) >>> 32L);
/*      */   }
/*      */   
/*      */   public static final boolean isSpecified-8_81llA(long $this$isSpecified) {
/*      */     int $i$f$isSpecified-8_81llA = 0;
/*      */     return ($this$isSpecified != 16L);
/*      */   }
/*      */   
/*      */   public static final boolean isUnspecified-8_81llA(long $this$isUnspecified) {
/*      */     int $i$f$isUnspecified-8_81llA = 0;
/*      */     return ($this$isUnspecified == 16L);
/*      */   }
/*      */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\li\\ui-graphics-desktop-1.7.3.jar!\androidx\compos\\ui\graphics\ColorKt.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */