/*    */ package ai.grazie.client.common;
/*    */ import ai.grazie.client.common.model.HTTPResponse;
/*    */ import ai.grazie.client.common.model.RequestOptions;
/*    */ import ai.grazie.client.common.retry.ClientRetryStrategy;
/*    */ import ai.grazie.utils.mpp.MPPLogger;
/*    */ import kotlin.Metadata;
/*    */ import kotlin.ResultKt;
/*    */ import kotlin.Unit;
/*    */ import kotlin.coroutines.Continuation;
/*    */ import kotlin.coroutines.intrinsics.IntrinsicsKt;
/*    */ import kotlin.coroutines.jvm.internal.DebugMetadata;
/*    */ import kotlin.coroutines.jvm.internal.SuspendLambda;
/*    */ import kotlin.jvm.functions.Function1;
/*    */ import kotlin.jvm.functions.Function2;
/*    */ import kotlinx.coroutines.flow.Flow;
/*    */ import org.jetbrains.annotations.NotNull;
/*    */ import org.jetbrains.annotations.Nullable;
/*    */ 
/*    */ @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000p\n\002\030\002\n\002\030\002\n\002\b\002\n\002\020\b\n\000\n\002\030\002\n\000\n\002\030\002\n\000\n\002\030\002\n\002\020\003\n\002\020\013\n\002\b\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\002\n\002\030\002\n\002\030\002\n\002\b\007\n\002\030\002\n\000\n\002\020\022\n\002\b\004\n\002\030\002\n\002\030\002\n\002\020\000\n\002\030\002\n\002\b\003\030\000 +2\0020\001:\001+BC\022\006\020\002\032\0020\001\022\b\b\002\020\003\032\0020\004\022\b\b\002\020\005\032\0020\006\022\n\b\002\020\007\032\004\030\0010\b\022\024\b\002\020\t\032\016\022\004\022\0020\013\022\004\022\0020\f0\n¢\006\002\020\rJ\036\020\016\032\0020\0172\006\020\020\032\0020\0212\006\020\022\032\0020\023H@¢\006\002\020\024J4\020\025\032\b\022\004\022\0020\0270\0262\006\020\020\032\0020\0212\006\020\030\032\0020\0212\006\020\022\032\0020\0232\006\020\031\032\0020\fH@¢\006\002\020\032J@\020\033\032\b\022\004\022\0020\0210\0262\006\020\020\032\0020\0212\006\020\030\032\0020\0212\006\020\022\032\0020\0232\022\020\034\032\016\022\004\022\0020\021\022\004\022\0020\f0\nH@¢\006\002\020\035J&\020\036\032\0020\0172\006\020\020\032\0020\0212\006\020\030\032\0020\0372\006\020\022\032\0020\023H@¢\006\002\020 J\036\020\036\032\0020\0172\006\020\020\032\0020\0212\006\020\022\032\0020\023H@¢\006\002\020\024J&\020\036\032\0020\0172\006\020\020\032\0020\0212\006\020\030\032\0020!2\006\020\022\032\0020\023H@¢\006\002\020\"JA\020#\032\002H$\"\004\b\000\020$*\0020\0012'\020%\032#\b\001\022\004\022\0020\001\022\n\022\b\022\004\022\002H$0'\022\006\022\004\030\0010(0&¢\006\002\b)H@¢\006\002\020*R\016\020\002\032\0020\001X\004¢\006\002\n\000R\020\020\007\032\004\030\0010\bX\004¢\006\002\n\000R\032\020\t\032\016\022\004\022\0020\013\022\004\022\0020\f0\nX\004¢\006\002\n\000R\016\020\005\032\0020\006X\004¢\006\002\n\000R\016\020\003\032\0020\004X\004¢\006\002\n\000¨\006,"}, d2 = {"Lai/grazie/client/common/SuspendableClientWithBackoff;", "Lai/grazie/client/common/SuspendableHTTPClient;", "httpClient", "total", "", "strategy", "Lai/grazie/client/common/retry/ClientRetryStrategy;", "logger", "Lai/grazie/utils/mpp/MPPLogger;", "retryOn", "Lkotlin/Function1;", "", "", "(Lai/grazie/client/common/SuspendableHTTPClient;ILai/grazie/client/common/retry/ClientRetryStrategy;Lai/grazie/utils/mpp/MPPLogger;Lkotlin/jvm/functions/Function1;)V", "get", "Lai/grazie/client/common/model/HTTPResponse;", "url", "", "options", "Lai/grazie/client/common/model/RequestOptions;", "(Ljava/lang/String;Lai/grazie/client/common/model/RequestOptions;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "receiveContinuousSSE", "Lkotlinx/coroutines/flow/Flow;", "Lai/grazie/model/cloud/sse/ServerSentEvent;", "content", "reconnect", "(Ljava/lang/String;Ljava/lang/String;Lai/grazie/client/common/model/RequestOptions;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;", "receiveLineStream", "isLastLine", "(Ljava/lang/String;Ljava/lang/String;Lai/grazie/client/common/model/RequestOptions;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "send", "Lai/grazie/client/common/model/Multipart;", "(Ljava/lang/String;Lai/grazie/client/common/model/Multipart;Lai/grazie/client/common/model/RequestOptions;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "", "(Ljava/lang/String;[BLai/grazie/client/common/model/RequestOptions;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "withBackoff", "T", "block", "Lkotlin/Function2;", "Lkotlin/coroutines/Continuation;", "", "Lkotlin/ExtensionFunctionType;", "(Lai/grazie/client/common/SuspendableHTTPClient;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "Companion", "client-common"})
/*    */ public final class SuspendableClientWithBackoff implements SuspendableHTTPClient {
/*    */   public SuspendableClientWithBackoff(@NotNull SuspendableHTTPClient httpClient, int total, @NotNull ClientRetryStrategy strategy, @Nullable MPPLogger logger, @NotNull Function1<Throwable, Boolean> retryOn) {
/* 22 */     this.httpClient = httpClient;
/* 23 */     this.total = total;
/* 24 */     this.strategy = strategy;
/* 25 */     this.logger = logger;
/* 26 */     this.retryOn = retryOn;
/*    */   }
/*    */   @Nullable
/* 29 */   public Object send(@NotNull String url, @NotNull RequestOptions options, @NotNull Continuation<?> $completion) { return withBackoff(this, new SuspendableClientWithBackoff$send$2(url, options, null), $completion); } @DebugMetadata(f = "SuspendableClientWithBackoff.kt", l = {30}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "ai.grazie.client.common.SuspendableClientWithBackoff$send$2") @Metadata(mv = {1, 7, 0}, k = 3, xi = 48, d1 = {"\000\n\n\000\n\002\030\002\n\002\030\002\020\000\032\0020\001*\0020\002H@"}, d2 = {"<anonymous>", "Lai/grazie/client/common/model/HTTPResponse;", "Lai/grazie/client/common/SuspendableHTTPClient;"}) static final class SuspendableClientWithBackoff$send$2 extends SuspendLambda implements Function2<SuspendableHTTPClient, Continuation<? super HTTPResponse>, Object> { int label; SuspendableClientWithBackoff$send$2(String $url, RequestOptions $options, Continuation $completion) { super(2, $completion); } public final Continuation<Unit> create(Object value, Continuation<? super SuspendableClientWithBackoff$send$2> $completion) { return (Continuation<Unit>)new SuspendableClientWithBackoff$send$2(this.$url, this.$options, $completion); } public final Object invokeSuspend(Object $result) { Object object = IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 30 */           this.label = 1; if (SuspendableClientWithBackoff.this.httpClient.send(this.$url, this.$options, (Continuation<? super HTTPResponse>)this) == object) return object;  return SuspendableClientWithBackoff.this.httpClient.send(this.$url, this.$options, (Continuation<? super HTTPResponse>)this);
/*    */         case 1:
/*    */           ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); return SYNTHETIC_LOCAL_VARIABLE_1; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Object invoke(SuspendableHTTPClient p1, Continuation<?> p2) { return ((SuspendableClientWithBackoff$send$2)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }
/* 33 */    @Nullable public Object send(@NotNull String url, @NotNull byte[] content, @NotNull RequestOptions options, @NotNull Continuation<?> $completion) { return withBackoff(this, new SuspendableClientWithBackoff$send$4(url, content, options, null), $completion); } @DebugMetadata(f = "SuspendableClientWithBackoff.kt", l = {34}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "ai.grazie.client.common.SuspendableClientWithBackoff$send$4") @Metadata(mv = {1, 7, 0}, k = 3, xi = 48, d1 = {"\000\n\n\000\n\002\030\002\n\002\030\002\020\000\032\0020\001*\0020\002H@"}, d2 = {"<anonymous>", "Lai/grazie/client/common/model/HTTPResponse;", "Lai/grazie/client/common/SuspendableHTTPClient;"}) static final class SuspendableClientWithBackoff$send$4 extends SuspendLambda implements Function2<SuspendableHTTPClient, Continuation<? super HTTPResponse>, Object> { int label; SuspendableClientWithBackoff$send$4(String $url, byte[] $content, RequestOptions $options, Continuation $completion) { super(2, $completion); } public final Object invokeSuspend(Object $result) { Object object = IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 34 */           this.label = 1; if (SuspendableClientWithBackoff.this.httpClient.send(this.$url, this.$content, this.$options, (Continuation<? super HTTPResponse>)this) == object) return object;  return SuspendableClientWithBackoff.this.httpClient.send(this.$url, this.$content, this.$options, (Continuation<? super HTTPResponse>)this);
/*    */         case 1: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); return SYNTHETIC_LOCAL_VARIABLE_1; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Continuation<Unit> create(Object value, Continuation<? super SuspendableClientWithBackoff$send$4> $completion) { return (Continuation<Unit>)new SuspendableClientWithBackoff$send$4(this.$url, this.$content, this.$options, $completion); }
/*    */     public final Object invoke(SuspendableHTTPClient p1, Continuation<?> p2) { return ((SuspendableClientWithBackoff$send$4)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }
/* 37 */   @Nullable public Object send(@NotNull String url, @NotNull Multipart content, @NotNull RequestOptions options, @NotNull Continuation<?> $completion) { return withBackoff(this, new SuspendableClientWithBackoff$send$6(url, content, options, null), $completion); } @DebugMetadata(f = "SuspendableClientWithBackoff.kt", l = {38}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "ai.grazie.client.common.SuspendableClientWithBackoff$send$6") @Metadata(mv = {1, 7, 0}, k = 3, xi = 48, d1 = {"\000\n\n\000\n\002\030\002\n\002\030\002\020\000\032\0020\001*\0020\002H@"}, d2 = {"<anonymous>", "Lai/grazie/client/common/model/HTTPResponse;", "Lai/grazie/client/common/SuspendableHTTPClient;"}) static final class SuspendableClientWithBackoff$send$6 extends SuspendLambda implements Function2<SuspendableHTTPClient, Continuation<? super HTTPResponse>, Object> { int label; SuspendableClientWithBackoff$send$6(String $url, Multipart $content, RequestOptions $options, Continuation $completion) { super(2, $completion); } public final Object invokeSuspend(Object $result) { Object object = IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 38 */           this.label = 1; if (SuspendableClientWithBackoff.this.httpClient.send(this.$url, this.$content, this.$options, (Continuation<? super HTTPResponse>)this) == object) return object;  return SuspendableClientWithBackoff.this.httpClient.send(this.$url, this.$content, this.$options, (Continuation<? super HTTPResponse>)this);
/*    */         case 1: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); return SYNTHETIC_LOCAL_VARIABLE_1; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Continuation<Unit> create(Object value, Continuation<? super SuspendableClientWithBackoff$send$6> $completion) { return (Continuation<Unit>)new SuspendableClientWithBackoff$send$6(this.$url, this.$content, this.$options, $completion); }
/*    */     public final Object invoke(SuspendableHTTPClient p1, Continuation<?> p2) { return ((SuspendableClientWithBackoff$send$6)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }
/* 41 */   @Nullable public Object receiveContinuousSSE(@NotNull String url, @NotNull String content, @NotNull RequestOptions options, boolean reconnect, @NotNull Continuation<?> $completion) { return withBackoff(this, new SuspendableClientWithBackoff$receiveContinuousSSE$2(url, content, options, reconnect, null), $completion); } @DebugMetadata(f = "SuspendableClientWithBackoff.kt", l = {42}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "ai.grazie.client.common.SuspendableClientWithBackoff$receiveContinuousSSE$2") @Metadata(mv = {1, 7, 0}, k = 3, xi = 48, d1 = {"\000\016\n\000\n\002\030\002\n\002\030\002\n\002\030\002\020\000\032\b\022\004\022\0020\0020\001*\0020\003H@"}, d2 = {"<anonymous>", "Lkotlinx/coroutines/flow/Flow;", "Lai/grazie/model/cloud/sse/ServerSentEvent;", "Lai/grazie/client/common/SuspendableHTTPClient;"}) static final class SuspendableClientWithBackoff$receiveContinuousSSE$2 extends SuspendLambda implements Function2<SuspendableHTTPClient, Continuation<? super Flow<? extends ServerSentEvent>>, Object> { int label; SuspendableClientWithBackoff$receiveContinuousSSE$2(String $url, String $content, RequestOptions $options, boolean $reconnect, Continuation $completion) { super(2, $completion); } public final Object invokeSuspend(Object $result) { Object object = IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 42 */           this.label = 1; if (SuspendableClientWithBackoff.this.httpClient.receiveContinuousSSE(this.$url, this.$content, this.$options, this.$reconnect, (Continuation<? super Flow<ServerSentEvent>>)this) == object) return object;  return SuspendableClientWithBackoff.this.httpClient.receiveContinuousSSE(this.$url, this.$content, this.$options, this.$reconnect, (Continuation<? super Flow<ServerSentEvent>>)this);
/*    */         case 1: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); return SYNTHETIC_LOCAL_VARIABLE_1; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Continuation<Unit> create(Object value, Continuation<? super SuspendableClientWithBackoff$receiveContinuousSSE$2> $completion) { return (Continuation<Unit>)new SuspendableClientWithBackoff$receiveContinuousSSE$2(this.$url, this.$content, this.$options, this.$reconnect, $completion); }
/*    */     public final Object invoke(SuspendableHTTPClient p1, Continuation<?> p2) { return ((SuspendableClientWithBackoff$receiveContinuousSSE$2)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }
/* 45 */   @Nullable public Object receiveLineStream(@NotNull String url, @NotNull String content, @NotNull RequestOptions options, @NotNull Function1<? super String, Boolean> isLastLine, @NotNull Continuation<?> $completion) { return withBackoff(this, new SuspendableClientWithBackoff$receiveLineStream$2(url, content, options, isLastLine, null), $completion); } @DebugMetadata(f = "SuspendableClientWithBackoff.kt", l = {46}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "ai.grazie.client.common.SuspendableClientWithBackoff$receiveLineStream$2") @Metadata(mv = {1, 7, 0}, k = 3, xi = 48, d1 = {"\000\016\n\000\n\002\030\002\n\002\020\016\n\002\030\002\020\000\032\b\022\004\022\0020\0020\001*\0020\003H@"}, d2 = {"<anonymous>", "Lkotlinx/coroutines/flow/Flow;", "", "Lai/grazie/client/common/SuspendableHTTPClient;"}) static final class SuspendableClientWithBackoff$receiveLineStream$2 extends SuspendLambda implements Function2<SuspendableHTTPClient, Continuation<? super Flow<? extends String>>, Object> { int label; SuspendableClientWithBackoff$receiveLineStream$2(String $url, String $content, RequestOptions $options, Function1<String, Boolean> $isLastLine, Continuation $completion) { super(2, $completion); } public final Object invokeSuspend(Object $result) { Object object = IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 46 */           this.label = 1; if (SuspendableClientWithBackoff.this.httpClient.receiveLineStream(this.$url, this.$content, this.$options, this.$isLastLine, (Continuation<? super Flow<String>>)this) == object) return object;  return SuspendableClientWithBackoff.this.httpClient.receiveLineStream(this.$url, this.$content, this.$options, this.$isLastLine, (Continuation<? super Flow<String>>)this);
/*    */         case 1: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); return SYNTHETIC_LOCAL_VARIABLE_1; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Continuation<Unit> create(Object value, Continuation<? super SuspendableClientWithBackoff$receiveLineStream$2> $completion) { return (Continuation<Unit>)new SuspendableClientWithBackoff$receiveLineStream$2(this.$url, this.$content, this.$options, this.$isLastLine, $completion); }
/*    */     public final Object invoke(SuspendableHTTPClient p1, Continuation<?> p2) { return ((SuspendableClientWithBackoff$receiveLineStream$2)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }
/* 49 */   @Nullable public Object get(@NotNull String url, @NotNull RequestOptions options, @NotNull Continuation<?> $completion) { return withBackoff(this, new SuspendableClientWithBackoff$get$2(url, options, null), $completion); } @DebugMetadata(f = "SuspendableClientWithBackoff.kt", l = {50}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "ai.grazie.client.common.SuspendableClientWithBackoff$get$2") @Metadata(mv = {1, 7, 0}, k = 3, xi = 48, d1 = {"\000\n\n\000\n\002\030\002\n\002\030\002\020\000\032\0020\001*\0020\002H@"}, d2 = {"<anonymous>", "Lai/grazie/client/common/model/HTTPResponse;", "Lai/grazie/client/common/SuspendableHTTPClient;"}) static final class SuspendableClientWithBackoff$get$2 extends SuspendLambda implements Function2<SuspendableHTTPClient, Continuation<? super HTTPResponse>, Object> { int label; SuspendableClientWithBackoff$get$2(String $url, RequestOptions $options, Continuation $completion) { super(2, $completion); } public final Object invokeSuspend(Object $result) { Object object = IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 50 */           this.label = 1; if (SuspendableClientWithBackoff.this.httpClient.get(this.$url, this.$options, (Continuation<? super HTTPResponse>)this) == object) return object;  return SuspendableClientWithBackoff.this.httpClient.get(this.$url, this.$options, (Continuation<? super HTTPResponse>)this);
/*    */         case 1:
/*    */           ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/*    */           return SYNTHETIC_LOCAL_VARIABLE_1; }
/*    */       
/*    */       throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); }
/*    */      public final Continuation<Unit> create(Object value, Continuation<? super SuspendableClientWithBackoff$get$2> $completion) {
/*    */       return (Continuation<Unit>)new SuspendableClientWithBackoff$get$2(this.$url, this.$options, $completion);
/*    */     } public final Object invoke(SuspendableHTTPClient p1, Continuation<?> p2) {
/*    */       return ((SuspendableClientWithBackoff$get$2)create(p1, p2)).invokeSuspend(Unit.INSTANCE);
/*    */     } } private final <T> Object withBackoff(SuspendableHTTPClient $this$withBackoff, Function2 block, Continuation $completion) {
/* 61 */     if (this.logger == null); return ExtensionsKt.withRetry(this.total, this.strategy, (ClientRetryStrategy)this.retryOn, (Function1)this.logger, defaultLogger, block, $completion);
/*    */   } @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000\022\n\002\030\002\n\002\020\000\n\002\b\002\n\002\030\002\n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002R\016\020\003\032\0020\004X\004¢\006\002\n\000¨\006\005"}, d2 = {"Lai/grazie/client/common/SuspendableClientWithBackoff$Companion;", "", "()V", "defaultLogger", "Lai/grazie/utils/mpp/MPPLogger;", "client-common"})
/*    */   public static final class Companion {
/*    */     private Companion() {} } @NotNull
/* 65 */   public static final Companion Companion = new Companion(null); @NotNull private final SuspendableHTTPClient httpClient; private final int total; @NotNull private final ClientRetryStrategy strategy; @Nullable private final MPPLogger logger; @NotNull private final Function1<Throwable, Boolean> retryOn; @NotNull private static final MPPLogger defaultLogger = LoggerFactory.INSTANCE.create("ai.grazie.client.common.SuspendableClientWithBackoff");
/*    */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\client-common-jvm-0.4.32.jar!\ai\grazie\client\common\SuspendableClientWithBackoff.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */