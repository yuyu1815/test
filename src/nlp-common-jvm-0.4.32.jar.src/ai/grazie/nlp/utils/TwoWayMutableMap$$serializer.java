/*   */ package ai.grazie.nlp.utils;
/*   */ 
/*   */ @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN)
/*   */ @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000<\n\002\b\003\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\030\002\n\002\b\006\n\002\020\021\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\003\b\007\030\000*\004\b\002\020\001*\004\b\003\020\0022\024\022\020\022\016\022\004\022\0028\000\022\004\022\0028\0010\0040\003B\007\b\002¢\006\002\020\005B#\b\027\022\f\020\006\032\b\022\004\022\0028\0020\007\022\f\020\b\032\b\022\004\022\0028\0030\007¢\006\002\020\tJ\030\020\021\032\f\022\b\022\006\022\002\b\0030\0070\022HÖ\001¢\006\002\020\023J\035\020\024\032\016\022\004\022\0028\000\022\004\022\0028\0010\0042\006\020\025\032\0020\026HÖ\001J%\020\027\032\0020\0302\006\020\031\032\0020\0322\022\020\033\032\016\022\004\022\0028\000\022\004\022\0028\0010\004HÖ\001J\030\020\034\032\f\022\b\022\006\022\002\b\0030\0070\022HÖ\001¢\006\002\020\023R\024\020\n\032\0020\0138VXÖ\005¢\006\006\032\004\b\f\020\rR\032\020\006\032\b\022\004\022\0028\0020\0078BXÂ\005¢\006\006\032\004\b\016\020\017R\032\020\b\032\b\022\004\022\0028\0030\0078BXÂ\005¢\006\006\032\004\b\020\020\017¨\006\035"}, d2 = {"ai/grazie/nlp/utils/TwoWayMutableMap.$serializer", "K", "V", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/nlp/utils/TwoWayMutableMap;", "()V", "typeSerial0", "Lkotlinx/serialization/KSerializer;", "typeSerial1", "(Lkotlinx/serialization/KSerializer;Lkotlinx/serialization/KSerializer;)V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "getTypeSerial0", "()Lkotlinx/serialization/KSerializer;", "getTypeSerial1", "childSerializers", "", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "typeParametersSerializers", "nlp-common"})
/*   */ public final class $serializer<K, V> implements GeneratedSerializer<TwoWayMutableMap<K, V>> {
/* 6 */   private $serializer() { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("ai.grazie.nlp.utils.TwoWayMutableMap", this, 2); pluginGeneratedSerialDescriptor.addElement("keysToValues", true); pluginGeneratedSerialDescriptor.addElement("valuesToKeys", true); this.descriptor = pluginGeneratedSerialDescriptor; } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)this.descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[2]; arrayOfKSerializer[0] = (KSerializer)new LinkedHashMapSerializer(this.typeSerial0, this.typeSerial1); arrayOfKSerializer[1] = (KSerializer)new LinkedHashMapSerializer(this.typeSerial1, this.typeSerial0); return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public TwoWayMutableMap<K, V> deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; Map map1 = null, map2 = null; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { map1 = (Map)compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)new LinkedHashMapSerializer(this.typeSerial0, this.typeSerial1), map1); i |= 0x1; map2 = (Map)compositeDecoder.decodeSerializableElement(serialDescriptor, 1, (DeserializationStrategy)new LinkedHashMapSerializer(this.typeSerial1, this.typeSerial0), map2); i |= 0x2; } else { while (bool) { int j = compositeDecoder.decodeElementIndex(serialDescriptor); switch (j) { case -1: bool = false; continue;case 0: map1 = (Map)compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)new LinkedHashMapSerializer(this.typeSerial0, this.typeSerial1), map1); i |= 0x1; continue;case 1: map2 = (Map)compositeDecoder.decodeSerializableElement(serialDescriptor, 1, (DeserializationStrategy)new LinkedHashMapSerializer(this.typeSerial1, this.typeSerial0), map2); i |= 0x2; continue; }  throw new UnknownFieldException(j); }  }  compositeDecoder.endStructure(serialDescriptor); return new TwoWayMutableMap<>(i, map1, map2, null); } public void serialize(@NotNull Encoder encoder, @NotNull TwoWayMutableMap value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); TwoWayMutableMap.write$Self$nlp_common(value, compositeEncoder, serialDescriptor, this.typeSerial0, this.typeSerial1); compositeEncoder.endStructure(serialDescriptor); } @NotNull public KSerializer<?>[] typeParametersSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[2]; arrayOfKSerializer[0] = this.typeSerial0; arrayOfKSerializer[1] = this.typeSerial1; return (KSerializer<?>[])arrayOfKSerializer; } private final KSerializer<K> getTypeSerial0() { return (KSerializer)this.typeSerial0; } private final KSerializer<V> getTypeSerial1() { return (KSerializer)this.typeSerial1; }
/*   */ 
/*   */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\nlp-common-jvm-0.4.32.jar!\ai\grazie\nl\\utils\TwoWayMutableMap$$serializer.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */