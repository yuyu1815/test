/*    */ package com.intellij.ml.llm.matterhorn.activation.data.model.result;@Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000x\n\002\030\002\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\n\002\030\002\n\002\b\035\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\000\b6\030\0002\0020\001:\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'(B#\b\004\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005\022\006\020\006\032\0020\007¢\006\004\b\b\020\tB#\b\024\022\006\020\n\032\0020\013\022\b\020\004\032\004\030\0010\005\022\006\020\006\032\0020\007¢\006\004\b\b\020\fJ\b\020\024\032\0020\005H\026R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\r\020\016R\023\020\004\032\004\030\0010\005¢\006\b\n\000\032\004\b\017\020\020R\023\020\006\032\0020\007¢\006\n\n\002\020\023\032\004\b\021\020\022\001\024)*+,-./0123456789:;<¨\006="}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "", "code", "", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(ILjava/lang/String;Ljava/util/Map;)V", "type", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpErrorType;", "(Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpErrorType;Ljava/lang/String;Ljava/util/Map;)V", "getCode", "()I", "getMessage", "()Ljava/lang/String;", "getHeaders-yd9Q308", "()Ljava/util/Map;", "Ljava/util/Map;", "toString", "BadRequest", "Unauthorized", "Forbidden", "NotFound", "RequestTimeout", "Conflict", "LengthRequired", "PreconditionFailed", "ContentTooLarge", "UnprocessableContent", "TooManyRequests", "UnavailableForLegalReasons", "OutOfQuota", "OutOfApplicationQuota", "OutOfStorage", "DetachedQuotaUsage", "ClosedRequest", "InternalServerError", "AgreementNotAccepted", "Unknown", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$AgreementNotAccepted;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$BadRequest;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$ClosedRequest;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$Conflict;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$ContentTooLarge;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$DetachedQuotaUsage;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$Forbidden;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$InternalServerError;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$LengthRequired;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$NotFound;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$OutOfApplicationQuota;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$OutOfQuota;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$OutOfStorage;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$PreconditionFailed;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$RequestTimeout;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$TooManyRequests;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$Unauthorized;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$UnavailableForLegalReasons;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$Unknown;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$UnprocessableContent;", "data.model"})
/*    */ public abstract class GrazieHttpError { private final int code;
/*    */   @Nullable
/*    */   private final String message;
/*    */   @NotNull
/*    */   private final Map<String, ? extends String> headers;
/*    */   
/*  8 */   private GrazieHttpError(int code, String message, Map<String, ? extends String> headers) { this.code = code; this.message = message; this.headers = headers; } public final int getCode() { return this.code; } @Nullable public final String getMessage() { return this.message; } @NotNull public final Map<String, ? extends String> getHeaders-yd9Q308() { return this.headers; }
/*  9 */   private GrazieHttpError(GrazieHttpErrorType type, String message, Map headers) { super(message, type.getDescription(), headers, (DefaultConstructorMarker)null); } @NotNull
/*    */   public String toString() {
/* 11 */     return "" + this.code + " " + this.code;
/*    */   }
/*    */   @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$BadRequest;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 14 */   public static final class BadRequest extends GrazieHttpError { private BadRequest(String message, Map headers) { super(GrazieHttpErrorType.ErrorBadRequest, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$Unauthorized;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 15 */   public static final class Unauthorized extends GrazieHttpError { private Unauthorized(String message, Map headers) { super(GrazieHttpErrorType.ErrorUnauthorized, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$Forbidden;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 16 */   public static final class Forbidden extends GrazieHttpError { private Forbidden(String message, Map headers) { super(GrazieHttpErrorType.ErrorForbidden, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$NotFound;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 17 */   public static final class NotFound extends GrazieHttpError { private NotFound(String message, Map headers) { super(GrazieHttpErrorType.ErrorNotFound, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$RequestTimeout;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 18 */   public static final class RequestTimeout extends GrazieHttpError { private RequestTimeout(String message, Map headers) { super(GrazieHttpErrorType.ErrorRequestTimeout, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$Conflict;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 19 */   public static final class Conflict extends GrazieHttpError { private Conflict(String message, Map headers) { super(GrazieHttpErrorType.ErrorConflict, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$LengthRequired;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 20 */   public static final class LengthRequired extends GrazieHttpError { private LengthRequired(String message, Map headers) { super(GrazieHttpErrorType.ErrorLengthRequired, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$PreconditionFailed;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 21 */   public static final class PreconditionFailed extends GrazieHttpError { private PreconditionFailed(String message, Map headers) { super(GrazieHttpErrorType.ErrorPreconditionFailed, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$ContentTooLarge;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 22 */   public static final class ContentTooLarge extends GrazieHttpError { private ContentTooLarge(String message, Map headers) { super(GrazieHttpErrorType.ErrorContentTooLarge, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$UnprocessableContent;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 23 */   public static final class UnprocessableContent extends GrazieHttpError { private UnprocessableContent(String message, Map headers) { super(GrazieHttpErrorType.ErrorUnprocessableContent, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$TooManyRequests;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 24 */   public static final class TooManyRequests extends GrazieHttpError { private TooManyRequests(String message, Map headers) { super(GrazieHttpErrorType.ErrorTooManyRequests, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$UnavailableForLegalReasons;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 25 */   public static final class UnavailableForLegalReasons extends GrazieHttpError { private UnavailableForLegalReasons(String message, Map headers) { super(GrazieHttpErrorType.ErrorUnavailableForLegalReasons, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$OutOfQuota;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 26 */   public static final class OutOfQuota extends GrazieHttpError { private OutOfQuota(String message, Map headers) { super(GrazieHttpErrorType.ErrorOutOfQuota, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$OutOfApplicationQuota;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 27 */   public static final class OutOfApplicationQuota extends GrazieHttpError { private OutOfApplicationQuota(String message, Map headers) { super(GrazieHttpErrorType.ErrorOutOfApplicationQuota, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$OutOfStorage;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 28 */   public static final class OutOfStorage extends GrazieHttpError { private OutOfStorage(String message, Map headers) { super(GrazieHttpErrorType.ErrorOutOfStorage, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$DetachedQuotaUsage;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 29 */   public static final class DetachedQuotaUsage extends GrazieHttpError { private DetachedQuotaUsage(String message, Map headers) { super(GrazieHttpErrorType.ErrorDetachedQuotaUsage, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$ClosedRequest;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 30 */   public static final class ClosedRequest extends GrazieHttpError { private ClosedRequest(String message, Map headers) { super(GrazieHttpErrorType.ErrorClosedRequest, message, headers, (DefaultConstructorMarker)null); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\030\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B\031\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$InternalServerError;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"})
/* 31 */   public static final class InternalServerError extends GrazieHttpError { private InternalServerError(String message, Map headers) { super(GrazieHttpErrorType.ErrorInternalServerError, message, headers, (DefaultConstructorMarker)null); }
/*    */      } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\"\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\000\n\002\020 \n\002\030\002\n\002\b\006\030\0002\0020\001:\001\rB'\022\b\020\002\032\004\030\0010\003\022\006\020\004\032\0020\005\022\f\020\006\032\b\022\004\022\0020\b0\007¢\006\004\b\t\020\nR\027\020\006\032\b\022\004\022\0020\b0\007¢\006\b\n\000\032\004\b\013\020\f¨\006\016"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$AgreementNotAccepted;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "requiredAgreements", "", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$AgreementNotAccepted$Agreement;", "<init>", "(Ljava/lang/String;Ljava/util/Map;Ljava/util/List;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "getRequiredAgreements", "()Ljava/util/List;", "Agreement", "data.model"})
/*    */   public static final class AgreementNotAccepted extends GrazieHttpError { @NotNull
/*    */     private final List<Agreement> requiredAgreements;
/*    */     @NotNull
/* 36 */     public final List<Agreement> getRequiredAgreements() { return this.requiredAgreements; }
/* 37 */     private AgreementNotAccepted(String message, Map headers, List<Agreement> requiredAgreements) { super(GrazieHttpErrorType.ErrorAgreementNotAccepted, message, headers, (DefaultConstructorMarker)null);
/*    */       this.requiredAgreements = requiredAgreements; } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\"\n\002\030\002\n\002\020\000\n\000\n\002\020\016\n\002\b\r\n\002\020\013\n\002\b\002\n\002\020\b\n\002\b\002\b\b\030\0002\0020\001B\037\022\006\020\002\032\0020\003\022\006\020\004\032\0020\003\022\006\020\005\032\0020\003¢\006\004\b\006\020\007J\t\020\f\032\0020\003HÆ\003J\t\020\r\032\0020\003HÆ\003J\t\020\016\032\0020\003HÆ\003J'\020\017\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\0032\b\b\002\020\005\032\0020\003HÆ\001J\023\020\020\032\0020\0212\b\020\022\032\004\030\0010\001HÖ\003J\t\020\023\032\0020\024HÖ\001J\t\020\025\032\0020\003HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\b\020\tR\021\020\004\032\0020\003¢\006\b\n\000\032\004\b\n\020\tR\021\020\005\032\0020\003¢\006\b\n\000\032\004\b\013\020\t¨\006\026"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$AgreementNotAccepted$Agreement;", "", "filename", "", "version", "url", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "getFilename", "()Ljava/lang/String;", "getVersion", "getUrl", "component1", "component2", "component3", "copy", "equals", "", "other", "hashCode", "", "toString", "data.model"}) public static final class Agreement { @NotNull private final String filename; @NotNull private final String version; @NotNull
/* 39 */       private final String url; public Agreement(@NotNull String filename, @NotNull String version, @NotNull String url) { this.filename = filename; this.version = version; this.url = url; } @NotNull public final String getFilename() { return this.filename; } @NotNull public final String component1() { return this.filename; } @NotNull public final String component2() { return this.version; } @NotNull public final String getVersion() { return this.version; } @NotNull public final String component3() { return this.url; } @NotNull public final Agreement copy(@NotNull String filename, @NotNull String version, @NotNull String url) { Intrinsics.checkNotNullParameter(filename, "filename"); Intrinsics.checkNotNullParameter(version, "version"); Intrinsics.checkNotNullParameter(url, "url"); return new Agreement(filename, version, url); } @NotNull public final String getUrl() { return this.url; } @NotNull public String toString() { return "Agreement(filename=" + this.filename + ", version=" + this.version + ", url=" + this.url + ")"; }
/*    */       public int hashCode() { result = this.filename.hashCode(); result = result * 31 + this.version.hashCode(); return result * 31 + this.url.hashCode(); }
/*    */       public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof Agreement)) return false;  Agreement agreement = (Agreement)other; return !Intrinsics.areEqual(this.filename, agreement.filename) ? false : (!Intrinsics.areEqual(this.version, agreement.version) ? false : (!!Intrinsics.areEqual(this.url, agreement.url))); } } }
/* 42 */   @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\036\n\002\030\002\n\002\030\002\n\000\n\002\020\b\n\000\n\002\020\016\n\000\n\002\030\002\n\002\b\003\030\0002\0020\001B!\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005\022\006\020\006\032\0020\007¢\006\004\b\b\020\t¨\006\n"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError$Unknown;", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/result/GrazieHttpError;", "code", "", "message", "", "headers", "Lcom/intellij/ml/llm/matterhorn/activation/data/model/SimpleHttpHeaders;", "<init>", "(ILjava/lang/String;Ljava/util/Map;Lkotlin/jvm/internal/DefaultConstructorMarker;)V", "data.model"}) public static final class Unknown extends GrazieHttpError { private Unknown(int code, String message, Map headers) { super(code, message, headers, (DefaultConstructorMarker)null); }
/*    */      }
/*    */    }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\ej-243.132.63.jar!\com\intellij\ml\llm\matterhorn\activation\data\model\result\GrazieHttpError.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */