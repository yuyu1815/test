/*     */ package com.intellij.ml.llm.matterhorn.ej.core.actions.edit;
/*     */ 
/*     */ import java.util.List;
/*     */ import kotlin.Metadata;
/*     */ import kotlin.jvm.internal.Intrinsics;
/*     */ import org.jetbrains.annotations.NotNull;
/*     */ import org.jetbrains.annotations.Nullable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000\032\n\002\030\002\n\002\020\000\n\002\b\003\n\002\030\002\n\002\030\002\n\002\030\002\n\000\bv\030\0002\0020\001:\003\002\003\004\001\003\005\006\007¨\006\b"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult;", "", "Success", "MultipleMatchesError", "NoMatchError", "Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult$MultipleMatchesError;", "Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult$NoMatchError;", "Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult$Success;", "ej-core"})
/*     */ public interface MatchingResult
/*     */ {
/*     */   @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000&\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\020\b\n\002\b\n\n\002\020\013\n\000\n\002\020\000\n\002\b\003\b\b\030\0002\0020\001B\027\022\006\020\002\032\0020\003\022\006\020\004\032\0020\005¢\006\004\b\006\020\007J\t\020\f\032\0020\003HÆ\003J\t\020\r\032\0020\005HÆ\003J\035\020\016\032\0020\0002\b\b\002\020\002\032\0020\0032\b\b\002\020\004\032\0020\005HÆ\001J\023\020\017\032\0020\0202\b\020\021\032\004\030\0010\022HÖ\003J\t\020\023\032\0020\005HÖ\001J\t\020\024\032\0020\003HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\b\020\tR\021\020\004\032\0020\005¢\006\b\n\000\032\004\b\n\020\013¨\006\025"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult$Success;", "Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult;", "updatedText", "", "matchStartsIdx", "", "<init>", "(Ljava/lang/String;I)V", "getUpdatedText", "()Ljava/lang/String;", "getMatchStartsIdx", "()I", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "toString", "ej-core"})
/*     */   public static final class Success
/*     */     implements MatchingResult
/*     */   {
/*     */     @NotNull
/*     */     private final String updatedText;
/*     */     private final int matchStartsIdx;
/*     */     
/*     */     public Success(@NotNull String updatedText, int matchStartsIdx) {
/* 542 */       this.updatedText = updatedText; this.matchStartsIdx = matchStartsIdx; } @NotNull public final String getUpdatedText() { return this.updatedText; } public final int getMatchStartsIdx() { return this.matchStartsIdx; } @NotNull public final String component1() { return this.updatedText; } public final int component2() { return this.matchStartsIdx; } @NotNull public final Success copy(@NotNull String updatedText, int matchStartsIdx) { Intrinsics.checkNotNullParameter(updatedText, "updatedText"); return new Success(updatedText, matchStartsIdx); } @NotNull public String toString() { return "Success(updatedText=" + this.updatedText + ", matchStartsIdx=" + this.matchStartsIdx + ")"; } public int hashCode() { result = this.updatedText.hashCode(); return result * 31 + Integer.hashCode(this.matchStartsIdx); } public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof Success)) return false;  Success success = (Success)other; return !Intrinsics.areEqual(this.updatedText, success.updatedText) ? false : (!(this.matchStartsIdx != success.matchStartsIdx)); } } @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\020 \n\002\020\b\n\002\b\n\n\002\020\013\n\000\n\002\020\000\n\002\b\003\b\b\030\0002\0020\001B\035\022\006\020\002\032\0020\003\022\f\020\004\032\b\022\004\022\0020\0060\005¢\006\004\b\007\020\bJ\t\020\r\032\0020\003HÆ\003J\017\020\016\032\b\022\004\022\0020\0060\005HÆ\003J#\020\017\032\0020\0002\b\b\002\020\002\032\0020\0032\016\b\002\020\004\032\b\022\004\022\0020\0060\005HÆ\001J\023\020\020\032\0020\0212\b\020\022\032\004\030\0010\023HÖ\003J\t\020\024\032\0020\006HÖ\001J\t\020\025\032\0020\003HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\t\020\nR\027\020\004\032\b\022\004\022\0020\0060\005¢\006\b\n\000\032\004\b\013\020\f¨\006\026"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult$MultipleMatchesError;", "Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult;", "message", "", "matchStartsIdxs", "", "", "<init>", "(Ljava/lang/String;Ljava/util/List;)V", "getMessage", "()Ljava/lang/String;", "getMatchStartsIdxs", "()Ljava/util/List;", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "toString", "ej-core"}) public static final class MultipleMatchesError implements MatchingResult { @NotNull private final String message; @NotNull private final List<Integer> matchStartsIdxs;
/* 543 */     public MultipleMatchesError(@NotNull String message, @NotNull List<Integer> matchStartsIdxs) { this.message = message; this.matchStartsIdxs = matchStartsIdxs; } @NotNull public final String getMessage() { return this.message; } @NotNull public final List<Integer> getMatchStartsIdxs() { return this.matchStartsIdxs; } @NotNull public final String component1() { return this.message; } @NotNull public final List<Integer> component2() { return this.matchStartsIdxs; } @NotNull public final MultipleMatchesError copy(@NotNull String message, @NotNull List<Integer> matchStartsIdxs) { Intrinsics.checkNotNullParameter(message, "message"); Intrinsics.checkNotNullParameter(matchStartsIdxs, "matchStartsIdxs"); return new MultipleMatchesError(message, matchStartsIdxs); } @NotNull public String toString() { return "MultipleMatchesError(message=" + this.message + ", matchStartsIdxs=" + this.matchStartsIdxs + ")"; } public int hashCode() { result = this.message.hashCode(); return result * 31 + this.matchStartsIdxs.hashCode(); } public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof MultipleMatchesError)) return false;  MultipleMatchesError multipleMatchesError = (MultipleMatchesError)other; return !Intrinsics.areEqual(this.message, multipleMatchesError.message) ? false : (!!Intrinsics.areEqual(this.matchStartsIdxs, multipleMatchesError.matchStartsIdxs)); } }
/* 544 */    @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\000&\n\002\030\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\020\b\n\002\b\f\n\002\020\013\n\000\n\002\020\000\n\002\b\003\b\b\030\0002\0020\001B\031\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005¢\006\004\b\006\020\007J\t\020\r\032\0020\003HÆ\003J\020\020\016\032\004\030\0010\005HÆ\003¢\006\002\020\013J$\020\017\032\0020\0002\b\b\002\020\002\032\0020\0032\n\b\002\020\004\032\004\030\0010\005HÆ\001¢\006\002\020\020J\023\020\021\032\0020\0222\b\020\023\032\004\030\0010\024HÖ\003J\t\020\025\032\0020\005HÖ\001J\t\020\026\032\0020\003HÖ\001R\021\020\002\032\0020\003¢\006\b\n\000\032\004\b\b\020\tR\025\020\004\032\004\030\0010\005¢\006\n\n\002\020\f\032\004\b\n\020\013¨\006\027"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult$NoMatchError;", "Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult;", "message", "", "mostSimilarStartIdx", "", "<init>", "(Ljava/lang/String;Ljava/lang/Integer;)V", "getMessage", "()Ljava/lang/String;", "getMostSimilarStartIdx", "()Ljava/lang/Integer;", "Ljava/lang/Integer;", "component1", "component2", "copy", "(Ljava/lang/String;Ljava/lang/Integer;)Lcom/intellij/ml/llm/matterhorn/ej/core/actions/edit/MatchingResult$NoMatchError;", "equals", "", "other", "", "hashCode", "toString", "ej-core"}) public static final class NoMatchError implements MatchingResult { @NotNull private final String message; public NoMatchError(@NotNull String message, @Nullable Integer mostSimilarStartIdx) { this.message = message; this.mostSimilarStartIdx = mostSimilarStartIdx; } @Nullable private final Integer mostSimilarStartIdx; @NotNull public final String getMessage() { return this.message; } @Nullable public final Integer getMostSimilarStartIdx() { return this.mostSimilarStartIdx; }
/*     */ 
/*     */     
/*     */     @NotNull
/*     */     public final String component1() {
/*     */       return this.message;
/*     */     }
/*     */     
/*     */     @Nullable
/*     */     public final Integer component2() {
/*     */       return this.mostSimilarStartIdx;
/*     */     }
/*     */     
/*     */     @NotNull
/*     */     public final NoMatchError copy(@NotNull String message, @Nullable Integer mostSimilarStartIdx) {
/*     */       Intrinsics.checkNotNullParameter(message, "message");
/*     */       return new NoMatchError(message, mostSimilarStartIdx);
/*     */     }
/*     */     
/*     */     @NotNull
/*     */     public String toString() {
/*     */       return "NoMatchError(message=" + this.message + ", mostSimilarStartIdx=" + this.mostSimilarStartIdx + ")";
/*     */     }
/*     */     
/*     */     public int hashCode() {
/*     */       result = this.message.hashCode();
/*     */       return result * 31 + ((this.mostSimilarStartIdx == null) ? 0 : this.mostSimilarStartIdx.hashCode());
/*     */     }
/*     */     
/*     */     public boolean equals(@Nullable Object other) {
/*     */       if (this == other)
/*     */         return true; 
/*     */       if (!(other instanceof NoMatchError))
/*     */         return false; 
/*     */       NoMatchError noMatchError = (NoMatchError)other;
/*     */       return !Intrinsics.areEqual(this.message, noMatchError.message) ? false : (!!Intrinsics.areEqual(this.mostSimilarStartIdx, noMatchError.mostSimilarStartIdx));
/*     */     } }
/*     */ 
/*     */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\ej-243.132.63.jar!\com\intellij\ml\llm\matterhorn\ej\core\actions\edit\MatchingResult.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */