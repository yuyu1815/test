/*    */ package com.intellij.ml.llm.matterhorn.ej.core.aiignore;
/*    */ 
/*    */ import com.intellij.openapi.application.CoroutinesKt;
/*    */ import com.intellij.openapi.project.Project;
/*    */ import com.intellij.openapi.vfs.VirtualFile;
/*    */ import kotlin.ResultKt;
/*    */ import kotlin.Unit;
/*    */ import kotlin.coroutines.Continuation;
/*    */ import kotlin.coroutines.intrinsics.IntrinsicsKt;
/*    */ import kotlin.jvm.functions.Function2;
/*    */ import kotlinx.coroutines.BuildersKt;
/*    */ import kotlinx.coroutines.CoroutineScope;
/*    */ import kotlinx.coroutines.Dispatchers;
/*    */ import org.jetbrains.annotations.NotNull;
/*    */ 
/*    */ @Metadata(mv = {2, 1, 0}, k = 1, xi = 48, d1 = {"\0000\n\002\030\002\n\002\020\000\n\002\b\003\n\002\020\016\n\002\b\002\n\002\020\013\n\000\n\002\030\002\n\002\b\002\n\002\020\002\n\000\n\002\030\002\n\002\b\003\bÆ\002\030\0002\0020\001B\t\b\002¢\006\004\b\002\020\003J\026\020\007\032\0020\b2\006\020\t\032\0020\nH@¢\006\002\020\013J\026\020\f\032\0020\r2\006\020\016\032\0020\0172\006\020\t\032\0020\nJ\036\020\020\032\0020\r2\006\020\016\032\0020\0172\006\020\t\032\0020\n2\006\020\021\032\0020\005R\016\020\004\032\0020\005XT¢\006\002\n\000R\016\020\006\032\0020\005XT¢\006\002\n\000¨\006\022"}, d2 = {"Lcom/intellij/ml/llm/matterhorn/ej/core/aiignore/AIIgnore;", "", "<init>", "()V", "AI_IGNORE_RELATIVE_PATH", "", "AI_IGNORE_PLACEHOLDER_TEXT", "hasAiignore", "", "project", "Lcom/intellij/openapi/project/Project;", "(Lcom/intellij/openapi/project/Project;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "openAiIgnoreFile", "", "scope", "Lkotlinx/coroutines/CoroutineScope;", "createPlaceholderAiignoreFile", "text", "ej-core"})
/*    */ public final class AIIgnore {
/*    */   @NotNull
/*    */   public static final AIIgnore INSTANCE = new AIIgnore();
/*    */   @NotNull
/*    */   private static final String AI_IGNORE_RELATIVE_PATH = ".aiignore";
/*    */   @NotNull
/*    */   private static final String AI_IGNORE_PLACEHOLDER_TEXT = "# An .aiignore file follows the same syntax as a .gitignore file.\n# .gitignore documentation: https://git-scm.com/docs/gitignore\n# Junie will ask for explicit approval before view or edit the file or file within a directory listed in .aiignore.\n# Only files contents is protected, Junie is still allowed to view file names even if they are listed in .aiignore.\n# Be aware that the files you included in .aiignore can still be accessed by Junie in two cases:\n# - If Brave Mode is turned on.\n# - If a command has been added to the Allowlist — Junie will not ask for confirmation, even if it accesses - files and folders listed in .aiignore.\n";
/*    */   
/*    */   @Nullable
/* 26 */   public final Object hasAiignore(@NotNull Project project, @NotNull Continuation $completion) { return BuildersKt.withContext((CoroutineContext)Dispatchers.getIO(), new AIIgnore$hasAiignore$2(project, null), $completion); } @DebugMetadata(f = "AIIgnore.kt", l = {}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "com.intellij.ml.llm.matterhorn.ej.core.aiignore.AIIgnore$hasAiignore$2") @Metadata(mv = {2, 1, 0}, k = 3, xi = 48, d1 = {"\000\n\n\000\n\002\020\013\n\002\030\002\020\000\032\0020\001*\0020\002H\n"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;"}) static final class AIIgnore$hasAiignore$2 extends SuspendLambda implements Function2<CoroutineScope, Continuation<? super Boolean>, Object> { int label; AIIgnore$hasAiignore$2(Project $project, Continuation $completion) { super(2, $completion); } public final Object invokeSuspend(Object $result) { IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 27 */           return Boxing.boxBoolean((AiIgnoreUtilKt.locateFirstIgnoreFile(this.$project) != null)); }
/*    */       
/*    */       throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); }
/*    */     public final Continuation<Unit> create(Object value, Continuation<? super AIIgnore$hasAiignore$2> $completion) { return (Continuation<Unit>)new AIIgnore$hasAiignore$2(this.$project, $completion); } public final Object invoke(CoroutineScope p1, Continuation<?> p2) { return ((AIIgnore$hasAiignore$2)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }
/*    */    public final void openAiIgnoreFile(@NotNull CoroutineScope scope, @NotNull Project project) { VirtualFile baseDir;
/* 32 */     Intrinsics.checkNotNullParameter(scope, "scope"); Intrinsics.checkNotNullParameter(project, "project"); if (ProjectUtil.guessProjectDir(project) == null) { ProjectUtil.guessProjectDir(project); return; }
/* 33 */      BuildersKt.launch$default(scope, (CoroutineContext)Dispatchers.getIO(), null, new AIIgnore$openAiIgnoreFile$1(baseDir, project, null), 2, null); } @DebugMetadata(f = "AIIgnore.kt", l = {35}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "com.intellij.ml.llm.matterhorn.ej.core.aiignore.AIIgnore$openAiIgnoreFile$1") @Metadata(mv = {2, 1, 0}, k = 3, xi = 48, d1 = {"\000\n\n\000\n\002\020\002\n\002\030\002\020\000\032\0020\001*\0020\002H\n"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;"}) static final class AIIgnore$openAiIgnoreFile$1 extends SuspendLambda implements Function2<CoroutineScope, Continuation<? super Unit>, Object> { int label; AIIgnore$openAiIgnoreFile$1(VirtualFile $baseDir, Project $project, Continuation $completion) { super(2, $completion); } public final Object invokeSuspend(Object $result) { VirtualFile virtualFile; Object object = IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 34 */           if (this.$baseDir.findFileByRelativePath(".aiignore") == null) { this.$baseDir.findFileByRelativePath(".aiignore"); return Unit.INSTANCE; }
/* 35 */            this.label = 1; if (BuildersKt.withContext(CoroutinesKt.getEDT(Dispatchers.INSTANCE), new Function2<CoroutineScope, Continuation<? super Unit>, Object>(this.$project, virtualFile, null) { int label; public final Object invokeSuspend(Object $result) { IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 36 */                       FileEditorManager.getInstance(this.$project).openFile(this.$virtualFile);
/* 37 */                       return Unit.INSTANCE; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Continuation<Unit> create(Object value, Continuation<? super null> $completion) { return (Continuation)new Function2<>(this.$project, this.$virtualFile, $completion); } public final Object invoke(CoroutineScope p1, Continuation<?> p2) { return ((null)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }(Continuation)this) == object) return object;  BuildersKt.withContext(CoroutinesKt.getEDT(Dispatchers.INSTANCE), new Function2<CoroutineScope, Continuation<? super Unit>, Object>(this.$project, virtualFile, null) { int label; public final Object invokeSuspend(Object $result) { IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); FileEditorManager.getInstance(this.$project).openFile(this.$virtualFile); return Unit.INSTANCE; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); }
/* 38 */                 public final Continuation<Unit> create(Object value, Continuation<? super null> $completion) { return (Continuation)new Function2<>(this.$project, this.$virtualFile, $completion); } public final Object invoke(CoroutineScope p1, Continuation<?> p2) { return ((null)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }(Continuation)this); return Unit.INSTANCE;case 1: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); return Unit.INSTANCE; }
/*    */        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); }
/*    */     public final Continuation<Unit> create(Object value, Continuation<? super AIIgnore$openAiIgnoreFile$1> $completion) { return (Continuation<Unit>)new AIIgnore$openAiIgnoreFile$1(this.$baseDir, this.$project, $completion); } public final Object invoke(CoroutineScope p1, Continuation<?> p2) { return ((AIIgnore$openAiIgnoreFile$1)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }
/*    */    public final void createPlaceholderAiignoreFile(@NotNull CoroutineScope scope, @NotNull Project project, @NotNull String text) { VirtualFile baseDir;
/* 42 */     Intrinsics.checkNotNullParameter(scope, "scope"); Intrinsics.checkNotNullParameter(project, "project"); Intrinsics.checkNotNullParameter(text, "text"); if (ProjectUtil.guessProjectDir(project) == null) { ProjectUtil.guessProjectDir(project); return; }
/* 43 */      BuildersKt.launch$default(scope, (CoroutineContext)Dispatchers.getIO(), null, new AIIgnore$createPlaceholderAiignoreFile$1(baseDir, project, null), 2, null); } @DebugMetadata(f = "AIIgnore.kt", l = {44, 49}, i = {}, s = {}, n = {}, m = "invokeSuspend", c = "com.intellij.ml.llm.matterhorn.ej.core.aiignore.AIIgnore$createPlaceholderAiignoreFile$1") @Metadata(mv = {2, 1, 0}, k = 3, xi = 48, d1 = {"\000\n\n\000\n\002\020\002\n\002\030\002\020\000\032\0020\001*\0020\002H\n"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;"}) static final class AIIgnore$createPlaceholderAiignoreFile$1 extends SuspendLambda implements Function2<CoroutineScope, Continuation<? super Unit>, Object> { int label; AIIgnore$createPlaceholderAiignoreFile$1(VirtualFile $baseDir, Project $project, Continuation $completion) { super(2, $completion); } public final Object invokeSuspend(Object $result) { VirtualFile virtualFile; Object object = IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 44 */           this.label = 1; if (CoroutinesKt.writeAction(this.$baseDir::invokeSuspend$lambda$0, (Continuation)this) == object) return object;  virtualFile = (VirtualFile)CoroutinesKt.writeAction(this.$baseDir::invokeSuspend$lambda$0, (Continuation)this);
/*    */ 
/*    */ 
/*    */ 
/*    */           
/* 49 */           this.label = 2; if (BuildersKt.withContext(CoroutinesKt.getEDT(Dispatchers.INSTANCE), new Function2<CoroutineScope, Continuation<? super Unit>, Object>(this.$project, virtualFile, null) { int label; public final Object invokeSuspend(Object $result) { IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1);
/* 50 */                       FileEditorManager.getInstance(this.$project).openFile(this.$virtualFile);
/* 51 */                       return Unit.INSTANCE; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Continuation<Unit> create(Object value, Continuation<? super null> $completion) { return (Continuation)new Function2<>(this.$project, this.$virtualFile, $completion); } public final Object invoke(CoroutineScope p1, Continuation<?> p2) { return ((null)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }(Continuation)this) == object) return object;  BuildersKt.withContext(CoroutinesKt.getEDT(Dispatchers.INSTANCE), new Function2<CoroutineScope, Continuation<? super Unit>, Object>(this.$project, virtualFile, null) { int label; public final Object invokeSuspend(Object $result) { IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); FileEditorManager.getInstance(this.$project).openFile(this.$virtualFile); return Unit.INSTANCE; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); }
/* 52 */                 public final Continuation<Unit> create(Object value, Continuation<? super null> $completion) { return (Continuation)new Function2<>(this.$project, this.$virtualFile, $completion); } public final Object invoke(CoroutineScope p1, Continuation<?> p2) { return ((null)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }(Continuation)this); return Unit.INSTANCE;case 1: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); virtualFile = (VirtualFile)SYNTHETIC_LOCAL_VARIABLE_1; this.label = 2; if (BuildersKt.withContext(CoroutinesKt.getEDT(Dispatchers.INSTANCE), new Function2<CoroutineScope, Continuation<? super Unit>, Object>(this.$project, virtualFile, null) { int label; public final Object invokeSuspend(Object $result) { IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); FileEditorManager.getInstance(this.$project).openFile(this.$virtualFile); return Unit.INSTANCE; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Continuation<Unit> create(Object value, Continuation<? super null> $completion) { return (Continuation)new Function2<>(this.$project, this.$virtualFile, $completion); } public final Object invoke(CoroutineScope p1, Continuation<?> p2) { return ((null)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }(Continuation)this) == object) return object;  BuildersKt.withContext(CoroutinesKt.getEDT(Dispatchers.INSTANCE), new Function2<CoroutineScope, Continuation<? super Unit>, Object>(this.$project, virtualFile, null) { int label; public final Object invokeSuspend(Object $result) { IntrinsicsKt.getCOROUTINE_SUSPENDED(); switch (this.label) { case 0: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); FileEditorManager.getInstance(this.$project).openFile(this.$virtualFile); return Unit.INSTANCE; }  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); } public final Continuation<Unit> create(Object value, Continuation<? super null> $completion) { return (Continuation)new Function2<>(this.$project, this.$virtualFile, $completion); } public final Object invoke(CoroutineScope p1, Continuation<?> p2) { return ((null)create(p1, p2)).invokeSuspend(Unit.INSTANCE); } }(Continuation)this); return Unit.INSTANCE;case 2: ResultKt.throwOnFailure(SYNTHETIC_LOCAL_VARIABLE_1); return Unit.INSTANCE; }
/*    */       
/*    */       throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine"); }
/*    */ 
/*    */     
/*    */     public final Continuation<Unit> create(Object value, Continuation<? super AIIgnore$createPlaceholderAiignoreFile$1> $completion) {
/*    */       return (Continuation<Unit>)new AIIgnore$createPlaceholderAiignoreFile$1(this.$baseDir, this.$project, $completion);
/*    */     }
/*    */     
/*    */     public final Object invoke(CoroutineScope p1, Continuation<?> p2) {
/*    */       return ((AIIgnore$createPlaceholderAiignoreFile$1)create(p1, p2)).invokeSuspend(Unit.INSTANCE);
/*    */     }
/*    */     
/*    */     private static final VirtualFile invokeSuspend$lambda$0(VirtualFile $baseDir) {
/*    */       VirtualFile virtualFile = VirtualFileUtil.findOrCreateFile($baseDir, ".aiignore");
/*    */       Intrinsics.checkNotNullExpressionValue("# An .aiignore file follows the same syntax as a .gitignore file.\n# .gitignore documentation: https://git-scm.com/docs/gitignore\n# Junie will ask for explicit approval before view or edit the file or file within a directory listed in .aiignore.\n# Only files contents is protected, Junie is still allowed to view file names even if they are listed in .aiignore.\n# Be aware that the files you included in .aiignore can still be accessed by Junie in two cases:\n# - If Brave Mode is turned on.\n# - If a command has been added to the Allowlist — Junie will not ask for confirmation, even if it accesses - files and folders listed in .aiignore.\n".getBytes(Charsets.UTF_8), "getBytes(...)");
/*    */       virtualFile.setBinaryContent("# An .aiignore file follows the same syntax as a .gitignore file.\n# .gitignore documentation: https://git-scm.com/docs/gitignore\n# Junie will ask for explicit approval before view or edit the file or file within a directory listed in .aiignore.\n# Only files contents is protected, Junie is still allowed to view file names even if they are listed in .aiignore.\n# Be aware that the files you included in .aiignore can still be accessed by Junie in two cases:\n# - If Brave Mode is turned on.\n# - If a command has been added to the Allowlist — Junie will not ask for confirmation, even if it accesses - files and folders listed in .aiignore.\n".getBytes(Charsets.UTF_8));
/*    */       return virtualFile;
/*    */     } }
/*    */ 
/*    */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\ej-243.132.63.jar!\com\intellij\ml\llm\matterhorn\ej\core\aiignore\AIIgnore.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */