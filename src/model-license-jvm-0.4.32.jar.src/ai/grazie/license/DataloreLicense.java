/*    */ package ai.grazie.license;@Serializable @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000Z\n\002\030\002\n\002\030\002\n\000\n\002\020\b\n\000\n\002\030\002\n\000\n\002\030\002\n\000\n\002\030\002\n\002\b\002\n\002\020\016\n\002\b\002\n\002\020\013\n\002\b\003\n\002\030\002\n\002\b\035\n\002\020\000\n\002\b\003\n\002\020\002\n\002\b\002\n\002\030\002\n\000\n\002\030\002\n\002\b\004\b\b\030\000 =2\0020\001:\002<=Bk\b\021\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005\022\b\020\006\032\004\030\0010\007\022\b\020\b\032\004\030\0010\t\022\b\020\n\032\004\030\0010\t\022\b\020\013\032\004\030\0010\f\022\006\020\r\032\0020\003\022\006\020\016\032\0020\017\022\006\020\020\032\0020\017\022\006\020\021\032\0020\017\022\b\020\022\032\004\030\0010\023¢\006\002\020\024BM\022\006\020\004\032\0020\005\022\006\020\006\032\0020\007\022\006\020\b\032\0020\t\022\006\020\n\032\0020\t\022\006\020\013\032\0020\f\022\006\020\r\032\0020\003\022\006\020\016\032\0020\017\022\006\020\020\032\0020\017\022\006\020\021\032\0020\017¢\006\002\020\025J\t\020%\032\0020\005HÆ\003J\t\020&\032\0020\007HÆ\003J\t\020'\032\0020\tHÆ\003J\t\020(\032\0020\tHÆ\003J\t\020)\032\0020\fHÆ\003J\t\020*\032\0020\003HÆ\003J\t\020+\032\0020\017HÆ\003J\t\020,\032\0020\017HÆ\003J\t\020-\032\0020\017HÆ\003Jc\020.\032\0020\0002\b\b\002\020\004\032\0020\0052\b\b\002\020\006\032\0020\0072\b\b\002\020\b\032\0020\t2\b\b\002\020\n\032\0020\t2\b\b\002\020\013\032\0020\f2\b\b\002\020\r\032\0020\0032\b\b\002\020\016\032\0020\0172\b\b\002\020\020\032\0020\0172\b\b\002\020\021\032\0020\017HÆ\001J\023\020/\032\0020\0172\b\0200\032\004\030\00101HÖ\003J\t\0202\032\0020\003HÖ\001J\t\0203\032\0020\fHÖ\001J&\0204\032\002052\006\0206\032\0020\0002\006\0207\032\002082\006\0209\032\0020:HÁ\001¢\006\002\b;R\024\020\016\032\0020\017X\004¢\006\b\n\000\032\004\b\026\020\027R\024\020\004\032\0020\005X\004¢\006\b\n\000\032\004\b\030\020\031R\021\020\013\032\0020\f¢\006\b\n\000\032\004\b\032\020\033R\024\020\021\032\0020\017X\004¢\006\b\n\000\032\004\b\034\020\027R\021\020\r\032\0020\003¢\006\b\n\000\032\004\b\035\020\036R\024\020\b\032\0020\tX\004¢\006\b\n\000\032\004\b\037\020 R\024\020\020\032\0020\017X\004¢\006\b\n\000\032\004\b!\020\027R\024\020\n\032\0020\tX\004¢\006\b\n\000\032\004\b\"\020 R\024\020\006\032\0020\007X\004¢\006\b\n\000\032\004\b#\020$¨\006>"}, d2 = {"Lai/grazie/license/DataloreLicense;", "Lai/grazie/license/License;", "seen1", "", "licenseId", "Lai/grazie/license/LicenseID;", "type", "Lai/grazie/license/LicenseType;", "since", "Lai/grazie/utils/mpp/time/Timestamp;", "till", "licenseName", "", "seats", "cancelled", "", "suspended", "outdated", "serializationConstructorMarker", "Lkotlinx/serialization/internal/SerializationConstructorMarker;", "(ILai/grazie/license/LicenseID;Lai/grazie/license/LicenseType;Lai/grazie/utils/mpp/time/Timestamp;Lai/grazie/utils/mpp/time/Timestamp;Ljava/lang/String;IZZZLkotlinx/serialization/internal/SerializationConstructorMarker;)V", "(Lai/grazie/license/LicenseID;Lai/grazie/license/LicenseType;Lai/grazie/utils/mpp/time/Timestamp;Lai/grazie/utils/mpp/time/Timestamp;Ljava/lang/String;IZZZ)V", "getCancelled", "()Z", "getLicenseId", "()Lai/grazie/license/LicenseID;", "getLicenseName", "()Ljava/lang/String;", "getOutdated", "getSeats", "()I", "getSince", "()Lai/grazie/utils/mpp/time/Timestamp;", "getSuspended", "getTill", "getType", "()Lai/grazie/license/LicenseType;", "component1", "component2", "component3", "component4", "component5", "component6", "component7", "component8", "component9", "copy", "equals", "other", "", "hashCode", "toString", "write$Self", "", "self", "output", "Lkotlinx/serialization/encoding/CompositeEncoder;", "serialDesc", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "write$Self$model_license", "$serializer", "Companion", "model-license"}) public final class DataloreLicense extends License { @NotNull public static final Companion Companion = new Companion(null); @NotNull private final LicenseID licenseId; @NotNull private final LicenseType type; @NotNull
/*    */   private final Timestamp since; @NotNull
/*    */   private final Timestamp till; @NotNull
/*    */   private final String licenseName; private final int seats; private final boolean cancelled; private final boolean suspended; private final boolean outdated; @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN)
/*    */   @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/license/DataloreLicense.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/license/DataloreLicense;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-license"})
/*    */   public static final class $serializer implements GeneratedSerializer<DataloreLicense> { @NotNull
/*  7 */     public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[9]; arrayOfKSerializer[0] = (KSerializer)LicenseID.Serializer.INSTANCE; arrayOfKSerializer[1] = (KSerializer)LicenseType.Serializer.INSTANCE; arrayOfKSerializer[2] = (KSerializer)Timestamp.Serializer.INSTANCE; arrayOfKSerializer[3] = (KSerializer)Timestamp.Serializer.INSTANCE; arrayOfKSerializer[4] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[5] = (KSerializer)IntSerializer.INSTANCE; arrayOfKSerializer[6] = (KSerializer)BooleanSerializer.INSTANCE; arrayOfKSerializer[7] = (KSerializer)BooleanSerializer.INSTANCE; arrayOfKSerializer[8] = (KSerializer)BooleanSerializer.INSTANCE; return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public DataloreLicense deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; LicenseID licenseID = null; LicenseType licenseType = null; Timestamp timestamp1 = null, timestamp2 = null; String str = null; int j = 0; boolean bool1 = false, bool2 = false, bool3 = false; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { licenseID = (LicenseID)compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)LicenseID.Serializer.INSTANCE, licenseID); i |= 0x1; licenseType = (LicenseType)compositeDecoder.decodeSerializableElement(serialDescriptor, 1, (DeserializationStrategy)LicenseType.Serializer.INSTANCE, licenseType); i |= 0x2; timestamp1 = (Timestamp)compositeDecoder.decodeSerializableElement(serialDescriptor, 2, (DeserializationStrategy)Timestamp.Serializer.INSTANCE, timestamp1); i |= 0x4; timestamp2 = (Timestamp)compositeDecoder.decodeSerializableElement(serialDescriptor, 3, (DeserializationStrategy)Timestamp.Serializer.INSTANCE, timestamp2); i |= 0x8; str = compositeDecoder.decodeStringElement(serialDescriptor, 4); i |= 0x10; j = compositeDecoder.decodeIntElement(serialDescriptor, 5); i |= 0x20; bool1 = compositeDecoder.decodeBooleanElement(serialDescriptor, 6); i |= 0x40; bool2 = compositeDecoder.decodeBooleanElement(serialDescriptor, 7); i |= 0x80; bool3 = compositeDecoder.decodeBooleanElement(serialDescriptor, 8); i |= 0x100; } else { while (bool) { int k = compositeDecoder.decodeElementIndex(serialDescriptor); switch (k) { case -1: bool = false; continue;case 0: licenseID = (LicenseID)compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)LicenseID.Serializer.INSTANCE, licenseID); i |= 0x1; continue;case 1: licenseType = (LicenseType)compositeDecoder.decodeSerializableElement(serialDescriptor, 1, (DeserializationStrategy)LicenseType.Serializer.INSTANCE, licenseType); i |= 0x2; continue;case 2: timestamp1 = (Timestamp)compositeDecoder.decodeSerializableElement(serialDescriptor, 2, (DeserializationStrategy)Timestamp.Serializer.INSTANCE, timestamp1); i |= 0x4; continue;case 3: timestamp2 = (Timestamp)compositeDecoder.decodeSerializableElement(serialDescriptor, 3, (DeserializationStrategy)Timestamp.Serializer.INSTANCE, timestamp2); i |= 0x8; continue;case 4: str = compositeDecoder.decodeStringElement(serialDescriptor, 4); i |= 0x10; continue;case 5: j = compositeDecoder.decodeIntElement(serialDescriptor, 5); i |= 0x20; continue;case 6: bool1 = compositeDecoder.decodeBooleanElement(serialDescriptor, 6); i |= 0x40; continue;case 7: bool2 = compositeDecoder.decodeBooleanElement(serialDescriptor, 7); i |= 0x80; continue;case 8: bool3 = compositeDecoder.decodeBooleanElement(serialDescriptor, 8); i |= 0x100; continue; }  throw new UnknownFieldException(k); }  }  compositeDecoder.endStructure(serialDescriptor); return new DataloreLicense(i, licenseID, licenseType, timestamp1, timestamp2, str, j, bool1, bool2, bool3, null); } public void serialize(@NotNull Encoder encoder, @NotNull DataloreLicense value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); DataloreLicense.write$Self$model_license(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("ai.grazie.license.DataloreLicense", INSTANCE, 9); pluginGeneratedSerialDescriptor.addElement("licenseId", false); pluginGeneratedSerialDescriptor.addElement("type", false); pluginGeneratedSerialDescriptor.addElement("since", false); pluginGeneratedSerialDescriptor.addElement("till", false); pluginGeneratedSerialDescriptor.addElement("licenseName", false); pluginGeneratedSerialDescriptor.addElement("seats", false); pluginGeneratedSerialDescriptor.addElement("cancelled", false); pluginGeneratedSerialDescriptor.addElement("suspended", false); pluginGeneratedSerialDescriptor.addElement("outdated", false); pluginGeneratedSerialDescriptor.pushClassAnnotation(
/*    */ 
/*    */           
/* 10 */           (Annotation)new DataloreLicense$$serializer$annotationImpl$kotlinx_serialization_json_JsonClassDiscriminator$0(
/* 11 */             "_type")); descriptor = pluginGeneratedSerialDescriptor; } } @NotNull public LicenseID getLicenseId() { return this.licenseId; } @NotNull public LicenseType getType() { return this.type; } @NotNull
/* 12 */   public Timestamp getSince() { return this.since; } @NotNull
/* 13 */   public Timestamp getTill() { return this.till; } @NotNull
/* 14 */   public final String getLicenseName() { return this.licenseName; }
/* 15 */   public final int getSeats() { return this.seats; }
/* 16 */   public boolean getCancelled() { return this.cancelled; }
/* 17 */   public boolean getSuspended() { return this.suspended; }
/* 18 */   public boolean getOutdated() { return this.outdated; }
/* 19 */   @NotNull public final LicenseID component1() { return this.licenseId; } @NotNull public final LicenseType component2() { return this.type; } @NotNull public final Timestamp component3() { return this.since; } @NotNull public final Timestamp component4() { return this.till; } @NotNull public final String component5() { return this.licenseName; } public final int component6() { return this.seats; } public final boolean component7() { return this.cancelled; } public DataloreLicense(@NotNull LicenseID licenseId, @NotNull LicenseType type, @NotNull Timestamp since, @NotNull Timestamp till, @NotNull String licenseName, int seats, boolean cancelled, boolean suspended, boolean outdated) { super(null); this.licenseId = licenseId; this.type = type; this.since = since; this.till = till; this.licenseName = licenseName; this.seats = seats; this.cancelled = cancelled; this.suspended = suspended; this.outdated = outdated; } public final boolean component8() { return this.suspended; } public final boolean component9() { return this.outdated; } @NotNull public final DataloreLicense copy(@NotNull LicenseID licenseId, @NotNull LicenseType type, @NotNull Timestamp since, @NotNull Timestamp till, @NotNull String licenseName, int seats, boolean cancelled, boolean suspended, boolean outdated) { Intrinsics.checkNotNullParameter(licenseId, "licenseId"); Intrinsics.checkNotNullParameter(type, "type"); Intrinsics.checkNotNullParameter(since, "since"); Intrinsics.checkNotNullParameter(till, "till"); Intrinsics.checkNotNullParameter(licenseName, "licenseName"); return new DataloreLicense(licenseId, type, since, till, licenseName, seats, cancelled, suspended, outdated); } @NotNull public String toString() { return "DataloreLicense(licenseId=" + this.licenseId + ", type=" + this.type + ", since=" + this.since + ", till=" + this.till + ", licenseName=" + this.licenseName + ", seats=" + this.seats + ", cancelled=" + this.cancelled + ", suspended=" + this.suspended + ", outdated=" + this.outdated + ")"; } public int hashCode() { result = this.licenseId.hashCode(); result = result * 31 + this.type.hashCode(); result = result * 31 + this.since.hashCode(); result = result * 31 + this.till.hashCode(); result = result * 31 + this.licenseName.hashCode(); result = result * 31 + Integer.hashCode(this.seats); result = result * 31 + Boolean.hashCode(this.cancelled); result = result * 31 + Boolean.hashCode(this.suspended); return result * 31 + Boolean.hashCode(this.outdated); } public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof DataloreLicense)) return false;  DataloreLicense dataloreLicense = (DataloreLicense)other; return !Intrinsics.areEqual(this.licenseId, dataloreLicense.licenseId) ? false : (!Intrinsics.areEqual(this.type, dataloreLicense.type) ? false : (!Intrinsics.areEqual(this.since, dataloreLicense.since) ? false : (!Intrinsics.areEqual(this.till, dataloreLicense.till) ? false : (!Intrinsics.areEqual(this.licenseName, dataloreLicense.licenseName) ? false : ((this.seats != dataloreLicense.seats) ? false : ((this.cancelled != dataloreLicense.cancelled) ? false : ((this.suspended != dataloreLicense.suspended) ? false : (!(this.outdated != dataloreLicense.outdated))))))))); } @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000:\n\002\030\002\n\002\020\000\n\002\b\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\000\n\002\030\002\n\002\b\003\n\002\020\b\n\000\n\002\020\013\n\002\b\003\n\002\030\002\n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002JW\020\003\032\0020\0042\006\020\005\032\0020\0062\006\020\007\032\0020\b2\006\020\t\032\0020\n2\006\020\013\032\0020\n2\006\020\f\032\0020\0062\006\020\r\032\0020\0162\b\b\002\020\017\032\0020\0202\b\b\002\020\021\032\0020\0202\b\b\002\020\022\032\0020\020H\002J\017\020\023\032\b\022\004\022\0020\0040\024HÆ\001¨\006\025"}, d2 = {"Lai/grazie/license/DataloreLicense$Companion;", "", "()V", "invoke", "Lai/grazie/license/DataloreLicense;", "licenseId", "", "type", "Lai/grazie/license/LicenseType;", "since", "Lai/grazie/utils/mpp/time/Timestamp;", "till", "licenseName", "seats", "", "cancelled", "", "suspended", "outdated", "serializer", "Lkotlinx/serialization/KSerializer;", "model-license"}) public static final class Companion {
/* 20 */     @NotNull public final KSerializer<DataloreLicense> serializer() { return (KSerializer<DataloreLicense>)DataloreLicense.$serializer.INSTANCE; }
/*    */ 
/*    */ 
/*    */ 
/*    */     
/*    */     private Companion() {}
/*    */ 
/*    */ 
/*    */     
/*    */     @NotNull
/*    */     public final DataloreLicense invoke(@NotNull String licenseId, @NotNull LicenseType type, @NotNull Timestamp since, @NotNull Timestamp till, @NotNull String licenseName, int seats, boolean cancelled, boolean suspended, boolean outdated) {
/* 31 */       Intrinsics.checkNotNullParameter(licenseId, "licenseId"); Intrinsics.checkNotNullParameter(type, "type"); Intrinsics.checkNotNullParameter(since, "since"); Intrinsics.checkNotNullParameter(till, "till"); Intrinsics.checkNotNullParameter(licenseName, "licenseName"); return new DataloreLicense(
/* 32 */           new LicenseID("dl:" + licenseId), type, since, till, licenseName, seats, cancelled, suspended, outdated);
/*    */     }
/*    */   } }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\model-license-jvm-0.4.32.jar!\ai\grazie\license\DataloreLicense.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */