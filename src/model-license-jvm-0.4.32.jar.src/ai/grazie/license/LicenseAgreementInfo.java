/*    */ package ai.grazie.license;
/*    */ import kotlin.jvm.internal.Intrinsics;
/*    */ import kotlinx.serialization.KSerializer;
/*    */ import kotlinx.serialization.descriptors.SerialDescriptor;
/*    */ import kotlinx.serialization.encoding.CompositeDecoder;
/*    */ import kotlinx.serialization.encoding.CompositeEncoder;
/*    */ import kotlinx.serialization.internal.PluginGeneratedSerialDescriptor;
/*    */ import org.jetbrains.annotations.NotNull;
/*    */ 
/*    */ @JsonClassDiscriminator(discriminator = "_type")
/*    */ @Serializable
/*    */ @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0008\n\002\030\002\n\002\030\002\n\000\n\002\020\b\n\000\n\002\030\002\n\002\b\003\n\002\020\002\n\002\b\002\n\002\030\002\n\000\n\002\030\002\n\002\b\003\n\002\030\002\n\002\030\002\n\000\b7\030\000 \0202\0020\001:\003\017\020\021B\031\b\027\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005¢\006\002\020\006B\007\b\004¢\006\002\020\007J!\020\b\032\0020\t2\006\020\n\032\0020\0002\006\020\013\032\0020\f2\006\020\r\032\0020\016HÇ\001\001\002\022\023¨\006\024"}, d2 = {"Lai/grazie/license/LicenseAgreementInfo;", "Lai/grazie/license/BaseLicenseAgreementInfo;", "seen1", "", "serializationConstructorMarker", "Lkotlinx/serialization/internal/SerializationConstructorMarker;", "(ILkotlinx/serialization/internal/SerializationConstructorMarker;)V", "()V", "write$Self", "", "self", "output", "Lkotlinx/serialization/encoding/CompositeEncoder;", "serialDesc", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "Base", "Companion", "Extended", "Lai/grazie/license/LicenseAgreementInfo$Base;", "Lai/grazie/license/LicenseAgreementInfo$Extended;", "model-license"})
/*    */ public abstract class LicenseAgreementInfo implements BaseLicenseAgreementInfo {
/*    */   @NotNull
/* 15 */   public static final Companion Companion = new Companion(null); @NotNull private static final Lazy<KSerializer<Object>> $cachedSerializer$delegate = LazyKt.lazy(LazyThreadSafetyMode.PUBLICATION, Companion.null.INSTANCE); private LicenseAgreementInfo() {} @Metadata(mv = {1, 7, 0}, k = 3, xi = 48) static final class null extends Lambda implements Function0<KSerializer<Object>> { public static final null INSTANCE = (null)new Function0<>(); null() { super(0); } public final KSerializer<Object> invoke() { KClass[] arrayOfKClass = new KClass[2]; arrayOfKClass[0] = Reflection.getOrCreateKotlinClass(LicenseAgreementInfo.Base.class); arrayOfKClass[1] = Reflection.getOrCreateKotlinClass(LicenseAgreementInfo.Extended.class); KSerializer[] arrayOfKSerializer = new KSerializer[2]; arrayOfKSerializer[0] = (KSerializer)LicenseAgreementInfo.Base.$serializer.INSTANCE; arrayOfKSerializer[1] = (KSerializer)LicenseAgreementInfo.Extended.$serializer.INSTANCE; Annotation[] arrayOfAnnotation = new Annotation[1]; arrayOfAnnotation[0] = 
/* 16 */         (Annotation)new LicenseAgreementInfo$Base$$serializer$annotationImpl$kotlinx_serialization_json_JsonClassDiscriminator$0("_type");
/*    */       return (KSerializer<Object>)new SealedClassSerializer("ai.grazie.license.LicenseAgreementInfo", Reflection.getOrCreateKotlinClass(LicenseAgreementInfo.class), arrayOfKClass, arrayOfKSerializer, arrayOfAnnotation); } } @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000\026\n\002\030\002\n\002\020\000\n\002\b\002\n\002\030\002\n\002\030\002\n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002J\017\020\003\032\b\022\004\022\0020\0050\004HÆ\001¨\006\006"}, d2 = {"Lai/grazie/license/LicenseAgreementInfo$Companion;", "", "()V", "serializer", "Lkotlinx/serialization/KSerializer;", "Lai/grazie/license/LicenseAgreementInfo;", "model-license"}) public static final class Companion { private Companion() {} @NotNull public final KSerializer<LicenseAgreementInfo> serializer() { return get$cachedSerializer(); } }
/*    */   @SerialName("base") @Serializable @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000D\n\002\030\002\n\002\030\002\n\000\n\002\020\b\n\000\n\002\020\016\n\002\b\002\n\002\030\002\n\002\b\t\n\002\020\013\n\000\n\002\020\000\n\002\b\003\n\002\020\002\n\002\b\002\n\002\030\002\n\000\n\002\030\002\n\002\b\004\b\b\030\000  2\0020\001:\002\037 B-\b\021\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005\022\b\020\006\032\004\030\0010\005\022\b\020\007\032\004\030\0010\b¢\006\002\020\tB\025\022\006\020\004\032\0020\005\022\006\020\006\032\0020\005¢\006\002\020\nJ\t\020\016\032\0020\005HÆ\003J\t\020\017\032\0020\005HÆ\003J\035\020\020\032\0020\0002\b\b\002\020\004\032\0020\0052\b\b\002\020\006\032\0020\005HÆ\001J\023\020\021\032\0020\0222\b\020\023\032\004\030\0010\024HÖ\003J\t\020\025\032\0020\003HÖ\001J\t\020\026\032\0020\005HÖ\001J&\020\027\032\0020\0302\006\020\031\032\0020\0002\006\020\032\032\0020\0332\006\020\034\032\0020\035HÁ\001¢\006\002\b\036R\024\020\004\032\0020\005X\004¢\006\b\n\000\032\004\b\013\020\fR\024\020\006\032\0020\005X\004¢\006\b\n\000\032\004\b\r\020\f¨\006!"}, d2 = {"Lai/grazie/license/LicenseAgreementInfo$Base;", "Lai/grazie/license/LicenseAgreementInfo;", "seen1", "", "id", "", "version", "serializationConstructorMarker", "Lkotlinx/serialization/internal/SerializationConstructorMarker;", "(ILjava/lang/String;Ljava/lang/String;Lkotlinx/serialization/internal/SerializationConstructorMarker;)V", "(Ljava/lang/String;Ljava/lang/String;)V", "getId", "()Ljava/lang/String;", "getVersion", "component1", "component2", "copy", "equals", "", "other", "", "hashCode", "toString", "write$Self", "", "self", "output", "Lkotlinx/serialization/encoding/CompositeEncoder;", "serialDesc", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "write$Self$model_license", "$serializer", "Companion", "model-license"}) public static final class Base extends LicenseAgreementInfo { @NotNull public static final Companion Companion = new Companion(null); @NotNull private final String id; @NotNull private final String version;
/*    */     @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN) @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/license/LicenseAgreementInfo.Base.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/license/LicenseAgreementInfo$Base;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-license"}) public static final class $serializer implements GeneratedSerializer<Base> { @NotNull
/* 20 */       public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[2]; arrayOfKSerializer[0] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[1] = (KSerializer)StringSerializer.INSTANCE; return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public LicenseAgreementInfo.Base deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; String str1 = null, str2 = null; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { str1 = compositeDecoder.decodeStringElement(serialDescriptor, 0); i |= 0x1; str2 = compositeDecoder.decodeStringElement(serialDescriptor, 1); i |= 0x2; } else { while (bool) { int j = compositeDecoder.decodeElementIndex(serialDescriptor); switch (j) { case -1: bool = false; continue;case 0: str1 = compositeDecoder.decodeStringElement(serialDescriptor, 0); i |= 0x1; continue;case 1: str2 = compositeDecoder.decodeStringElement(serialDescriptor, 1); i |= 0x2; continue; }  throw new UnknownFieldException(j); }  }  compositeDecoder.endStructure(serialDescriptor); return new LicenseAgreementInfo.Base(i, str1, str2, null); } public void serialize(@NotNull Encoder encoder, @NotNull LicenseAgreementInfo.Base value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); LicenseAgreementInfo.Base.write$Self$model_license(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("base", INSTANCE, 2); pluginGeneratedSerialDescriptor.addElement("id", false); pluginGeneratedSerialDescriptor.addElement("version", false); pluginGeneratedSerialDescriptor.pushClassAnnotation((Annotation)new LicenseAgreementInfo$Base$$serializer$annotationImpl$kotlinx_serialization_json_JsonClassDiscriminator$0("_type")); descriptor = pluginGeneratedSerialDescriptor; } } @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000\026\n\002\030\002\n\002\020\000\n\002\b\002\n\002\030\002\n\002\030\002\n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002J\017\020\003\032\b\022\004\022\0020\0050\004HÆ\001¨\006\006"}, d2 = {"Lai/grazie/license/LicenseAgreementInfo$Base$Companion;", "", "()V", "serializer", "Lkotlinx/serialization/KSerializer;", "Lai/grazie/license/LicenseAgreementInfo$Base;", "model-license"}) public static final class Companion { private Companion() {} @NotNull public final KSerializer<LicenseAgreementInfo.Base> serializer() { return (KSerializer<LicenseAgreementInfo.Base>)LicenseAgreementInfo.Base.$serializer.INSTANCE; }
/*    */        }
/*    */     @NotNull
/* 23 */     public String getId() { return this.id; } @NotNull
/* 24 */     public String getVersion() { return this.version; }
/* 25 */     @NotNull public final String component1() { return this.id; } @NotNull public final String component2() { return this.version; } @NotNull public final Base copy(@NotNull String id, @NotNull String version) { Intrinsics.checkNotNullParameter(id, "id"); Intrinsics.checkNotNullParameter(version, "version"); return new Base(id, version); } public Base(@NotNull String id, @NotNull String version) { super(null); this.id = id; this.version = version; } @NotNull public String toString() { return "Base(id=" + this.id + ", version=" + this.version + ")"; } public int hashCode() { result = this.id.hashCode(); return result * 31 + this.version.hashCode(); } public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof Base)) return false;  Base base = (Base)other; return !Intrinsics.areEqual(this.id, base.id) ? false : (!!Intrinsics.areEqual(this.version, base.version)); } }
/*    */    @SerialName("extended") @Serializable @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000D\n\002\030\002\n\002\030\002\n\000\n\002\020\b\n\000\n\002\020\016\n\002\b\003\n\002\030\002\n\002\b\013\n\002\020\013\n\000\n\002\020\000\n\002\b\003\n\002\020\002\n\002\b\002\n\002\030\002\n\000\n\002\030\002\n\002\b\004\b\b\030\000 #2\0020\001:\002\"#B7\b\021\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005\022\b\020\006\032\004\030\0010\005\022\b\020\007\032\004\030\0010\005\022\b\020\b\032\004\030\0010\t¢\006\002\020\nB\035\022\006\020\004\032\0020\005\022\006\020\006\032\0020\005\022\006\020\007\032\0020\005¢\006\002\020\013J\t\020\020\032\0020\005HÆ\003J\t\020\021\032\0020\005HÆ\003J\t\020\022\032\0020\005HÆ\003J'\020\023\032\0020\0002\b\b\002\020\004\032\0020\0052\b\b\002\020\006\032\0020\0052\b\b\002\020\007\032\0020\005HÆ\001J\023\020\024\032\0020\0252\b\020\026\032\004\030\0010\027HÖ\003J\t\020\030\032\0020\003HÖ\001J\t\020\031\032\0020\005HÖ\001J&\020\032\032\0020\0332\006\020\034\032\0020\0002\006\020\035\032\0020\0362\006\020\037\032\0020 HÁ\001¢\006\002\b!R\024\020\004\032\0020\005X\004¢\006\b\n\000\032\004\b\f\020\rR\021\020\007\032\0020\005¢\006\b\n\000\032\004\b\016\020\rR\024\020\006\032\0020\005X\004¢\006\b\n\000\032\004\b\017\020\r¨\006$"}, d2 = {"Lai/grazie/license/LicenseAgreementInfo$Extended;", "Lai/grazie/license/LicenseAgreementInfo;", "seen1", "", "id", "", "version", "url", "serializationConstructorMarker", "Lkotlinx/serialization/internal/SerializationConstructorMarker;", "(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlinx/serialization/internal/SerializationConstructorMarker;)V", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "getId", "()Ljava/lang/String;", "getUrl", "getVersion", "component1", "component2", "component3", "copy", "equals", "", "other", "", "hashCode", "toString", "write$Self", "", "self", "output", "Lkotlinx/serialization/encoding/CompositeEncoder;", "serialDesc", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "write$Self$model_license", "$serializer", "Companion", "model-license"}) public static final class Extended extends LicenseAgreementInfo {
/* 27 */     @NotNull public static final Companion Companion = new Companion(null); @NotNull private final String id; @NotNull private final String version; @NotNull private final String url; @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN) @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/license/LicenseAgreementInfo.Extended.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/license/LicenseAgreementInfo$Extended;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-license"}) public static final class $serializer implements GeneratedSerializer<Extended> { @NotNull public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[3]; arrayOfKSerializer[0] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[1] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[2] = (KSerializer)StringSerializer.INSTANCE; return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public LicenseAgreementInfo.Extended deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; String str1 = null, str2 = null, str3 = null; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { str1 = compositeDecoder.decodeStringElement(serialDescriptor, 0); i |= 0x1; str2 = compositeDecoder.decodeStringElement(serialDescriptor, 1); i |= 0x2; str3 = compositeDecoder.decodeStringElement(serialDescriptor, 2); i |= 0x4; } else { while (bool) { int j = compositeDecoder.decodeElementIndex(serialDescriptor); switch (j) { case -1: bool = false; continue;case 0: str1 = compositeDecoder.decodeStringElement(serialDescriptor, 0); i |= 0x1; continue;case 1: str2 = compositeDecoder.decodeStringElement(serialDescriptor, 1); i |= 0x2; continue;case 2: str3 = compositeDecoder.decodeStringElement(serialDescriptor, 2); i |= 0x4; continue; }  throw new UnknownFieldException(j); }  }  compositeDecoder.endStructure(serialDescriptor); return new LicenseAgreementInfo.Extended(i, str1, str2, str3, null); } public void serialize(@NotNull Encoder encoder, @NotNull LicenseAgreementInfo.Extended value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); LicenseAgreementInfo.Extended.write$Self$model_license(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("extended", INSTANCE, 3); pluginGeneratedSerialDescriptor.addElement("id", false); pluginGeneratedSerialDescriptor.addElement("version", false); pluginGeneratedSerialDescriptor.addElement("url", false); pluginGeneratedSerialDescriptor.pushClassAnnotation((Annotation)new LicenseAgreementInfo$Base$$serializer$annotationImpl$kotlinx_serialization_json_JsonClassDiscriminator$0("_type")); descriptor = pluginGeneratedSerialDescriptor; } } @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000\026\n\002\030\002\n\002\020\000\n\002\b\002\n\002\030\002\n\002\030\002\n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002J\017\020\003\032\b\022\004\022\0020\0050\004HÆ\001¨\006\006"}, d2 = {"Lai/grazie/license/LicenseAgreementInfo$Extended$Companion;", "", "()V", "serializer", "Lkotlinx/serialization/KSerializer;", "Lai/grazie/license/LicenseAgreementInfo$Extended;", "model-license"}) public static final class Companion { private Companion() {} @NotNull public final KSerializer<LicenseAgreementInfo.Extended> serializer() { return (KSerializer<LicenseAgreementInfo.Extended>)LicenseAgreementInfo.Extended.$serializer.INSTANCE; }
/*    */        }
/*    */     @NotNull
/* 30 */     public String getId() { return this.id; } @NotNull
/* 31 */     public String getVersion() { return this.version; } @NotNull
/* 32 */     public final String getUrl() { return this.url; } public Extended(@NotNull String id, @NotNull String version, @NotNull String url) {
/* 33 */       super(null);
/*    */       this.id = id;
/*    */       this.version = version;
/*    */       this.url = url;
/*    */     }
/*    */     
/*    */     @NotNull
/*    */     public final String component1() {
/*    */       return this.id;
/*    */     }
/*    */     
/*    */     @NotNull
/*    */     public final String component2() {
/*    */       return this.version;
/*    */     }
/*    */     
/*    */     @NotNull
/*    */     public final String component3() {
/*    */       return this.url;
/*    */     }
/*    */     
/*    */     @NotNull
/*    */     public final Extended copy(@NotNull String id, @NotNull String version, @NotNull String url) {
/*    */       Intrinsics.checkNotNullParameter(id, "id");
/*    */       Intrinsics.checkNotNullParameter(version, "version");
/*    */       Intrinsics.checkNotNullParameter(url, "url");
/*    */       return new Extended(id, version, url);
/*    */     }
/*    */     
/*    */     @NotNull
/*    */     public String toString() {
/*    */       return "Extended(id=" + this.id + ", version=" + this.version + ", url=" + this.url + ")";
/*    */     }
/*    */     
/*    */     public int hashCode() {
/*    */       result = this.id.hashCode();
/*    */       result = result * 31 + this.version.hashCode();
/*    */       return result * 31 + this.url.hashCode();
/*    */     }
/*    */     
/*    */     public boolean equals(@Nullable Object other) {
/*    */       if (this == other)
/*    */         return true; 
/*    */       if (!(other instanceof Extended))
/*    */         return false; 
/*    */       Extended extended = (Extended)other;
/*    */       return !Intrinsics.areEqual(this.id, extended.id) ? false : (!Intrinsics.areEqual(this.version, extended.version) ? false : (!!Intrinsics.areEqual(this.url, extended.url)));
/*    */     }
/*    */   }
/*    */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\model-license-jvm-0.4.32.jar!\ai\grazie\license\LicenseAgreementInfo.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */