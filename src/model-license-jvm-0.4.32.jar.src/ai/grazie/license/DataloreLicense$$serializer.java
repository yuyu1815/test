/*    */ package ai.grazie.license;
/*    */ 
/*    */ @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN)
/*    */ @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/license/DataloreLicense.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/license/DataloreLicense;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-license"})
/*    */ public final class $serializer implements GeneratedSerializer<DataloreLicense> {
/*    */   @NotNull
/*  7 */   public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[9]; arrayOfKSerializer[0] = (KSerializer)LicenseID.Serializer.INSTANCE; arrayOfKSerializer[1] = (KSerializer)LicenseType.Serializer.INSTANCE; arrayOfKSerializer[2] = (KSerializer)Timestamp.Serializer.INSTANCE; arrayOfKSerializer[3] = (KSerializer)Timestamp.Serializer.INSTANCE; arrayOfKSerializer[4] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[5] = (KSerializer)IntSerializer.INSTANCE; arrayOfKSerializer[6] = (KSerializer)BooleanSerializer.INSTANCE; arrayOfKSerializer[7] = (KSerializer)BooleanSerializer.INSTANCE; arrayOfKSerializer[8] = (KSerializer)BooleanSerializer.INSTANCE; return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public DataloreLicense deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; LicenseID licenseID = null; LicenseType licenseType = null; Timestamp timestamp1 = null, timestamp2 = null; String str = null; int j = 0; boolean bool1 = false, bool2 = false, bool3 = false; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { licenseID = (LicenseID)compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)LicenseID.Serializer.INSTANCE, licenseID); i |= 0x1; licenseType = (LicenseType)compositeDecoder.decodeSerializableElement(serialDescriptor, 1, (DeserializationStrategy)LicenseType.Serializer.INSTANCE, licenseType); i |= 0x2; timestamp1 = (Timestamp)compositeDecoder.decodeSerializableElement(serialDescriptor, 2, (DeserializationStrategy)Timestamp.Serializer.INSTANCE, timestamp1); i |= 0x4; timestamp2 = (Timestamp)compositeDecoder.decodeSerializableElement(serialDescriptor, 3, (DeserializationStrategy)Timestamp.Serializer.INSTANCE, timestamp2); i |= 0x8; str = compositeDecoder.decodeStringElement(serialDescriptor, 4); i |= 0x10; j = compositeDecoder.decodeIntElement(serialDescriptor, 5); i |= 0x20; bool1 = compositeDecoder.decodeBooleanElement(serialDescriptor, 6); i |= 0x40; bool2 = compositeDecoder.decodeBooleanElement(serialDescriptor, 7); i |= 0x80; bool3 = compositeDecoder.decodeBooleanElement(serialDescriptor, 8); i |= 0x100; } else { while (bool) { int k = compositeDecoder.decodeElementIndex(serialDescriptor); switch (k) { case -1: bool = false; continue;case 0: licenseID = (LicenseID)compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)LicenseID.Serializer.INSTANCE, licenseID); i |= 0x1; continue;case 1: licenseType = (LicenseType)compositeDecoder.decodeSerializableElement(serialDescriptor, 1, (DeserializationStrategy)LicenseType.Serializer.INSTANCE, licenseType); i |= 0x2; continue;case 2: timestamp1 = (Timestamp)compositeDecoder.decodeSerializableElement(serialDescriptor, 2, (DeserializationStrategy)Timestamp.Serializer.INSTANCE, timestamp1); i |= 0x4; continue;case 3: timestamp2 = (Timestamp)compositeDecoder.decodeSerializableElement(serialDescriptor, 3, (DeserializationStrategy)Timestamp.Serializer.INSTANCE, timestamp2); i |= 0x8; continue;case 4: str = compositeDecoder.decodeStringElement(serialDescriptor, 4); i |= 0x10; continue;case 5: j = compositeDecoder.decodeIntElement(serialDescriptor, 5); i |= 0x20; continue;case 6: bool1 = compositeDecoder.decodeBooleanElement(serialDescriptor, 6); i |= 0x40; continue;case 7: bool2 = compositeDecoder.decodeBooleanElement(serialDescriptor, 7); i |= 0x80; continue;case 8: bool3 = compositeDecoder.decodeBooleanElement(serialDescriptor, 8); i |= 0x100; continue; }  throw new UnknownFieldException(k); }  }  compositeDecoder.endStructure(serialDescriptor); return new DataloreLicense(i, licenseID, licenseType, timestamp1, timestamp2, str, j, bool1, bool2, bool3, null); } public void serialize(@NotNull Encoder encoder, @NotNull DataloreLicense value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); DataloreLicense.write$Self$model_license(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("ai.grazie.license.DataloreLicense", INSTANCE, 9); pluginGeneratedSerialDescriptor.addElement("licenseId", false); pluginGeneratedSerialDescriptor.addElement("type", false); pluginGeneratedSerialDescriptor.addElement("since", false); pluginGeneratedSerialDescriptor.addElement("till", false); pluginGeneratedSerialDescriptor.addElement("licenseName", false); pluginGeneratedSerialDescriptor.addElement("seats", false); pluginGeneratedSerialDescriptor.addElement("cancelled", false); pluginGeneratedSerialDescriptor.addElement("suspended", false); pluginGeneratedSerialDescriptor.addElement("outdated", false); pluginGeneratedSerialDescriptor.pushClassAnnotation(
/*    */ 
/*    */         
/* 10 */         (Annotation)new DataloreLicense$$serializer$annotationImpl$kotlinx_serialization_json_JsonClassDiscriminator$0(
/* 11 */           "_type"));
/*    */     descriptor = pluginGeneratedSerialDescriptor; }
/*    */ 
/*    */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\model-license-jvm-0.4.32.jar!\ai\grazie\license\DataloreLicense$$serializer.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */