/*      */ package androidx.collection;
/*      */ 
/*      */ import androidx.collection.internal.ContainerHelpersKt;
/*      */ import kotlin.Metadata;
/*      */ import kotlin.PublishedApi;
/*      */ import kotlin.jvm.JvmField;
/*      */ import kotlin.jvm.JvmOverloads;
/*      */ import kotlin.jvm.functions.Function0;
/*      */ import kotlin.jvm.functions.Function1;
/*      */ import kotlin.jvm.functions.Function2;
/*      */ import kotlin.jvm.internal.DefaultConstructorMarker;
/*      */ import kotlin.jvm.internal.Intrinsics;
/*      */ import kotlin.jvm.internal.SourceDebugExtension;
/*      */ import org.jetbrains.annotations.NotNull;
/*      */ import org.jetbrains.annotations.Nullable;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ @Metadata(mv = {1, 8, 0}, k = 1, xi = 48, d1 = {"\000n\n\002\030\002\n\000\n\002\020\000\n\002\b\002\n\002\020\b\n\002\b\007\n\002\020\025\n\002\b\002\n\002\020\026\n\002\b\004\n\002\020\021\n\002\b\003\n\002\020\013\n\000\n\002\030\002\n\002\b\r\n\002\020\002\n\000\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\t\n\002\030\002\n\002\b\005\n\002\020\016\n\000\n\002\020\r\n\002\b\007\n\002\030\002\n\000\b6\030\000*\004\b\000\020\0012\0020\002B\007\b\004¢\006\002\020\003J&\020\030\032\0020\0312\030\020\032\032\024\022\004\022\0020\005\022\004\022\0028\000\022\004\022\0020\0310\033H\bø\001\000J\006\020\034\032\0020\031J&\020\034\032\0020\0312\030\020\032\032\024\022\004\022\0020\005\022\004\022\0028\000\022\004\022\0020\0310\033H\bø\001\000J\021\020\035\032\0020\0312\006\020\036\032\0020\005H\002J\016\020\037\032\0020\0312\006\020\036\032\0020\005J\023\020 \032\0020\0312\006\020!\032\0028\000¢\006\002\020\"J\006\020#\032\0020\005J&\020#\032\0020\0052\030\020\032\032\024\022\004\022\0020\005\022\004\022\0028\000\022\004\022\0020\0310\033H\bø\001\000J\023\020$\032\0020\0312\b\020%\032\004\030\0010\002H\002J\026\020&\032\0020\0052\006\020\036\032\0020\005H\b¢\006\002\b'JD\020(\032\0020)26\020*\0322\022\023\022\0210\005¢\006\f\b+\022\b\b,\022\004\b\b(\036\022\023\022\0218\000¢\006\f\b+\022\b\b,\022\004\b\b(!\022\004\022\0020)0\033H\bø\001\000J/\020-\032\0020)2!\020*\032\035\022\023\022\0210\005¢\006\f\b+\022\b\b,\022\004\b\b(/\022\004\022\0020)0.H\bø\001\000J/\0200\032\0020)2!\020*\032\035\022\023\022\0210\005¢\006\f\b+\022\b\b,\022\004\b\b(\036\022\004\022\0020)0.H\bø\001\000J/\0201\032\0020)2!\020*\032\035\022\023\022\0218\000¢\006\f\b+\022\b\b,\022\004\b\b(!\022\004\022\0020)0.H\bø\001\000J\030\0202\032\004\030\0018\0002\006\020\036\032\0020\005H\002¢\006\002\0203J\033\0204\032\0028\0002\006\020\036\032\0020\0052\006\0205\032\0028\000¢\006\002\0206J'\0207\032\0028\0002\006\020\036\032\0020\0052\f\0205\032\b\022\004\022\0028\00008H\bø\001\000¢\006\002\0209J\b\020:\032\0020\005H\026J\006\020;\032\0020\031J\006\020<\032\0020\031J:\020=\032\0020>2\b\b\002\020?\032\0020@2\b\b\002\020A\032\0020@2\b\b\002\020B\032\0020@2\b\b\002\020C\032\0020\0052\b\b\002\020D\032\0020@H\007Jx\020=\032\0020>2\b\b\002\020?\032\0020@2\b\b\002\020A\032\0020@2\b\b\002\020B\032\0020@2\b\b\002\020C\032\0020\0052\b\b\002\020D\032\0020@28\b\004\020E\0322\022\023\022\0210\005¢\006\f\b+\022\b\b,\022\004\b\b(\036\022\023\022\0218\000¢\006\f\b+\022\b\b,\022\004\b\b(!\022\004\022\0020@0\033H\bø\001\000J\006\020F\032\0020\031J\b\020G\032\0020>H\026R\030\020\004\032\0020\0058\000@\000X\016¢\006\b\n\000\022\004\b\006\020\003R\030\020\007\032\0020\0058\000@\000X\016¢\006\b\n\000\022\004\b\b\020\003R\021\020\t\032\0020\0058F¢\006\006\032\004\b\n\020\013R\030\020\f\032\0020\r8\000@\000X\016¢\006\b\n\000\022\004\b\016\020\003R\030\020\017\032\0020\0208\000@\000X\016¢\006\b\n\000\022\004\b\021\020\003R\021\020\022\032\0020\0058F¢\006\006\032\004\b\023\020\013R\"\020\024\032\n\022\006\022\004\030\0010\0020\0258\000@\000X\016¢\006\n\n\002\020\027\022\004\b\026\020\003\001\001H\002\007\n\005\b20\001¨\006I"}, d2 = {"Landroidx/collection/IntObjectMap;", "V", "", "()V", "_capacity", "", "get_capacity$collection$annotations", "_size", "get_size$collection$annotations", "capacity", "getCapacity", "()I", "keys", "", "getKeys$annotations", "metadata", "", "getMetadata$annotations", "size", "getSize", "values", "", "getValues$annotations", "[Ljava/lang/Object;", "all", "", "predicate", "Lkotlin/Function2;", "any", "contains", "key", "containsKey", "containsValue", "value", "(Ljava/lang/Object;)Z", "count", "equals", "other", "findKeyIndex", "findKeyIndex$collection", "forEach", "", "block", "Lkotlin/ParameterName;", "name", "forEachIndexed", "Lkotlin/Function1;", "index", "forEachKey", "forEachValue", "get", "(I)Ljava/lang/Object;", "getOrDefault", "defaultValue", "(ILjava/lang/Object;)Ljava/lang/Object;", "getOrElse", "Lkotlin/Function0;", "(ILkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "hashCode", "isEmpty", "isNotEmpty", "joinToString", "", "separator", "", "prefix", "postfix", "limit", "truncated", "transform", "none", "toString", "Landroidx/collection/MutableIntObjectMap;", "collection"})
/*      */ @SourceDebugExtension({"SMAP\nIntObjectMap.kt\nKotlin\n*S Kotlin\n*F\n+ 1 IntObjectMap.kt\nandroidx/collection/IntObjectMap\n+ 2 IntSet.kt\nandroidx/collection/IntSetKt\n+ 3 ScatterMap.kt\nandroidx/collection/ScatterMapKt\n*L\n1#1,1018:1\n619#1:1019\n620#1:1023\n622#1,2:1025\n624#1,4:1028\n628#1:1035\n629#1:1039\n630#1:1041\n631#1,4:1044\n637#1:1049\n638#1,8:1051\n619#1:1059\n620#1:1063\n622#1,2:1065\n624#1,4:1068\n628#1:1075\n629#1:1079\n630#1:1081\n631#1,4:1084\n637#1:1089\n638#1,8:1091\n354#1,6:1101\n364#1,3:1108\n367#1,9:1112\n354#1,6:1121\n364#1,3:1128\n367#1,9:1132\n354#1,6:1141\n364#1,3:1148\n367#1,9:1152\n382#1,4:1161\n354#1,6:1165\n364#1,3:1172\n367#1,2:1176\n387#1,2:1178\n370#1,6:1180\n389#1:1186\n382#1,4:1187\n354#1,6:1191\n364#1,3:1198\n367#1,2:1202\n387#1,2:1204\n370#1,6:1206\n389#1:1212\n382#1,4:1213\n354#1,6:1217\n364#1,3:1224\n367#1,2:1228\n387#1,2:1230\n370#1,6:1232\n389#1:1238\n619#1:1239\n620#1:1243\n622#1,2:1245\n624#1,4:1248\n628#1:1255\n629#1:1259\n630#1:1261\n631#1,4:1264\n637#1:1269\n638#1,8:1271\n619#1:1279\n620#1:1283\n622#1,2:1285\n624#1,4:1288\n628#1:1295\n629#1:1299\n630#1:1301\n631#1,4:1304\n637#1:1309\n638#1,8:1311\n408#1,3:1319\n354#1,6:1322\n364#1,3:1329\n367#1,2:1333\n412#1,2:1335\n370#1,6:1337\n414#1:1343\n382#1,4:1344\n354#1,6:1348\n364#1,3:1355\n367#1,2:1359\n387#1,2:1361\n370#1,6:1363\n389#1:1369\n382#1,4:1370\n354#1,6:1374\n364#1,3:1381\n367#1,2:1385\n387#1,2:1387\n370#1,6:1389\n389#1:1395\n382#1,4:1396\n354#1,6:1400\n364#1,3:1407\n367#1,2:1411\n387#1,2:1413\n370#1,6:1415\n389#1:1421\n382#1,4:1422\n354#1,6:1426\n364#1,3:1433\n367#1,2:1437\n387#1,2:1439\n370#1,6:1441\n389#1:1447\n382#1,4:1448\n354#1,6:1452\n364#1,3:1459\n367#1,2:1463\n387#1,2:1465\n370#1,6:1467\n389#1:1473\n382#1,4:1474\n354#1,6:1478\n364#1,3:1485\n367#1,2:1489\n387#1,2:1491\n370#1,6:1493\n389#1:1499\n518#1,11:1516\n382#1,4:1527\n354#1,6:1531\n364#1,3:1538\n367#1,2:1542\n387#1:1544\n529#1,10:1545\n388#1:1555\n370#1,6:1556\n389#1:1562\n539#1,2:1563\n518#1,11:1565\n382#1,4:1576\n354#1,6:1580\n364#1,3:1587\n367#1,2:1591\n387#1:1593\n529#1,10:1594\n388#1:1604\n370#1,6:1605\n389#1:1611\n539#1,2:1612\n518#1,11:1614\n382#1,4:1625\n354#1,6:1629\n364#1,3:1636\n367#1,2:1640\n387#1:1642\n529#1,10:1643\n388#1:1653\n370#1,6:1654\n389#1:1660\n539#1,2:1661\n518#1,11:1663\n382#1,4:1674\n354#1,6:1678\n364#1,3:1685\n367#1,2:1689\n387#1:1691\n529#1,10:1692\n388#1:1702\n370#1,6:1703\n389#1:1709\n539#1,2:1710\n518#1,11:1712\n382#1,4:1723\n354#1,6:1727\n364#1,3:1734\n367#1,2:1738\n387#1:1740\n529#1,10:1741\n388#1:1751\n370#1,6:1752\n389#1:1758\n539#1,2:1759\n833#2,3:1020\n833#2,3:1060\n833#2,3:1240\n833#2,3:1280\n833#2,3:1500\n1603#3:1024\n1599#3:1027\n1779#3,3:1032\n1793#3,3:1036\n1717#3:1040\n1705#3:1042\n1699#3:1043\n1712#3:1048\n1802#3:1050\n1603#3:1064\n1599#3:1067\n1779#3,3:1072\n1793#3,3:1076\n1717#3:1080\n1705#3:1082\n1699#3:1083\n1712#3:1088\n1802#3:1090\n1810#3:1099\n1672#3:1100\n1810#3:1107\n1672#3:1111\n1810#3:1127\n1672#3:1131\n1810#3:1147\n1672#3:1151\n1810#3:1171\n1672#3:1175\n1810#3:1197\n1672#3:1201\n1810#3:1223\n1672#3:1227\n1603#3:1244\n1599#3:1247\n1779#3,3:1252\n1793#3,3:1256\n1717#3:1260\n1705#3:1262\n1699#3:1263\n1712#3:1268\n1802#3:1270\n1603#3:1284\n1599#3:1287\n1779#3,3:1292\n1793#3,3:1296\n1717#3:1300\n1705#3:1302\n1699#3:1303\n1712#3:1308\n1802#3:1310\n1810#3:1328\n1672#3:1332\n1810#3:1354\n1672#3:1358\n1810#3:1380\n1672#3:1384\n1810#3:1406\n1672#3:1410\n1810#3:1432\n1672#3:1436\n1810#3:1458\n1672#3:1462\n1810#3:1484\n1672#3:1488\n1603#3:1503\n1599#3:1504\n1779#3,3:1505\n1793#3,3:1508\n1717#3:1511\n1705#3:1512\n1699#3:1513\n1712#3:1514\n1802#3:1515\n1810#3:1537\n1672#3:1541\n1810#3:1586\n1672#3:1590\n1810#3:1635\n1672#3:1639\n1810#3:1684\n1672#3:1688\n1810#3:1733\n1672#3:1737\n*S KotlinDebug\n*F\n+ 1 IntObjectMap.kt\nandroidx/collection/IntObjectMap\n*L\n321#1:1019\n321#1:1023\n321#1:1025,2\n321#1:1028,4\n321#1:1035\n321#1:1039\n321#1:1041\n321#1:1044,4\n321#1:1049\n321#1:1051,8\n331#1:1059\n331#1:1063\n331#1:1065,2\n331#1:1068,4\n331#1:1075\n331#1:1079\n331#1:1081\n331#1:1084,4\n331#1:1089\n331#1:1091,8\n385#1:1101,6\n385#1:1108,3\n385#1:1112,9\n398#1:1121,6\n398#1:1128,3\n398#1:1132,9\n410#1:1141,6\n410#1:1148,3\n410#1:1152,9\n420#1:1161,4\n420#1:1165,6\n420#1:1172,3\n420#1:1176,2\n420#1:1178,2\n420#1:1180,6\n420#1:1186\n430#1:1187,4\n430#1:1191,6\n430#1:1198,3\n430#1:1202,2\n430#1:1204,2\n430#1:1206,6\n430#1:1212\n446#1:1213,4\n446#1:1217,6\n446#1:1224,3\n446#1:1228,2\n446#1:1230,2\n446#1:1232,6\n446#1:1238\n456#1:1239\n456#1:1243\n456#1:1245,2\n456#1:1248,4\n456#1:1255\n456#1:1259\n456#1:1261\n456#1:1264,4\n456#1:1269\n456#1:1271,8\n462#1:1279\n462#1:1283\n462#1:1285,2\n462#1:1288,4\n462#1:1295\n462#1:1299\n462#1:1301\n462#1:1304,4\n462#1:1309\n462#1:1311,8\n469#1:1319,3\n469#1:1322,6\n469#1:1329,3\n469#1:1333,2\n469#1:1335,2\n469#1:1337,6\n469#1:1343\n493#1:1344,4\n493#1:1348,6\n493#1:1355,3\n493#1:1359,2\n493#1:1361,2\n493#1:1363,6\n493#1:1369\n528#1:1370,4\n528#1:1374,6\n528#1:1381,3\n528#1:1385,2\n528#1:1387,2\n528#1:1389,6\n528#1:1395\n528#1:1396,4\n528#1:1400,6\n528#1:1407,3\n528#1:1411,2\n528#1:1413,2\n528#1:1415,6\n528#1:1421\n549#1:1422,4\n549#1:1426,6\n549#1:1433,3\n549#1:1437,2\n549#1:1439,2\n549#1:1441,6\n549#1:1447\n575#1:1448,4\n575#1:1452,6\n575#1:1459,3\n575#1:1463,2\n575#1:1465,2\n575#1:1467,6\n575#1:1473\n601#1:1474,4\n601#1:1478,6\n601#1:1485,3\n601#1:1489,2\n601#1:1491,2\n601#1:1493,6\n601#1:1499\n-1#1:1516,11\n-1#1:1527,4\n-1#1:1531,6\n-1#1:1538,3\n-1#1:1542,2\n-1#1:1544\n-1#1:1545,10\n-1#1:1555\n-1#1:1556,6\n-1#1:1562\n-1#1:1563,2\n-1#1:1565,11\n-1#1:1576,4\n-1#1:1580,6\n-1#1:1587,3\n-1#1:1591,2\n-1#1:1593\n-1#1:1594,10\n-1#1:1604\n-1#1:1605,6\n-1#1:1611\n-1#1:1612,2\n-1#1:1614,11\n-1#1:1625,4\n-1#1:1629,6\n-1#1:1636,3\n-1#1:1640,2\n-1#1:1642\n-1#1:1643,10\n-1#1:1653\n-1#1:1654,6\n-1#1:1660\n-1#1:1661,2\n-1#1:1663,11\n-1#1:1674,4\n-1#1:1678,6\n-1#1:1685,3\n-1#1:1689,2\n-1#1:1691\n-1#1:1692,10\n-1#1:1702\n-1#1:1703,6\n-1#1:1709\n-1#1:1710,2\n-1#1:1712,11\n-1#1:1723,4\n-1#1:1727,6\n-1#1:1734,3\n-1#1:1738,2\n-1#1:1740\n-1#1:1741,10\n-1#1:1751\n-1#1:1752,6\n-1#1:1758\n-1#1:1759,2\n321#1:1020,3\n331#1:1060,3\n456#1:1240,3\n462#1:1280,3\n619#1:1500,3\n321#1:1024\n321#1:1027\n321#1:1032,3\n321#1:1036,3\n321#1:1040\n321#1:1042\n321#1:1043\n321#1:1048\n321#1:1050\n331#1:1064\n331#1:1067\n331#1:1072,3\n331#1:1076,3\n331#1:1080\n331#1:1082\n331#1:1083\n331#1:1088\n331#1:1090\n359#1:1099\n366#1:1100\n385#1:1107\n385#1:1111\n398#1:1127\n398#1:1131\n410#1:1147\n410#1:1151\n420#1:1171\n420#1:1175\n430#1:1197\n430#1:1201\n446#1:1223\n446#1:1227\n456#1:1244\n456#1:1247\n456#1:1252,3\n456#1:1256,3\n456#1:1260\n456#1:1262\n456#1:1263\n456#1:1268\n456#1:1270\n462#1:1284\n462#1:1287\n462#1:1292,3\n462#1:1296,3\n462#1:1300\n462#1:1302\n462#1:1303\n462#1:1308\n462#1:1310\n469#1:1328\n469#1:1332\n493#1:1354\n493#1:1358\n528#1:1380\n528#1:1384\n528#1:1406\n528#1:1410\n549#1:1432\n549#1:1436\n575#1:1458\n575#1:1462\n601#1:1484\n601#1:1488\n620#1:1503\n623#1:1504\n627#1:1505,3\n628#1:1508,3\n629#1:1511\n630#1:1512\n630#1:1513\n634#1:1514\n637#1:1515\n-1#1:1537\n-1#1:1541\n-1#1:1586\n-1#1:1590\n-1#1:1635\n-1#1:1639\n-1#1:1684\n-1#1:1688\n-1#1:1733\n-1#1:1737\n*E\n"})
/*      */ public abstract class IntObjectMap<V>
/*      */ {
/*      */   @JvmField
/*      */   @NotNull
/*  261 */   public long[] metadata = ScatterMapKt.EmptyGroup;
/*      */   
/*      */   @JvmField
/*      */   @NotNull
/*  265 */   public int[] keys = IntSetKt.getEmptyIntArray();
/*      */   
/*      */   @JvmField
/*      */   @NotNull
/*  269 */   public Object[] values = ContainerHelpersKt.EMPTY_OBJECTS;
/*      */ 
/*      */   
/*      */   @JvmField
/*      */   public int _capacity;
/*      */ 
/*      */   
/*      */   @JvmField
/*      */   public int _size;
/*      */ 
/*      */ 
/*      */   
/*      */   public final int getCapacity() {
/*  282 */     return this._capacity;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final int getSize() {
/*  294 */     return this._size;
/*      */   }
/*      */ 
/*      */   
/*      */   public final boolean any() {
/*  299 */     return (this._size != 0);
/*      */   }
/*      */ 
/*      */   
/*      */   public final boolean none() {
/*  304 */     return (this._size == 0);
/*      */   }
/*      */ 
/*      */   
/*      */   public final boolean isEmpty() {
/*  309 */     return (this._size == 0);
/*      */   }
/*      */ 
/*      */   
/*      */   public final boolean isNotEmpty() {
/*  314 */     return (this._size != 0);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   @Nullable
/*      */   public final V get(int key) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: astore_3
/*      */     //   2: iconst_0
/*      */     //   3: istore #4
/*      */     //   5: iconst_0
/*      */     //   6: istore #5
/*      */     //   8: iload_1
/*      */     //   9: invokestatic hashCode : (I)I
/*      */     //   12: ldc -862048943
/*      */     //   14: imul
/*      */     //   15: istore #6
/*      */     //   17: iload #6
/*      */     //   19: iload #6
/*      */     //   21: bipush #16
/*      */     //   23: ishl
/*      */     //   24: ixor
/*      */     //   25: istore #7
/*      */     //   27: iconst_0
/*      */     //   28: istore #6
/*      */     //   30: iload #7
/*      */     //   32: bipush #127
/*      */     //   34: iand
/*      */     //   35: istore #5
/*      */     //   37: aload_3
/*      */     //   38: getfield _capacity : I
/*      */     //   41: istore #6
/*      */     //   43: iconst_0
/*      */     //   44: istore #8
/*      */     //   46: iload #7
/*      */     //   48: bipush #7
/*      */     //   50: iushr
/*      */     //   51: iload #6
/*      */     //   53: iand
/*      */     //   54: istore #9
/*      */     //   56: iconst_0
/*      */     //   57: istore #8
/*      */     //   59: nop
/*      */     //   60: aload_3
/*      */     //   61: getfield metadata : [J
/*      */     //   64: astore #10
/*      */     //   66: iconst_0
/*      */     //   67: istore #11
/*      */     //   69: iload #9
/*      */     //   71: iconst_3
/*      */     //   72: ishr
/*      */     //   73: istore #12
/*      */     //   75: iload #9
/*      */     //   77: bipush #7
/*      */     //   79: iand
/*      */     //   80: iconst_3
/*      */     //   81: ishl
/*      */     //   82: istore #13
/*      */     //   84: aload #10
/*      */     //   86: iload #12
/*      */     //   88: laload
/*      */     //   89: iload #13
/*      */     //   91: lushr
/*      */     //   92: aload #10
/*      */     //   94: iload #12
/*      */     //   96: iconst_1
/*      */     //   97: iadd
/*      */     //   98: laload
/*      */     //   99: bipush #64
/*      */     //   101: iload #13
/*      */     //   103: isub
/*      */     //   104: lshl
/*      */     //   105: iload #13
/*      */     //   107: i2l
/*      */     //   108: lneg
/*      */     //   109: bipush #63
/*      */     //   111: lshr
/*      */     //   112: land
/*      */     //   113: lor
/*      */     //   114: lstore #14
/*      */     //   116: lload #14
/*      */     //   118: lstore #16
/*      */     //   120: iconst_0
/*      */     //   121: istore #18
/*      */     //   123: lload #16
/*      */     //   125: ldc2_w 72340172838076673
/*      */     //   128: iload #5
/*      */     //   130: i2l
/*      */     //   131: lmul
/*      */     //   132: lxor
/*      */     //   133: lstore #19
/*      */     //   135: lload #19
/*      */     //   137: ldc2_w 72340172838076673
/*      */     //   140: lsub
/*      */     //   141: lload #19
/*      */     //   143: ldc2_w -1
/*      */     //   146: lxor
/*      */     //   147: land
/*      */     //   148: ldc2_w -9187201950435737472
/*      */     //   151: land
/*      */     //   152: lstore #21
/*      */     //   154: lload #21
/*      */     //   156: lstore #16
/*      */     //   158: iconst_0
/*      */     //   159: istore #18
/*      */     //   161: lload #16
/*      */     //   163: lconst_0
/*      */     //   164: lcmp
/*      */     //   165: ifeq -> 172
/*      */     //   168: iconst_1
/*      */     //   169: goto -> 173
/*      */     //   172: iconst_0
/*      */     //   173: ifeq -> 241
/*      */     //   176: iload #9
/*      */     //   178: lload #21
/*      */     //   180: lstore #23
/*      */     //   182: iconst_0
/*      */     //   183: istore #25
/*      */     //   185: lload #23
/*      */     //   187: lstore #26
/*      */     //   189: iconst_0
/*      */     //   190: istore #28
/*      */     //   192: lload #26
/*      */     //   194: invokestatic numberOfTrailingZeros : (J)I
/*      */     //   197: iconst_3
/*      */     //   198: ishr
/*      */     //   199: nop
/*      */     //   200: iadd
/*      */     //   201: iload #6
/*      */     //   203: iand
/*      */     //   204: istore #12
/*      */     //   206: aload_3
/*      */     //   207: getfield keys : [I
/*      */     //   210: iload #12
/*      */     //   212: iaload
/*      */     //   213: iload_1
/*      */     //   214: if_icmpne -> 222
/*      */     //   217: iload #12
/*      */     //   219: goto -> 290
/*      */     //   222: lload #21
/*      */     //   224: lstore #23
/*      */     //   226: iconst_0
/*      */     //   227: istore #25
/*      */     //   229: lload #23
/*      */     //   231: lload #23
/*      */     //   233: lconst_1
/*      */     //   234: lsub
/*      */     //   235: land
/*      */     //   236: lstore #21
/*      */     //   238: goto -> 154
/*      */     //   241: lload #14
/*      */     //   243: lstore #16
/*      */     //   245: iconst_0
/*      */     //   246: istore #18
/*      */     //   248: lload #16
/*      */     //   250: lload #16
/*      */     //   252: ldc2_w -1
/*      */     //   255: lxor
/*      */     //   256: bipush #6
/*      */     //   258: lshl
/*      */     //   259: land
/*      */     //   260: ldc2_w -9187201950435737472
/*      */     //   263: land
/*      */     //   264: lconst_0
/*      */     //   265: lcmp
/*      */     //   266: ifeq -> 272
/*      */     //   269: goto -> 289
/*      */     //   272: iinc #8, 8
/*      */     //   275: nop
/*      */     //   276: iload #9
/*      */     //   278: iload #8
/*      */     //   280: iadd
/*      */     //   281: iload #6
/*      */     //   283: iand
/*      */     //   284: istore #9
/*      */     //   286: goto -> 59
/*      */     //   289: iconst_m1
/*      */     //   290: istore_2
/*      */     //   291: iload_2
/*      */     //   292: iflt -> 304
/*      */     //   295: aload_0
/*      */     //   296: getfield values : [Ljava/lang/Object;
/*      */     //   299: iload_2
/*      */     //   300: aaload
/*      */     //   301: goto -> 305
/*      */     //   304: aconst_null
/*      */     //   305: areturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #321	-> 0
/*      */     //   #1019	-> 5
/*      */     //   #1020	-> 8
/*      */     //   #1022	-> 17
/*      */     //   #1019	-> 25
/*      */     //   #1023	-> 27
/*      */     //   #1024	-> 30
/*      */     //   #1023	-> 35
/*      */     //   #1025	-> 37
/*      */     //   #1026	-> 43
/*      */     //   #1027	-> 46
/*      */     //   #1026	-> 51
/*      */     //   #1028	-> 56
/*      */     //   #1030	-> 59
/*      */     //   #1031	-> 60
/*      */     //   #1032	-> 69
/*      */     //   #1033	-> 75
/*      */     //   #1034	-> 84
/*      */     //   #1031	-> 114
/*      */     //   #1035	-> 116
/*      */     //   #1036	-> 123
/*      */     //   #1038	-> 135
/*      */     //   #1035	-> 152
/*      */     //   #1039	-> 154
/*      */     //   #1040	-> 161
/*      */     //   #1041	-> 176
/*      */     //   #1042	-> 185
/*      */     //   #1043	-> 192
/*      */     //   #1043	-> 197
/*      */     //   #1042	-> 199
/*      */     //   #1041	-> 200
/*      */     //   #1044	-> 206
/*      */     //   #1045	-> 217
/*      */     //   #1047	-> 222
/*      */     //   #1048	-> 229
/*      */     //   #1047	-> 236
/*      */     //   #1049	-> 241
/*      */     //   #1050	-> 248
/*      */     //   #1049	-> 264
/*      */     //   #1051	-> 269
/*      */     //   #1054	-> 275
/*      */     //   #1055	-> 276
/*      */     //   #1058	-> 289
/*      */     //   #321	-> 290
/*      */     //   #323	-> 291
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   8	17	5	$i$f$hash	I
/*      */     //   17	8	6	hash$iv$iv	I
/*      */     //   30	5	6	$i$f$h2	I
/*      */     //   46	5	8	$i$f$h1	I
/*      */     //   69	45	11	$i$f$group	I
/*      */     //   75	39	12	i$iv$iv	I
/*      */     //   84	30	13	b$iv$iv	I
/*      */     //   66	48	10	metadata$iv$iv	[J
/*      */     //   123	29	18	$i$f$match	I
/*      */     //   135	17	19	x$iv$iv	J
/*      */     //   120	32	16	$this$match$iv$iv	J
/*      */     //   161	12	18	$i$f$hasNext	I
/*      */     //   158	15	16	$this$hasNext$iv$iv	J
/*      */     //   192	7	28	$i$f$lowestBitSet	I
/*      */     //   189	10	26	$this$lowestBitSet$iv$iv$iv	J
/*      */     //   185	15	25	$i$f$get	I
/*      */     //   182	18	23	$this$get$iv$iv	J
/*      */     //   229	7	25	$i$f$next	I
/*      */     //   226	10	23	$this$next$iv$iv	J
/*      */     //   206	32	12	index$iv	I
/*      */     //   248	16	18	$i$f$maskEmpty	I
/*      */     //   245	19	16	$this$maskEmpty$iv$iv	J
/*      */     //   116	170	14	g$iv	J
/*      */     //   154	132	21	m$iv	J
/*      */     //   5	285	4	$i$f$findKeyIndex$collection	I
/*      */     //   27	263	7	hash$iv	I
/*      */     //   37	253	5	hash2$iv	I
/*      */     //   43	247	6	probeMask$iv	I
/*      */     //   56	234	9	probeOffset$iv	I
/*      */     //   59	231	8	probeIndex$iv	I
/*      */     //   2	288	3	this_$iv	Landroidx/collection/IntObjectMap;
/*      */     //   291	15	2	index	I
/*      */     //   0	306	0	this	Landroidx/collection/IntObjectMap;
/*      */     //   0	306	1	key	I
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final V getOrDefault(int key, Object defaultValue) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: astore #4
/*      */     //   3: iconst_0
/*      */     //   4: istore #5
/*      */     //   6: iconst_0
/*      */     //   7: istore #6
/*      */     //   9: iload_1
/*      */     //   10: invokestatic hashCode : (I)I
/*      */     //   13: ldc -862048943
/*      */     //   15: imul
/*      */     //   16: istore #7
/*      */     //   18: iload #7
/*      */     //   20: iload #7
/*      */     //   22: bipush #16
/*      */     //   24: ishl
/*      */     //   25: ixor
/*      */     //   26: istore #8
/*      */     //   28: iconst_0
/*      */     //   29: istore #7
/*      */     //   31: iload #8
/*      */     //   33: bipush #127
/*      */     //   35: iand
/*      */     //   36: istore #6
/*      */     //   38: aload #4
/*      */     //   40: getfield _capacity : I
/*      */     //   43: istore #7
/*      */     //   45: iconst_0
/*      */     //   46: istore #9
/*      */     //   48: iload #8
/*      */     //   50: bipush #7
/*      */     //   52: iushr
/*      */     //   53: iload #7
/*      */     //   55: iand
/*      */     //   56: istore #10
/*      */     //   58: iconst_0
/*      */     //   59: istore #9
/*      */     //   61: nop
/*      */     //   62: aload #4
/*      */     //   64: getfield metadata : [J
/*      */     //   67: astore #11
/*      */     //   69: iconst_0
/*      */     //   70: istore #12
/*      */     //   72: iload #10
/*      */     //   74: iconst_3
/*      */     //   75: ishr
/*      */     //   76: istore #13
/*      */     //   78: iload #10
/*      */     //   80: bipush #7
/*      */     //   82: iand
/*      */     //   83: iconst_3
/*      */     //   84: ishl
/*      */     //   85: istore #14
/*      */     //   87: aload #11
/*      */     //   89: iload #13
/*      */     //   91: laload
/*      */     //   92: iload #14
/*      */     //   94: lushr
/*      */     //   95: aload #11
/*      */     //   97: iload #13
/*      */     //   99: iconst_1
/*      */     //   100: iadd
/*      */     //   101: laload
/*      */     //   102: bipush #64
/*      */     //   104: iload #14
/*      */     //   106: isub
/*      */     //   107: lshl
/*      */     //   108: iload #14
/*      */     //   110: i2l
/*      */     //   111: lneg
/*      */     //   112: bipush #63
/*      */     //   114: lshr
/*      */     //   115: land
/*      */     //   116: lor
/*      */     //   117: lstore #15
/*      */     //   119: lload #15
/*      */     //   121: lstore #17
/*      */     //   123: iconst_0
/*      */     //   124: istore #19
/*      */     //   126: lload #17
/*      */     //   128: ldc2_w 72340172838076673
/*      */     //   131: iload #6
/*      */     //   133: i2l
/*      */     //   134: lmul
/*      */     //   135: lxor
/*      */     //   136: lstore #20
/*      */     //   138: lload #20
/*      */     //   140: ldc2_w 72340172838076673
/*      */     //   143: lsub
/*      */     //   144: lload #20
/*      */     //   146: ldc2_w -1
/*      */     //   149: lxor
/*      */     //   150: land
/*      */     //   151: ldc2_w -9187201950435737472
/*      */     //   154: land
/*      */     //   155: lstore #22
/*      */     //   157: lload #22
/*      */     //   159: lstore #17
/*      */     //   161: iconst_0
/*      */     //   162: istore #19
/*      */     //   164: lload #17
/*      */     //   166: lconst_0
/*      */     //   167: lcmp
/*      */     //   168: ifeq -> 175
/*      */     //   171: iconst_1
/*      */     //   172: goto -> 176
/*      */     //   175: iconst_0
/*      */     //   176: ifeq -> 245
/*      */     //   179: iload #10
/*      */     //   181: lload #22
/*      */     //   183: lstore #24
/*      */     //   185: iconst_0
/*      */     //   186: istore #26
/*      */     //   188: lload #24
/*      */     //   190: lstore #27
/*      */     //   192: iconst_0
/*      */     //   193: istore #29
/*      */     //   195: lload #27
/*      */     //   197: invokestatic numberOfTrailingZeros : (J)I
/*      */     //   200: iconst_3
/*      */     //   201: ishr
/*      */     //   202: nop
/*      */     //   203: iadd
/*      */     //   204: iload #7
/*      */     //   206: iand
/*      */     //   207: istore #13
/*      */     //   209: aload #4
/*      */     //   211: getfield keys : [I
/*      */     //   214: iload #13
/*      */     //   216: iaload
/*      */     //   217: iload_1
/*      */     //   218: if_icmpne -> 226
/*      */     //   221: iload #13
/*      */     //   223: goto -> 294
/*      */     //   226: lload #22
/*      */     //   228: lstore #24
/*      */     //   230: iconst_0
/*      */     //   231: istore #26
/*      */     //   233: lload #24
/*      */     //   235: lload #24
/*      */     //   237: lconst_1
/*      */     //   238: lsub
/*      */     //   239: land
/*      */     //   240: lstore #22
/*      */     //   242: goto -> 157
/*      */     //   245: lload #15
/*      */     //   247: lstore #17
/*      */     //   249: iconst_0
/*      */     //   250: istore #19
/*      */     //   252: lload #17
/*      */     //   254: lload #17
/*      */     //   256: ldc2_w -1
/*      */     //   259: lxor
/*      */     //   260: bipush #6
/*      */     //   262: lshl
/*      */     //   263: land
/*      */     //   264: ldc2_w -9187201950435737472
/*      */     //   267: land
/*      */     //   268: lconst_0
/*      */     //   269: lcmp
/*      */     //   270: ifeq -> 276
/*      */     //   273: goto -> 293
/*      */     //   276: iinc #9, 8
/*      */     //   279: nop
/*      */     //   280: iload #10
/*      */     //   282: iload #9
/*      */     //   284: iadd
/*      */     //   285: iload #7
/*      */     //   287: iand
/*      */     //   288: istore #10
/*      */     //   290: goto -> 61
/*      */     //   293: iconst_m1
/*      */     //   294: istore_3
/*      */     //   295: iload_3
/*      */     //   296: iflt -> 306
/*      */     //   299: aload_0
/*      */     //   300: getfield values : [Ljava/lang/Object;
/*      */     //   303: iload_3
/*      */     //   304: aaload
/*      */     //   305: areturn
/*      */     //   306: aload_2
/*      */     //   307: areturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #331	-> 0
/*      */     //   #1059	-> 6
/*      */     //   #1060	-> 9
/*      */     //   #1062	-> 18
/*      */     //   #1059	-> 26
/*      */     //   #1063	-> 28
/*      */     //   #1064	-> 31
/*      */     //   #1063	-> 36
/*      */     //   #1065	-> 38
/*      */     //   #1066	-> 45
/*      */     //   #1067	-> 48
/*      */     //   #1066	-> 53
/*      */     //   #1068	-> 58
/*      */     //   #1070	-> 61
/*      */     //   #1071	-> 62
/*      */     //   #1072	-> 72
/*      */     //   #1073	-> 78
/*      */     //   #1074	-> 87
/*      */     //   #1071	-> 117
/*      */     //   #1075	-> 119
/*      */     //   #1076	-> 126
/*      */     //   #1078	-> 138
/*      */     //   #1075	-> 155
/*      */     //   #1079	-> 157
/*      */     //   #1080	-> 164
/*      */     //   #1081	-> 179
/*      */     //   #1082	-> 188
/*      */     //   #1083	-> 195
/*      */     //   #1083	-> 200
/*      */     //   #1082	-> 202
/*      */     //   #1081	-> 203
/*      */     //   #1084	-> 209
/*      */     //   #1085	-> 221
/*      */     //   #1087	-> 226
/*      */     //   #1088	-> 233
/*      */     //   #1087	-> 240
/*      */     //   #1089	-> 245
/*      */     //   #1090	-> 252
/*      */     //   #1089	-> 268
/*      */     //   #1091	-> 273
/*      */     //   #1094	-> 279
/*      */     //   #1095	-> 280
/*      */     //   #1098	-> 293
/*      */     //   #331	-> 294
/*      */     //   #332	-> 295
/*      */     //   #334	-> 299
/*      */     //   #336	-> 306
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   9	17	6	$i$f$hash	I
/*      */     //   18	8	7	hash$iv$iv	I
/*      */     //   31	5	7	$i$f$h2	I
/*      */     //   48	5	9	$i$f$h1	I
/*      */     //   72	45	12	$i$f$group	I
/*      */     //   78	39	13	i$iv$iv	I
/*      */     //   87	30	14	b$iv$iv	I
/*      */     //   69	48	11	metadata$iv$iv	[J
/*      */     //   126	29	19	$i$f$match	I
/*      */     //   138	17	20	x$iv$iv	J
/*      */     //   123	32	17	$this$match$iv$iv	J
/*      */     //   164	12	19	$i$f$hasNext	I
/*      */     //   161	15	17	$this$hasNext$iv$iv	J
/*      */     //   195	7	29	$i$f$lowestBitSet	I
/*      */     //   192	10	27	$this$lowestBitSet$iv$iv$iv	J
/*      */     //   188	15	26	$i$f$get	I
/*      */     //   185	18	24	$this$get$iv$iv	J
/*      */     //   233	7	26	$i$f$next	I
/*      */     //   230	10	24	$this$next$iv$iv	J
/*      */     //   209	33	13	index$iv	I
/*      */     //   252	16	19	$i$f$maskEmpty	I
/*      */     //   249	19	17	$this$maskEmpty$iv$iv	J
/*      */     //   119	171	15	g$iv	J
/*      */     //   157	133	22	m$iv	J
/*      */     //   6	288	5	$i$f$findKeyIndex$collection	I
/*      */     //   28	266	8	hash$iv	I
/*      */     //   38	256	6	hash2$iv	I
/*      */     //   45	249	7	probeMask$iv	I
/*      */     //   58	236	10	probeOffset$iv	I
/*      */     //   61	233	9	probeIndex$iv	I
/*      */     //   3	291	4	this_$iv	Landroidx/collection/IntObjectMap;
/*      */     //   295	13	3	index	I
/*      */     //   0	308	0	this	Landroidx/collection/IntObjectMap;
/*      */     //   0	308	1	key	I
/*      */     //   0	308	2	defaultValue	Ljava/lang/Object;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final V getOrElse(int key, @NotNull Function0 defaultValue) {
/*  345 */     Intrinsics.checkNotNullParameter(defaultValue, "defaultValue"); int $i$f$getOrElse = 0; if (get(key) == null) get(key);  return (V)defaultValue.invoke();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   @PublishedApi
/*      */   public final void forEachIndexed(@NotNull Function1 block) {
/*  354 */     Intrinsics.checkNotNullParameter(block, "block"); int $i$f$forEachIndexed = 0; long[] m = this.metadata;
/*  355 */     int lastIndex = m.length - 2;
/*      */     
/*  357 */     int i = 0; if (i <= lastIndex)
/*  358 */       while (true) { long slot = m[i];
/*  359 */         long $this$maskEmptyOrDeleted$iv = slot; int $i$f$maskEmptyOrDeleted = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 1099 */         if (($this$maskEmptyOrDeleted$iv & ($this$maskEmptyOrDeleted$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) { int bitCount = 8 - ((i - lastIndex ^ 0xFFFFFFFF) >>> 31); for (int j = 0; j < bitCount; j++)
/* 1100 */           { long value$iv = slot & 0xFFL; int $i$f$isFull = 0; if ((value$iv < 128L)) { int index = (i << 3) + j; block.invoke(Integer.valueOf(index)); }  slot >>= 8L; }  }  continue; if (i != lastIndex) { i++; continue; }  break; }
/* 1101 */         } public final void forEach(@NotNull Function2 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$forEach = 0, k[] = this.keys; Object[] v = this.values; IntObjectMap this_$iv = this; int $i$f$forEachIndexed = 0; long[] m$iv = this_$iv.metadata;
/* 1102 */     int lastIndex$iv = m$iv.length - 2;
/*      */     
/* 1104 */     int i$iv = 0; if (i$iv <= lastIndex$iv) { while (true) {
/* 1105 */         long slot$iv = m$iv[i$iv];
/* 1106 */         long $this$maskEmptyOrDeleted$iv$iv = slot$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1107 */         if (($this$maskEmptyOrDeleted$iv$iv & ($this$maskEmptyOrDeleted$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1108 */         { int bitCount$iv = 8 - ((i$iv - lastIndex$iv ^ 0xFFFFFFFF) >>> 31);
/* 1109 */           for (int j$iv = 0;; j$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1117 */           if (bitCount$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv != lastIndex$iv) { i$iv++; continue; }  // Byte code: goto -> 209
/*      */       }  }
/*      */     else {  }
/* 1121 */      } public final void forEachKey(@NotNull Function1 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$forEachKey = 0, k[] = this.keys; IntObjectMap this_$iv = this; int $i$f$forEachIndexed = 0; long[] m$iv = this_$iv.metadata;
/* 1122 */     int lastIndex$iv = m$iv.length - 2;
/*      */     
/* 1124 */     int i$iv = 0; if (i$iv <= lastIndex$iv) { while (true) {
/* 1125 */         long slot$iv = m$iv[i$iv];
/* 1126 */         long $this$maskEmptyOrDeleted$iv$iv = slot$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1127 */         if (($this$maskEmptyOrDeleted$iv$iv & ($this$maskEmptyOrDeleted$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1128 */         { int bitCount$iv = 8 - ((i$iv - lastIndex$iv ^ 0xFFFFFFFF) >>> 31);
/* 1129 */           for (int j$iv = 0;; j$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1137 */           if (bitCount$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv != lastIndex$iv) { i$iv++; continue; }  // Byte code: goto -> 198
/*      */       }  }
/*      */     else {  }
/* 1141 */      } public final void forEachValue(@NotNull Function1 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$forEachValue = 0; Object[] v = this.values; IntObjectMap this_$iv = this; int $i$f$forEachIndexed = 0; long[] m$iv = this_$iv.metadata;
/* 1142 */     int lastIndex$iv = m$iv.length - 2;
/*      */     
/* 1144 */     int i$iv = 0; if (i$iv <= lastIndex$iv) { while (true) {
/* 1145 */         long slot$iv = m$iv[i$iv];
/* 1146 */         long $this$maskEmptyOrDeleted$iv$iv = slot$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1147 */         if (($this$maskEmptyOrDeleted$iv$iv & ($this$maskEmptyOrDeleted$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1148 */         { int bitCount$iv = 8 - ((i$iv - lastIndex$iv ^ 0xFFFFFFFF) >>> 31);
/* 1149 */           for (int j$iv = 0;; j$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1157 */           if (bitCount$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv != lastIndex$iv) { i$iv++; continue; }  // Byte code: goto -> 195
/*      */       }  }
/*      */     else {  }
/* 1161 */      } public final boolean all(@NotNull Function2 predicate) { Intrinsics.checkNotNullParameter(predicate, "predicate"); int $i$f$all = 0; IntObjectMap this_$iv = this; int $i$f$forEach = 0; int[] k$iv = this_$iv.keys;
/* 1162 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1164 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1165 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1166 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1168 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1169 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1170 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1171 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1172 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1173 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1182 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }
/*      */          // Byte code: goto -> 239
/*      */       }  }
/*      */     else {  }
/* 1187 */      return true; } public final boolean any(@NotNull Function2 predicate) { Intrinsics.checkNotNullParameter(predicate, "predicate"); int $i$f$any = 0; IntObjectMap this_$iv = this; int $i$f$forEach = 0; int[] k$iv = this_$iv.keys;
/* 1188 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1190 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1191 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1192 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1194 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1195 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1196 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1197 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1198 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1199 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1208 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }  // Byte code: goto -> 239
/*      */       }  }
/*      */     else {  }
/*      */      return false; }
/* 1213 */   public final int count() { return getSize(); } public final int count(@NotNull Function2 predicate) { Intrinsics.checkNotNullParameter(predicate, "predicate"); int $i$f$count = 0, count = 0; IntObjectMap this_$iv = this; int $i$f$forEach = 0; int[] k$iv = this_$iv.keys;
/* 1214 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1216 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1217 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1218 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1220 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1221 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1222 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1223 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) {
/* 1224 */           int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1225 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1234 */           if (bitCount$iv$iv == 8) {
/*      */             continue;
/*      */           }
/*      */           break;
/*      */         } 
/*      */         continue;
/*      */         if (i$iv$iv != lastIndex$iv$iv) {
/*      */           i$iv$iv++;
/*      */           continue;
/*      */         } 
/*      */         // Byte code: goto -> 247
/*      */       }  }
/*      */     else
/*      */     {  }
/*      */     
/*      */     return count; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final boolean contains(int key) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: astore_2
/*      */     //   2: iconst_0
/*      */     //   3: istore_3
/*      */     //   4: iconst_0
/*      */     //   5: istore #4
/*      */     //   7: iload_1
/*      */     //   8: invokestatic hashCode : (I)I
/*      */     //   11: ldc -862048943
/*      */     //   13: imul
/*      */     //   14: istore #5
/*      */     //   16: iload #5
/*      */     //   18: iload #5
/*      */     //   20: bipush #16
/*      */     //   22: ishl
/*      */     //   23: ixor
/*      */     //   24: istore #6
/*      */     //   26: iconst_0
/*      */     //   27: istore #5
/*      */     //   29: iload #6
/*      */     //   31: bipush #127
/*      */     //   33: iand
/*      */     //   34: istore #4
/*      */     //   36: aload_2
/*      */     //   37: getfield _capacity : I
/*      */     //   40: istore #5
/*      */     //   42: iconst_0
/*      */     //   43: istore #7
/*      */     //   45: iload #6
/*      */     //   47: bipush #7
/*      */     //   49: iushr
/*      */     //   50: iload #5
/*      */     //   52: iand
/*      */     //   53: istore #8
/*      */     //   55: iconst_0
/*      */     //   56: istore #7
/*      */     //   58: nop
/*      */     //   59: aload_2
/*      */     //   60: getfield metadata : [J
/*      */     //   63: astore #9
/*      */     //   65: iconst_0
/*      */     //   66: istore #10
/*      */     //   68: iload #8
/*      */     //   70: iconst_3
/*      */     //   71: ishr
/*      */     //   72: istore #11
/*      */     //   74: iload #8
/*      */     //   76: bipush #7
/*      */     //   78: iand
/*      */     //   79: iconst_3
/*      */     //   80: ishl
/*      */     //   81: istore #12
/*      */     //   83: aload #9
/*      */     //   85: iload #11
/*      */     //   87: laload
/*      */     //   88: iload #12
/*      */     //   90: lushr
/*      */     //   91: aload #9
/*      */     //   93: iload #11
/*      */     //   95: iconst_1
/*      */     //   96: iadd
/*      */     //   97: laload
/*      */     //   98: bipush #64
/*      */     //   100: iload #12
/*      */     //   102: isub
/*      */     //   103: lshl
/*      */     //   104: iload #12
/*      */     //   106: i2l
/*      */     //   107: lneg
/*      */     //   108: bipush #63
/*      */     //   110: lshr
/*      */     //   111: land
/*      */     //   112: lor
/*      */     //   113: lstore #13
/*      */     //   115: lload #13
/*      */     //   117: lstore #15
/*      */     //   119: iconst_0
/*      */     //   120: istore #17
/*      */     //   122: lload #15
/*      */     //   124: ldc2_w 72340172838076673
/*      */     //   127: iload #4
/*      */     //   129: i2l
/*      */     //   130: lmul
/*      */     //   131: lxor
/*      */     //   132: lstore #18
/*      */     //   134: lload #18
/*      */     //   136: ldc2_w 72340172838076673
/*      */     //   139: lsub
/*      */     //   140: lload #18
/*      */     //   142: ldc2_w -1
/*      */     //   145: lxor
/*      */     //   146: land
/*      */     //   147: ldc2_w -9187201950435737472
/*      */     //   150: land
/*      */     //   151: lstore #20
/*      */     //   153: lload #20
/*      */     //   155: lstore #15
/*      */     //   157: iconst_0
/*      */     //   158: istore #17
/*      */     //   160: lload #15
/*      */     //   162: lconst_0
/*      */     //   163: lcmp
/*      */     //   164: ifeq -> 171
/*      */     //   167: iconst_1
/*      */     //   168: goto -> 172
/*      */     //   171: iconst_0
/*      */     //   172: ifeq -> 240
/*      */     //   175: iload #8
/*      */     //   177: lload #20
/*      */     //   179: lstore #22
/*      */     //   181: iconst_0
/*      */     //   182: istore #24
/*      */     //   184: lload #22
/*      */     //   186: lstore #25
/*      */     //   188: iconst_0
/*      */     //   189: istore #27
/*      */     //   191: lload #25
/*      */     //   193: invokestatic numberOfTrailingZeros : (J)I
/*      */     //   196: iconst_3
/*      */     //   197: ishr
/*      */     //   198: nop
/*      */     //   199: iadd
/*      */     //   200: iload #5
/*      */     //   202: iand
/*      */     //   203: istore #11
/*      */     //   205: aload_2
/*      */     //   206: getfield keys : [I
/*      */     //   209: iload #11
/*      */     //   211: iaload
/*      */     //   212: iload_1
/*      */     //   213: if_icmpne -> 221
/*      */     //   216: iload #11
/*      */     //   218: goto -> 289
/*      */     //   221: lload #20
/*      */     //   223: lstore #22
/*      */     //   225: iconst_0
/*      */     //   226: istore #24
/*      */     //   228: lload #22
/*      */     //   230: lload #22
/*      */     //   232: lconst_1
/*      */     //   233: lsub
/*      */     //   234: land
/*      */     //   235: lstore #20
/*      */     //   237: goto -> 153
/*      */     //   240: lload #13
/*      */     //   242: lstore #15
/*      */     //   244: iconst_0
/*      */     //   245: istore #17
/*      */     //   247: lload #15
/*      */     //   249: lload #15
/*      */     //   251: ldc2_w -1
/*      */     //   254: lxor
/*      */     //   255: bipush #6
/*      */     //   257: lshl
/*      */     //   258: land
/*      */     //   259: ldc2_w -9187201950435737472
/*      */     //   262: land
/*      */     //   263: lconst_0
/*      */     //   264: lcmp
/*      */     //   265: ifeq -> 271
/*      */     //   268: goto -> 288
/*      */     //   271: iinc #7, 8
/*      */     //   274: nop
/*      */     //   275: iload #8
/*      */     //   277: iload #7
/*      */     //   279: iadd
/*      */     //   280: iload #5
/*      */     //   282: iand
/*      */     //   283: istore #8
/*      */     //   285: goto -> 58
/*      */     //   288: iconst_m1
/*      */     //   289: iflt -> 296
/*      */     //   292: iconst_1
/*      */     //   293: goto -> 297
/*      */     //   296: iconst_0
/*      */     //   297: ireturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #456	-> 0
/*      */     //   #1239	-> 4
/*      */     //   #1240	-> 7
/*      */     //   #1242	-> 16
/*      */     //   #1239	-> 24
/*      */     //   #1243	-> 26
/*      */     //   #1244	-> 29
/*      */     //   #1243	-> 34
/*      */     //   #1245	-> 36
/*      */     //   #1246	-> 42
/*      */     //   #1247	-> 45
/*      */     //   #1246	-> 50
/*      */     //   #1248	-> 55
/*      */     //   #1250	-> 58
/*      */     //   #1251	-> 59
/*      */     //   #1252	-> 68
/*      */     //   #1253	-> 74
/*      */     //   #1254	-> 83
/*      */     //   #1251	-> 113
/*      */     //   #1255	-> 115
/*      */     //   #1256	-> 122
/*      */     //   #1258	-> 134
/*      */     //   #1255	-> 151
/*      */     //   #1259	-> 153
/*      */     //   #1260	-> 160
/*      */     //   #1261	-> 175
/*      */     //   #1262	-> 184
/*      */     //   #1263	-> 191
/*      */     //   #1263	-> 196
/*      */     //   #1262	-> 198
/*      */     //   #1261	-> 199
/*      */     //   #1264	-> 205
/*      */     //   #1265	-> 216
/*      */     //   #1267	-> 221
/*      */     //   #1268	-> 228
/*      */     //   #1267	-> 235
/*      */     //   #1269	-> 240
/*      */     //   #1270	-> 247
/*      */     //   #1269	-> 263
/*      */     //   #1271	-> 268
/*      */     //   #1274	-> 274
/*      */     //   #1275	-> 275
/*      */     //   #1278	-> 288
/*      */     //   #456	-> 289
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   7	17	4	$i$f$hash	I
/*      */     //   16	8	5	hash$iv$iv	I
/*      */     //   29	5	5	$i$f$h2	I
/*      */     //   45	5	7	$i$f$h1	I
/*      */     //   68	45	10	$i$f$group	I
/*      */     //   74	39	11	i$iv$iv	I
/*      */     //   83	30	12	b$iv$iv	I
/*      */     //   65	48	9	metadata$iv$iv	[J
/*      */     //   122	29	17	$i$f$match	I
/*      */     //   134	17	18	x$iv$iv	J
/*      */     //   119	32	15	$this$match$iv$iv	J
/*      */     //   160	12	17	$i$f$hasNext	I
/*      */     //   157	15	15	$this$hasNext$iv$iv	J
/*      */     //   191	7	27	$i$f$lowestBitSet	I
/*      */     //   188	10	25	$this$lowestBitSet$iv$iv$iv	J
/*      */     //   184	15	24	$i$f$get	I
/*      */     //   181	18	22	$this$get$iv$iv	J
/*      */     //   228	7	24	$i$f$next	I
/*      */     //   225	10	22	$this$next$iv$iv	J
/*      */     //   205	32	11	index$iv	I
/*      */     //   247	16	17	$i$f$maskEmpty	I
/*      */     //   244	19	15	$this$maskEmpty$iv$iv	J
/*      */     //   115	170	13	g$iv	J
/*      */     //   153	132	20	m$iv	J
/*      */     //   4	285	3	$i$f$findKeyIndex$collection	I
/*      */     //   26	263	6	hash$iv	I
/*      */     //   36	253	4	hash2$iv	I
/*      */     //   42	247	5	probeMask$iv	I
/*      */     //   55	234	8	probeOffset$iv	I
/*      */     //   58	231	7	probeIndex$iv	I
/*      */     //   2	287	2	this_$iv	Landroidx/collection/IntObjectMap;
/*      */     //   0	298	0	this	Landroidx/collection/IntObjectMap;
/*      */     //   0	298	1	key	I
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final boolean containsKey(int key) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: astore_2
/*      */     //   2: iconst_0
/*      */     //   3: istore_3
/*      */     //   4: iconst_0
/*      */     //   5: istore #4
/*      */     //   7: iload_1
/*      */     //   8: invokestatic hashCode : (I)I
/*      */     //   11: ldc -862048943
/*      */     //   13: imul
/*      */     //   14: istore #5
/*      */     //   16: iload #5
/*      */     //   18: iload #5
/*      */     //   20: bipush #16
/*      */     //   22: ishl
/*      */     //   23: ixor
/*      */     //   24: istore #6
/*      */     //   26: iconst_0
/*      */     //   27: istore #5
/*      */     //   29: iload #6
/*      */     //   31: bipush #127
/*      */     //   33: iand
/*      */     //   34: istore #4
/*      */     //   36: aload_2
/*      */     //   37: getfield _capacity : I
/*      */     //   40: istore #5
/*      */     //   42: iconst_0
/*      */     //   43: istore #7
/*      */     //   45: iload #6
/*      */     //   47: bipush #7
/*      */     //   49: iushr
/*      */     //   50: iload #5
/*      */     //   52: iand
/*      */     //   53: istore #8
/*      */     //   55: iconst_0
/*      */     //   56: istore #7
/*      */     //   58: nop
/*      */     //   59: aload_2
/*      */     //   60: getfield metadata : [J
/*      */     //   63: astore #9
/*      */     //   65: iconst_0
/*      */     //   66: istore #10
/*      */     //   68: iload #8
/*      */     //   70: iconst_3
/*      */     //   71: ishr
/*      */     //   72: istore #11
/*      */     //   74: iload #8
/*      */     //   76: bipush #7
/*      */     //   78: iand
/*      */     //   79: iconst_3
/*      */     //   80: ishl
/*      */     //   81: istore #12
/*      */     //   83: aload #9
/*      */     //   85: iload #11
/*      */     //   87: laload
/*      */     //   88: iload #12
/*      */     //   90: lushr
/*      */     //   91: aload #9
/*      */     //   93: iload #11
/*      */     //   95: iconst_1
/*      */     //   96: iadd
/*      */     //   97: laload
/*      */     //   98: bipush #64
/*      */     //   100: iload #12
/*      */     //   102: isub
/*      */     //   103: lshl
/*      */     //   104: iload #12
/*      */     //   106: i2l
/*      */     //   107: lneg
/*      */     //   108: bipush #63
/*      */     //   110: lshr
/*      */     //   111: land
/*      */     //   112: lor
/*      */     //   113: lstore #13
/*      */     //   115: lload #13
/*      */     //   117: lstore #15
/*      */     //   119: iconst_0
/*      */     //   120: istore #17
/*      */     //   122: lload #15
/*      */     //   124: ldc2_w 72340172838076673
/*      */     //   127: iload #4
/*      */     //   129: i2l
/*      */     //   130: lmul
/*      */     //   131: lxor
/*      */     //   132: lstore #18
/*      */     //   134: lload #18
/*      */     //   136: ldc2_w 72340172838076673
/*      */     //   139: lsub
/*      */     //   140: lload #18
/*      */     //   142: ldc2_w -1
/*      */     //   145: lxor
/*      */     //   146: land
/*      */     //   147: ldc2_w -9187201950435737472
/*      */     //   150: land
/*      */     //   151: lstore #20
/*      */     //   153: lload #20
/*      */     //   155: lstore #15
/*      */     //   157: iconst_0
/*      */     //   158: istore #17
/*      */     //   160: lload #15
/*      */     //   162: lconst_0
/*      */     //   163: lcmp
/*      */     //   164: ifeq -> 171
/*      */     //   167: iconst_1
/*      */     //   168: goto -> 172
/*      */     //   171: iconst_0
/*      */     //   172: ifeq -> 240
/*      */     //   175: iload #8
/*      */     //   177: lload #20
/*      */     //   179: lstore #22
/*      */     //   181: iconst_0
/*      */     //   182: istore #24
/*      */     //   184: lload #22
/*      */     //   186: lstore #25
/*      */     //   188: iconst_0
/*      */     //   189: istore #27
/*      */     //   191: lload #25
/*      */     //   193: invokestatic numberOfTrailingZeros : (J)I
/*      */     //   196: iconst_3
/*      */     //   197: ishr
/*      */     //   198: nop
/*      */     //   199: iadd
/*      */     //   200: iload #5
/*      */     //   202: iand
/*      */     //   203: istore #11
/*      */     //   205: aload_2
/*      */     //   206: getfield keys : [I
/*      */     //   209: iload #11
/*      */     //   211: iaload
/*      */     //   212: iload_1
/*      */     //   213: if_icmpne -> 221
/*      */     //   216: iload #11
/*      */     //   218: goto -> 289
/*      */     //   221: lload #20
/*      */     //   223: lstore #22
/*      */     //   225: iconst_0
/*      */     //   226: istore #24
/*      */     //   228: lload #22
/*      */     //   230: lload #22
/*      */     //   232: lconst_1
/*      */     //   233: lsub
/*      */     //   234: land
/*      */     //   235: lstore #20
/*      */     //   237: goto -> 153
/*      */     //   240: lload #13
/*      */     //   242: lstore #15
/*      */     //   244: iconst_0
/*      */     //   245: istore #17
/*      */     //   247: lload #15
/*      */     //   249: lload #15
/*      */     //   251: ldc2_w -1
/*      */     //   254: lxor
/*      */     //   255: bipush #6
/*      */     //   257: lshl
/*      */     //   258: land
/*      */     //   259: ldc2_w -9187201950435737472
/*      */     //   262: land
/*      */     //   263: lconst_0
/*      */     //   264: lcmp
/*      */     //   265: ifeq -> 271
/*      */     //   268: goto -> 288
/*      */     //   271: iinc #7, 8
/*      */     //   274: nop
/*      */     //   275: iload #8
/*      */     //   277: iload #7
/*      */     //   279: iadd
/*      */     //   280: iload #5
/*      */     //   282: iand
/*      */     //   283: istore #8
/*      */     //   285: goto -> 58
/*      */     //   288: iconst_m1
/*      */     //   289: iflt -> 296
/*      */     //   292: iconst_1
/*      */     //   293: goto -> 297
/*      */     //   296: iconst_0
/*      */     //   297: ireturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #462	-> 0
/*      */     //   #1279	-> 4
/*      */     //   #1280	-> 7
/*      */     //   #1282	-> 16
/*      */     //   #1279	-> 24
/*      */     //   #1283	-> 26
/*      */     //   #1284	-> 29
/*      */     //   #1283	-> 34
/*      */     //   #1285	-> 36
/*      */     //   #1286	-> 42
/*      */     //   #1287	-> 45
/*      */     //   #1286	-> 50
/*      */     //   #1288	-> 55
/*      */     //   #1290	-> 58
/*      */     //   #1291	-> 59
/*      */     //   #1292	-> 68
/*      */     //   #1293	-> 74
/*      */     //   #1294	-> 83
/*      */     //   #1291	-> 113
/*      */     //   #1295	-> 115
/*      */     //   #1296	-> 122
/*      */     //   #1298	-> 134
/*      */     //   #1295	-> 151
/*      */     //   #1299	-> 153
/*      */     //   #1300	-> 160
/*      */     //   #1301	-> 175
/*      */     //   #1302	-> 184
/*      */     //   #1303	-> 191
/*      */     //   #1303	-> 196
/*      */     //   #1302	-> 198
/*      */     //   #1301	-> 199
/*      */     //   #1304	-> 205
/*      */     //   #1305	-> 216
/*      */     //   #1307	-> 221
/*      */     //   #1308	-> 228
/*      */     //   #1307	-> 235
/*      */     //   #1309	-> 240
/*      */     //   #1310	-> 247
/*      */     //   #1309	-> 263
/*      */     //   #1311	-> 268
/*      */     //   #1314	-> 274
/*      */     //   #1315	-> 275
/*      */     //   #1318	-> 288
/*      */     //   #462	-> 289
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   7	17	4	$i$f$hash	I
/*      */     //   16	8	5	hash$iv$iv	I
/*      */     //   29	5	5	$i$f$h2	I
/*      */     //   45	5	7	$i$f$h1	I
/*      */     //   68	45	10	$i$f$group	I
/*      */     //   74	39	11	i$iv$iv	I
/*      */     //   83	30	12	b$iv$iv	I
/*      */     //   65	48	9	metadata$iv$iv	[J
/*      */     //   122	29	17	$i$f$match	I
/*      */     //   134	17	18	x$iv$iv	J
/*      */     //   119	32	15	$this$match$iv$iv	J
/*      */     //   160	12	17	$i$f$hasNext	I
/*      */     //   157	15	15	$this$hasNext$iv$iv	J
/*      */     //   191	7	27	$i$f$lowestBitSet	I
/*      */     //   188	10	25	$this$lowestBitSet$iv$iv$iv	J
/*      */     //   184	15	24	$i$f$get	I
/*      */     //   181	18	22	$this$get$iv$iv	J
/*      */     //   228	7	24	$i$f$next	I
/*      */     //   225	10	22	$this$next$iv$iv	J
/*      */     //   205	32	11	index$iv	I
/*      */     //   247	16	17	$i$f$maskEmpty	I
/*      */     //   244	19	15	$this$maskEmpty$iv$iv	J
/*      */     //   115	170	13	g$iv	J
/*      */     //   153	132	20	m$iv	J
/*      */     //   4	285	3	$i$f$findKeyIndex$collection	I
/*      */     //   26	263	6	hash$iv	I
/*      */     //   36	253	4	hash2$iv	I
/*      */     //   42	247	5	probeMask$iv	I
/*      */     //   55	234	8	probeOffset$iv	I
/*      */     //   58	231	7	probeIndex$iv	I
/*      */     //   2	287	2	this_$iv	Landroidx/collection/IntObjectMap;
/*      */     //   0	298	0	this	Landroidx/collection/IntObjectMap;
/*      */     //   0	298	1	key	I
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final boolean containsValue(Object value) {
/*      */     IntObjectMap this_$iv = this;
/*      */     int $i$f$forEachValue = 0;
/* 1319 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1321 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1322 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1323 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1325 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1326 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1327 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1328 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1329 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1330 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1339 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }
/*      */          // Byte code: goto -> 204
/*      */       }  }
/*      */     else {  }
/* 1344 */      return false; } @JvmOverloads @NotNull public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated) { Intrinsics.checkNotNullParameter(separator, "separator"); Intrinsics.checkNotNullParameter(prefix, "prefix"); Intrinsics.checkNotNullParameter(postfix, "postfix"); Intrinsics.checkNotNullParameter(truncated, "truncated"); StringBuilder stringBuilder1 = new StringBuilder(), $this$joinToString_u24lambda_u248 = stringBuilder1; int $i$a$-buildString-IntObjectMap$joinToString$1 = 0; $this$joinToString_u24lambda_u248.append(prefix); int index = 0; IntObjectMap this_$iv = this; int $i$f$forEach = 0; int[] k$iv = this_$iv.keys;
/* 1345 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1347 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1348 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1349 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1351 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1352 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1353 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1354 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1355 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1356 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1365 */           if (bitCount$iv$iv == 8)
/*      */             continue;  // Byte code: goto -> 326 }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }
/*      */          // Byte code: goto -> 325
/*      */       }  }
/*      */     else { $this$joinToString_u24lambda_u248.append(postfix); }
/* 1370 */      Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()"); return stringBuilder1.toString(); } @JvmOverloads @NotNull public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @NotNull Function2 transform) { Intrinsics.checkNotNullParameter(separator, "separator"); Intrinsics.checkNotNullParameter(prefix, "prefix"); Intrinsics.checkNotNullParameter(postfix, "postfix"); Intrinsics.checkNotNullParameter(truncated, "truncated"); Intrinsics.checkNotNullParameter(transform, "transform"); int $i$f$joinToString = 0; StringBuilder stringBuilder1 = new StringBuilder(), $this$joinToString_u24lambda_u2410 = stringBuilder1; int $i$a$-buildString-IntObjectMap$joinToString$2 = 0; $this$joinToString_u24lambda_u2410.append(prefix); int index = 0; IntObjectMap this_$iv = this; int $i$f$forEach = 0; int[] k$iv = this_$iv.keys;
/* 1371 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1373 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1374 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1375 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1377 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1378 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1379 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1380 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) {
/* 1381 */           int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1382 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1391 */           if (bitCount$iv$iv == 8) {
/*      */             continue;
/*      */           }
/*      */           // Byte code: goto -> 336
/*      */         } 
/*      */         continue;
/*      */         if (i$iv$iv != lastIndex$iv$iv) {
/*      */           i$iv$iv++;
/*      */           continue;
/*      */         } 
/*      */         // Byte code: goto -> 335
/*      */       }  }
/*      */     else
/*      */     { $this$joinToString_u24lambda_u2410.append(postfix); }
/*      */     
/*      */     Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()");
/*      */     return stringBuilder1.toString(); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int hashCode() {
/*      */     int hash = 0;
/*      */     IntObjectMap this_$iv = this;
/*      */     int $i$f$forEach = 0;
/* 1422 */     int[] k$iv = this_$iv.keys;
/* 1423 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1425 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1426 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1427 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1429 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true)
/* 1430 */       { long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1431 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1432 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1433 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1434 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1443 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }  // Byte code: goto -> 231 }  } else {  }
/*      */      return hash; } public boolean equals(@Nullable Object other) { if (other == this)
/*      */       return true;  if (!(other instanceof IntObjectMap))
/*      */       return false;  if (((IntObjectMap)other).getSize() != getSize())
/* 1448 */       return false;  IntObjectMap this_$iv = this; int $i$f$forEach = 0; int[] k$iv = this_$iv.keys;
/* 1449 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1451 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1452 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1453 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1455 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1456 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1457 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1458 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1459 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1460 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1469 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }  // Byte code: goto -> 288
/*      */       }  }
/*      */     else {  }
/*      */      return true; } @NotNull public String toString() { if (isEmpty())
/* 1474 */       return "{}";  StringBuilder s = (new StringBuilder()).append('{'); int i = 0; IntObjectMap this_$iv = this; int $i$f$forEach = 0; int[] k$iv = this_$iv.keys;
/* 1475 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1477 */     IntObjectMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1478 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1479 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1481 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1482 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1483 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1484 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1485 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1486 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1495 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }
/*      */          // Byte code: goto -> 291
/*      */       }  }
/*      */     else {  }
/* 1500 */      Intrinsics.checkNotNullExpressionValue(s.append('}').toString(), "s.append('}').toString()"); return s.append('}').toString(); } public final int findKeyIndex$collection(int key) { int $i$f$findKeyIndex$collection = 0, $i$f$hash = 0; int hash$iv = Integer.hashCode(key) * -862048943;
/*      */     
/* 1502 */     int hash = hash$iv ^ hash$iv << 16;
/* 1503 */     int $i$f$h2 = 0, hash2 = hash & 0x7F; int probeMask = this._capacity;
/* 1504 */     int $i$f$h1 = 0, probeOffset = hash >>> 7 & probeMask; int probeIndex = 0; while (true)
/* 1505 */     { long[] metadata$iv = this.metadata; int $i$f$group = 0; int i$iv = probeOffset >> 3;
/* 1506 */       int b$iv = (probeOffset & 0x7) << 3;
/* 1507 */       long g = metadata$iv[i$iv] >>> b$iv | metadata$iv[i$iv + 1] << 64 - b$iv & -(b$iv) >> 63L; long $this$match$iv = g; int $i$f$match = 0;
/* 1508 */       long x$iv = $this$match$iv ^ 72340172838076673L * hash2;
/*      */       
/* 1510 */       long m = x$iv - 72340172838076673L & (x$iv ^ 0xFFFFFFFFFFFFFFFFL) & 0x8080808080808080L; while (true)
/* 1511 */       { long $this$hasNext$iv = m; int $i$f$hasNext = 0; if (($this$hasNext$iv != 0L)) {
/* 1512 */           long $this$get$iv = m; int $i$f$get = 0; long $this$lowestBitSet$iv$iv = $this$get$iv; int $i$f$lowestBitSet = 0;
/* 1513 */           int index = probeOffset + (Long.numberOfTrailingZeros($this$lowestBitSet$iv$iv) >> 3) & probeMask;
/*      */         }  long $this$maskEmpty$iv = g; int $i$f$maskEmpty = 0;
/* 1515 */         if (($this$maskEmpty$iv & ($this$maskEmpty$iv ^ 0xFFFFFFFFFFFFFFFFL) << 6L & 0x8080808080808080L) != 0L)
/* 1516 */           return -1;  break; }  probeIndex += 8; probeOffset = probeOffset + probeIndex & probeMask; }  return -1; } @JvmOverloads @NotNull public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull Function2 transform) { Intrinsics.checkNotNullParameter(separator, "separator"); Intrinsics.checkNotNullParameter(prefix, "prefix"); Intrinsics.checkNotNullParameter(postfix, "postfix"); Intrinsics.checkNotNullParameter(transform, "transform"); int $i$f$joinToString = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1521 */     CharSequence truncated$iv = "...";
/*      */     int i = 0;
/* 1523 */     StringBuilder stringBuilder1 = new StringBuilder(), $this$joinToString_u24lambda_u2410$iv = stringBuilder1; int $i$a$-buildString-IntObjectMap$joinToString$2$iv = 0;
/* 1524 */     $this$joinToString_u24lambda_u2410$iv.append(prefix);
/* 1525 */     int index$iv = 0;
/* 1526 */     IntObjectMap this_$iv$iv = this; int $i$f$forEach = 0;
/* 1527 */     int[] k$iv$iv = this_$iv$iv.keys;
/* 1528 */     Object[] v$iv$iv = this_$iv$iv.values;
/*      */     
/* 1530 */     IntObjectMap this_$iv$iv$iv = this_$iv$iv; int $i$f$forEachIndexed = 0;
/* 1531 */     long[] m$iv$iv$iv = this_$iv$iv$iv.metadata;
/* 1532 */     int lastIndex$iv$iv$iv = m$iv$iv$iv.length - 2;
/*      */     
/* 1534 */     int i$iv$iv$iv = 0; if (i$iv$iv$iv <= lastIndex$iv$iv$iv) { while (true) {
/* 1535 */         long slot$iv$iv$iv = m$iv$iv$iv[i$iv$iv$iv];
/* 1536 */         long $this$maskEmptyOrDeleted$iv$iv$iv$iv = slot$iv$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1537 */         if (($this$maskEmptyOrDeleted$iv$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) {
/* 1538 */           int bitCount$iv$iv$iv = 8 - ((i$iv$iv$iv - lastIndex$iv$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1539 */           for (int j$iv$iv$iv = 0; j$iv$iv$iv < bitCount$iv$iv$iv; j$iv$iv$iv++) {
/* 1540 */             long value$iv$iv$iv$iv = slot$iv$iv$iv & 0xFFL; int $i$f$isFull = 0;
/* 1541 */             if ((value$iv$iv$iv$iv < 128L)) {
/* 1542 */               int index$iv$iv$iv = (i$iv$iv$iv << 3) + j$iv$iv$iv;
/* 1543 */               int index$iv$iv = index$iv$iv$iv, $i$a$-forEachIndexed-IntObjectMap$forEach$1$iv$iv = 0;
/* 1544 */               Object object = v$iv$iv[index$iv$iv]; int key$iv = k$iv$iv[index$iv$iv], $i$a$-forEach-IntObjectMap$joinToString$2$1$iv = 0;
/* 1545 */               if (index$iv == limit) {
/* 1546 */                 $this$joinToString_u24lambda_u2410$iv.append(truncated$iv);
/*      */                 // Byte code: goto -> 348
/*      */               } 
/* 1549 */               if (index$iv != 0) {
/* 1550 */                 $this$joinToString_u24lambda_u2410$iv.append(separator);
/*      */               }
/* 1552 */               $this$joinToString_u24lambda_u2410$iv.append((CharSequence)transform.invoke(Integer.valueOf(key$iv), object));
/* 1553 */               index$iv++;
/*      */             } 
/*      */             
/* 1556 */             slot$iv$iv$iv >>= 8L;
/*      */           } 
/* 1558 */           if (bitCount$iv$iv$iv == 8)
/*      */             continue;  // Byte code: goto -> 339
/*      */         }  continue; if (i$iv$iv$iv != lastIndex$iv$iv$iv) { i$iv$iv$iv++; continue; }
/*      */          // Byte code: goto -> 338
/*      */       }  }
/* 1563 */     else { $this$joinToString_u24lambda_u2410$iv.append(postfix); }
/*      */      Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()");
/* 1565 */     return stringBuilder1.toString(); } @JvmOverloads @NotNull public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, @NotNull Function2 transform) { Intrinsics.checkNotNullParameter(separator, "separator"); Intrinsics.checkNotNullParameter(prefix, "prefix"); Intrinsics.checkNotNullParameter(postfix, "postfix"); Intrinsics.checkNotNullParameter(transform, "transform"); int $i$f$joinToString = 0;
/*      */ 
/*      */ 
/*      */     
/* 1569 */     int limit$iv = -1;
/* 1570 */     CharSequence truncated$iv = "...";
/*      */     int i = 0;
/* 1572 */     StringBuilder stringBuilder1 = new StringBuilder(), $this$joinToString_u24lambda_u2410$iv = stringBuilder1; int $i$a$-buildString-IntObjectMap$joinToString$2$iv = 0;
/* 1573 */     $this$joinToString_u24lambda_u2410$iv.append(prefix);
/* 1574 */     int index$iv = 0;
/* 1575 */     IntObjectMap this_$iv$iv = this; int $i$f$forEach = 0;
/* 1576 */     int[] k$iv$iv = this_$iv$iv.keys;
/* 1577 */     Object[] v$iv$iv = this_$iv$iv.values;
/*      */     
/* 1579 */     IntObjectMap this_$iv$iv$iv = this_$iv$iv; int $i$f$forEachIndexed = 0;
/* 1580 */     long[] m$iv$iv$iv = this_$iv$iv$iv.metadata;
/* 1581 */     int lastIndex$iv$iv$iv = m$iv$iv$iv.length - 2;
/*      */     
/* 1583 */     int i$iv$iv$iv = 0; if (i$iv$iv$iv <= lastIndex$iv$iv$iv) { label36: while (true)
/* 1584 */       { long slot$iv$iv$iv = m$iv$iv$iv[i$iv$iv$iv];
/* 1585 */         long $this$maskEmptyOrDeleted$iv$iv$iv$iv = slot$iv$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1586 */         if (($this$maskEmptyOrDeleted$iv$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) {
/* 1587 */           int bitCount$iv$iv$iv = 8 - ((i$iv$iv$iv - lastIndex$iv$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1588 */           for (int j$iv$iv$iv = 0; j$iv$iv$iv < bitCount$iv$iv$iv; j$iv$iv$iv++) {
/* 1589 */             long value$iv$iv$iv$iv = slot$iv$iv$iv & 0xFFL; int $i$f$isFull = 0;
/* 1590 */             if ((value$iv$iv$iv$iv < 128L)) {
/* 1591 */               int index$iv$iv$iv = (i$iv$iv$iv << 3) + j$iv$iv$iv;
/* 1592 */               int index$iv$iv = index$iv$iv$iv, $i$a$-forEachIndexed-IntObjectMap$forEach$1$iv$iv = 0;
/* 1593 */               Object object = v$iv$iv[index$iv$iv]; int key$iv = k$iv$iv[index$iv$iv], $i$a$-forEach-IntObjectMap$joinToString$2$1$iv = 0;
/* 1594 */               if (index$iv == limit$iv) {
/* 1595 */                 $this$joinToString_u24lambda_u2410$iv.append(truncated$iv);
/*      */                 break label36;
/*      */               } 
/* 1598 */               if (index$iv != 0) {
/* 1599 */                 $this$joinToString_u24lambda_u2410$iv.append(separator);
/*      */               }
/* 1601 */               $this$joinToString_u24lambda_u2410$iv.append((CharSequence)transform.invoke(Integer.valueOf(key$iv), object));
/* 1602 */               index$iv++;
/*      */             } 
/*      */             
/* 1605 */             slot$iv$iv$iv >>= 8L;
/*      */           } 
/* 1607 */           if (bitCount$iv$iv$iv == 8)
/*      */             continue; 
/*      */         } else {
/*      */           continue;
/*      */         } 
/* 1612 */         $this$joinToString_u24lambda_u2410$iv.append(postfix); if (i$iv$iv$iv != lastIndex$iv$iv$iv) { i$iv$iv$iv++; continue; }  continue; }  } else { $this$joinToString_u24lambda_u2410$iv.append(postfix); }
/*      */      Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()");
/* 1614 */     return stringBuilder1.toString(); } @JvmOverloads @NotNull public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull Function2 transform) { Intrinsics.checkNotNullParameter(separator, "separator"); Intrinsics.checkNotNullParameter(prefix, "prefix"); Intrinsics.checkNotNullParameter(transform, "transform"); int $i$f$joinToString = 0;
/*      */ 
/*      */     
/* 1617 */     CharSequence postfix$iv = "";
/* 1618 */     int limit$iv = -1;
/* 1619 */     CharSequence truncated$iv = "...";
/*      */     int i = 0;
/* 1621 */     StringBuilder stringBuilder1 = new StringBuilder(), $this$joinToString_u24lambda_u2410$iv = stringBuilder1; int $i$a$-buildString-IntObjectMap$joinToString$2$iv = 0;
/* 1622 */     $this$joinToString_u24lambda_u2410$iv.append(prefix);
/* 1623 */     int index$iv = 0;
/* 1624 */     IntObjectMap this_$iv$iv = this; int $i$f$forEach = 0;
/* 1625 */     int[] k$iv$iv = this_$iv$iv.keys;
/* 1626 */     Object[] v$iv$iv = this_$iv$iv.values;
/*      */     
/* 1628 */     IntObjectMap this_$iv$iv$iv = this_$iv$iv; int $i$f$forEachIndexed = 0;
/* 1629 */     long[] m$iv$iv$iv = this_$iv$iv$iv.metadata;
/* 1630 */     int lastIndex$iv$iv$iv = m$iv$iv$iv.length - 2;
/*      */     
/* 1632 */     int i$iv$iv$iv = 0; if (i$iv$iv$iv <= lastIndex$iv$iv$iv) { while (true) {
/* 1633 */         long slot$iv$iv$iv = m$iv$iv$iv[i$iv$iv$iv];
/* 1634 */         long $this$maskEmptyOrDeleted$iv$iv$iv$iv = slot$iv$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1635 */         if (($this$maskEmptyOrDeleted$iv$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) {
/* 1636 */           int bitCount$iv$iv$iv = 8 - ((i$iv$iv$iv - lastIndex$iv$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1637 */           for (int j$iv$iv$iv = 0; j$iv$iv$iv < bitCount$iv$iv$iv; j$iv$iv$iv++) {
/* 1638 */             long value$iv$iv$iv$iv = slot$iv$iv$iv & 0xFFL; int $i$f$isFull = 0;
/* 1639 */             if ((value$iv$iv$iv$iv < 128L)) {
/* 1640 */               int index$iv$iv$iv = (i$iv$iv$iv << 3) + j$iv$iv$iv;
/* 1641 */               int index$iv$iv = index$iv$iv$iv, $i$a$-forEachIndexed-IntObjectMap$forEach$1$iv$iv = 0;
/* 1642 */               Object object = v$iv$iv[index$iv$iv]; int key$iv = k$iv$iv[index$iv$iv], $i$a$-forEach-IntObjectMap$joinToString$2$1$iv = 0;
/* 1643 */               if (index$iv == limit$iv) {
/* 1644 */                 $this$joinToString_u24lambda_u2410$iv.append(truncated$iv);
/*      */                 // Byte code: goto -> 351
/*      */               } 
/* 1647 */               if (index$iv != 0) {
/* 1648 */                 $this$joinToString_u24lambda_u2410$iv.append(separator);
/*      */               }
/* 1650 */               $this$joinToString_u24lambda_u2410$iv.append((CharSequence)transform.invoke(Integer.valueOf(key$iv), object));
/* 1651 */               index$iv++;
/*      */             } 
/*      */             
/* 1654 */             slot$iv$iv$iv >>= 8L;
/*      */           } 
/* 1656 */           if (bitCount$iv$iv$iv == 8)
/*      */             continue;  // Byte code: goto -> 341
/*      */         }  continue; if (i$iv$iv$iv != lastIndex$iv$iv$iv) { i$iv$iv$iv++; continue; }
/*      */          // Byte code: goto -> 340
/*      */       }  }
/* 1661 */     else { $this$joinToString_u24lambda_u2410$iv.append(postfix$iv); }
/*      */      Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()");
/* 1663 */     return stringBuilder1.toString(); } @JvmOverloads @NotNull public final String joinToString(@NotNull CharSequence separator, @NotNull Function2 transform) { Intrinsics.checkNotNullParameter(separator, "separator"); Intrinsics.checkNotNullParameter(transform, "transform"); int $i$f$joinToString = 0;
/*      */     
/* 1665 */     CharSequence prefix$iv = "";
/* 1666 */     CharSequence postfix$iv = "";
/* 1667 */     int limit$iv = -1;
/* 1668 */     CharSequence truncated$iv = "...";
/*      */     int i = 0;
/* 1670 */     StringBuilder stringBuilder1 = new StringBuilder(), $this$joinToString_u24lambda_u2410$iv = stringBuilder1; int $i$a$-buildString-IntObjectMap$joinToString$2$iv = 0;
/* 1671 */     $this$joinToString_u24lambda_u2410$iv.append(prefix$iv);
/* 1672 */     int index$iv = 0;
/* 1673 */     IntObjectMap this_$iv$iv = this; int $i$f$forEach = 0;
/* 1674 */     int[] k$iv$iv = this_$iv$iv.keys;
/* 1675 */     Object[] v$iv$iv = this_$iv$iv.values;
/*      */     
/* 1677 */     IntObjectMap this_$iv$iv$iv = this_$iv$iv; int $i$f$forEachIndexed = 0;
/* 1678 */     long[] m$iv$iv$iv = this_$iv$iv$iv.metadata;
/* 1679 */     int lastIndex$iv$iv$iv = m$iv$iv$iv.length - 2;
/*      */     
/* 1681 */     int i$iv$iv$iv = 0; if (i$iv$iv$iv <= lastIndex$iv$iv$iv) { while (true) {
/* 1682 */         long slot$iv$iv$iv = m$iv$iv$iv[i$iv$iv$iv];
/* 1683 */         long $this$maskEmptyOrDeleted$iv$iv$iv$iv = slot$iv$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1684 */         if (($this$maskEmptyOrDeleted$iv$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) {
/* 1685 */           int bitCount$iv$iv$iv = 8 - ((i$iv$iv$iv - lastIndex$iv$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1686 */           for (int j$iv$iv$iv = 0; j$iv$iv$iv < bitCount$iv$iv$iv; j$iv$iv$iv++) {
/* 1687 */             long value$iv$iv$iv$iv = slot$iv$iv$iv & 0xFFL; int $i$f$isFull = 0;
/* 1688 */             if ((value$iv$iv$iv$iv < 128L)) {
/* 1689 */               int index$iv$iv$iv = (i$iv$iv$iv << 3) + j$iv$iv$iv;
/* 1690 */               int index$iv$iv = index$iv$iv$iv, $i$a$-forEachIndexed-IntObjectMap$forEach$1$iv$iv = 0;
/* 1691 */               Object object = v$iv$iv[index$iv$iv]; int key$iv = k$iv$iv[index$iv$iv], $i$a$-forEach-IntObjectMap$joinToString$2$1$iv = 0;
/* 1692 */               if (index$iv == limit$iv) {
/* 1693 */                 $this$joinToString_u24lambda_u2410$iv.append(truncated$iv);
/*      */                 // Byte code: goto -> 352
/*      */               } 
/* 1696 */               if (index$iv != 0) {
/* 1697 */                 $this$joinToString_u24lambda_u2410$iv.append(separator);
/*      */               }
/* 1699 */               $this$joinToString_u24lambda_u2410$iv.append((CharSequence)transform.invoke(Integer.valueOf(key$iv), object));
/* 1700 */               index$iv++;
/*      */             } 
/*      */             
/* 1703 */             slot$iv$iv$iv >>= 8L;
/*      */           } 
/* 1705 */           if (bitCount$iv$iv$iv == 8)
/*      */             continue;  // Byte code: goto -> 342
/*      */         }  continue; if (i$iv$iv$iv != lastIndex$iv$iv$iv) { i$iv$iv$iv++; continue; }
/*      */          // Byte code: goto -> 341
/*      */       }  }
/* 1710 */     else { $this$joinToString_u24lambda_u2410$iv.append(postfix$iv); }
/*      */      Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()");
/* 1712 */     return stringBuilder1.toString(); } @JvmOverloads @NotNull public final String joinToString(@NotNull Function2 transform) { Intrinsics.checkNotNullParameter(transform, "transform"); int $i$f$joinToString = 0;
/* 1713 */     CharSequence separator$iv = ", ";
/* 1714 */     CharSequence prefix$iv = "";
/* 1715 */     CharSequence postfix$iv = "";
/* 1716 */     int limit$iv = -1;
/* 1717 */     CharSequence truncated$iv = "...";
/*      */     int i = 0;
/* 1719 */     StringBuilder stringBuilder1 = new StringBuilder(), $this$joinToString_u24lambda_u2410$iv = stringBuilder1; int $i$a$-buildString-IntObjectMap$joinToString$2$iv = 0;
/* 1720 */     $this$joinToString_u24lambda_u2410$iv.append(prefix$iv);
/* 1721 */     int index$iv = 0;
/* 1722 */     IntObjectMap this_$iv$iv = this; int $i$f$forEach = 0;
/* 1723 */     int[] k$iv$iv = this_$iv$iv.keys;
/* 1724 */     Object[] v$iv$iv = this_$iv$iv.values;
/*      */     
/* 1726 */     IntObjectMap this_$iv$iv$iv = this_$iv$iv; int $i$f$forEachIndexed = 0;
/* 1727 */     long[] m$iv$iv$iv = this_$iv$iv$iv.metadata;
/* 1728 */     int lastIndex$iv$iv$iv = m$iv$iv$iv.length - 2;
/*      */     
/* 1730 */     int i$iv$iv$iv = 0; if (i$iv$iv$iv <= lastIndex$iv$iv$iv) { while (true) {
/* 1731 */         long slot$iv$iv$iv = m$iv$iv$iv[i$iv$iv$iv];
/* 1732 */         long $this$maskEmptyOrDeleted$iv$iv$iv$iv = slot$iv$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1733 */         if (($this$maskEmptyOrDeleted$iv$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) {
/* 1734 */           int bitCount$iv$iv$iv = 8 - ((i$iv$iv$iv - lastIndex$iv$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1735 */           for (int j$iv$iv$iv = 0; j$iv$iv$iv < bitCount$iv$iv$iv; j$iv$iv$iv++) {
/* 1736 */             long value$iv$iv$iv$iv = slot$iv$iv$iv & 0xFFL; int $i$f$isFull = 0;
/* 1737 */             if ((value$iv$iv$iv$iv < 128L)) {
/* 1738 */               int index$iv$iv$iv = (i$iv$iv$iv << 3) + j$iv$iv$iv;
/* 1739 */               int index$iv$iv = index$iv$iv$iv, $i$a$-forEachIndexed-IntObjectMap$forEach$1$iv$iv = 0;
/* 1740 */               Object object = v$iv$iv[index$iv$iv]; int key$iv = k$iv$iv[index$iv$iv], $i$a$-forEach-IntObjectMap$joinToString$2$1$iv = 0;
/* 1741 */               if (index$iv == limit$iv) {
/* 1742 */                 $this$joinToString_u24lambda_u2410$iv.append(truncated$iv);
/*      */                 // Byte code: goto -> 353
/*      */               } 
/* 1745 */               if (index$iv != 0) {
/* 1746 */                 $this$joinToString_u24lambda_u2410$iv.append(separator$iv);
/*      */               }
/* 1748 */               $this$joinToString_u24lambda_u2410$iv.append((CharSequence)transform.invoke(Integer.valueOf(key$iv), object));
/* 1749 */               index$iv++;
/*      */             } 
/*      */             
/* 1752 */             slot$iv$iv$iv >>= 8L;
/*      */           } 
/* 1754 */           if (bitCount$iv$iv$iv == 8)
/*      */             continue;  // Byte code: goto -> 343
/*      */         }  continue; if (i$iv$iv$iv != lastIndex$iv$iv$iv) { i$iv$iv$iv++; continue; }
/*      */          // Byte code: goto -> 342
/*      */       }  }
/* 1759 */     else { $this$joinToString_u24lambda_u2410$iv.append(postfix$iv); }
/*      */     
/*      */     Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()");
/*      */     return stringBuilder1.toString(); }
/*      */ 
/*      */   
/*      */   private IntObjectMap() {}
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     Intrinsics.checkNotNullParameter(prefix, "prefix");
/*      */     Intrinsics.checkNotNullParameter(postfix, "postfix");
/*      */     return joinToString$default(this, separator, prefix, postfix, limit, null, 16, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     Intrinsics.checkNotNullParameter(prefix, "prefix");
/*      */     Intrinsics.checkNotNullParameter(postfix, "postfix");
/*      */     return joinToString$default(this, separator, prefix, postfix, 0, null, 24, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     Intrinsics.checkNotNullParameter(prefix, "prefix");
/*      */     return joinToString$default(this, separator, prefix, null, 0, null, 28, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     return joinToString$default(this, separator, null, null, 0, null, 30, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString() {
/*      */     return joinToString$default(this, null, null, null, 0, null, 31, null);
/*      */   }
/*      */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\collection-jvm-1.4.0.jar!\androidx\collection\IntObjectMap.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */