/*      */ package androidx.collection;
/*      */ 
/*      */ import androidx.collection.internal.ContainerHelpersKt;
/*      */ import java.util.Collection;
/*      */ import java.util.Iterator;
/*      */ import java.util.Map;
/*      */ import java.util.Set;
/*      */ import java.util.function.BiFunction;
/*      */ import java.util.function.Function;
/*      */ import java.util.function.Predicate;
/*      */ import kotlin.Metadata;
/*      */ import kotlin.PublishedApi;
/*      */ import kotlin.Unit;
/*      */ import kotlin.coroutines.Continuation;
/*      */ import kotlin.coroutines.jvm.internal.DebugMetadata;
/*      */ import kotlin.coroutines.jvm.internal.RestrictedSuspendLambda;
/*      */ import kotlin.jvm.JvmField;
/*      */ import kotlin.jvm.JvmOverloads;
/*      */ import kotlin.jvm.functions.Function0;
/*      */ import kotlin.jvm.functions.Function1;
/*      */ import kotlin.jvm.functions.Function2;
/*      */ import kotlin.jvm.internal.CollectionToArray;
/*      */ import kotlin.jvm.internal.DefaultConstructorMarker;
/*      */ import kotlin.jvm.internal.Intrinsics;
/*      */ import kotlin.jvm.internal.SourceDebugExtension;
/*      */ import kotlin.jvm.internal.markers.KMappedMarker;
/*      */ import kotlin.sequences.SequenceScope;
/*      */ import kotlin.sequences.SequencesKt;
/*      */ import org.jetbrains.annotations.NotNull;
/*      */ import org.jetbrains.annotations.Nullable;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ @Metadata(mv = {1, 8, 0}, k = 1, xi = 48, d1 = {"\000r\n\002\030\002\n\002\b\002\n\002\020\000\n\002\b\002\n\002\020\b\n\002\b\005\n\002\020\021\n\002\b\003\n\002\020\026\n\002\b\006\n\002\020\013\n\000\n\002\030\002\n\002\b\002\n\002\020\016\n\002\b\002\n\002\020$\n\002\b\r\n\002\020\002\n\000\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\t\n\002\030\002\n\002\b\006\n\002\020\r\n\002\b\b\n\002\030\002\n\000\b6\030\000*\004\b\000\020\001*\004\b\001\020\0022\0020\003:\001KB\007\b\004¢\006\002\020\004J&\020\026\032\0020\0272\030\020\030\032\024\022\004\022\0028\000\022\004\022\0028\001\022\004\022\0020\0270\031H\bø\001\000J\006\020\032\032\0020\027J&\020\032\032\0020\0272\030\020\030\032\024\022\004\022\0028\000\022\004\022\0028\001\022\004\022\0020\0270\031H\bø\001\000J\r\020\033\032\0020\034H\000¢\006\002\b\035J\022\020\036\032\016\022\004\022\0028\000\022\004\022\0028\0010\037J\026\020 \032\0020\0272\006\020!\032\0028\000H\002¢\006\002\020\"J\023\020#\032\0020\0272\006\020!\032\0028\000¢\006\002\020\"J\023\020$\032\0020\0272\006\020%\032\0028\001¢\006\002\020\"J\006\020&\032\0020\006J&\020&\032\0020\0062\030\020\030\032\024\022\004\022\0028\000\022\004\022\0028\001\022\004\022\0020\0270\031H\bø\001\000J\023\020'\032\0020\0272\b\020(\032\004\030\0010\003H\002J\030\020)\032\0020\0062\006\020!\032\0028\000H\b¢\006\004\b*\020+JD\020,\032\0020-26\020.\0322\022\023\022\0218\000¢\006\f\b/\022\b\b0\022\004\b\b(!\022\023\022\0218\001¢\006\f\b/\022\b\b0\022\004\b\b(%\022\004\022\0020-0\031H\bø\001\000J/\0201\032\0020-2!\020.\032\035\022\023\022\0210\006¢\006\f\b/\022\b\b0\022\004\b\b(3\022\004\022\0020-02H\bø\001\000J/\0204\032\0020-2!\020.\032\035\022\023\022\0218\000¢\006\f\b/\022\b\b0\022\004\b\b(!\022\004\022\0020-02H\bø\001\000J/\0205\032\0020-2!\020.\032\035\022\023\022\0218\001¢\006\f\b/\022\b\b0\022\004\b\b(%\022\004\022\0020-02H\bø\001\000J\030\0206\032\004\030\0018\0012\006\020!\032\0028\000H\002¢\006\002\0207J\033\0208\032\0028\0012\006\020!\032\0028\0002\006\0209\032\0028\001¢\006\002\020:J'\020;\032\0028\0012\006\020!\032\0028\0002\f\0209\032\b\022\004\022\0028\0010<H\bø\001\000¢\006\002\020=J\b\020>\032\0020\006H\026J\006\020?\032\0020\027J\006\020@\032\0020\027Jv\020A\032\0020\0342\b\b\002\020B\032\0020C2\b\b\002\020D\032\0020C2\b\b\002\020E\032\0020C2\b\b\002\020F\032\0020\0062\b\b\002\020G\032\0020C2:\b\002\020H\0324\022\023\022\0218\000¢\006\f\b/\022\b\b0\022\004\b\b(!\022\023\022\0218\001¢\006\f\b/\022\b\b0\022\004\b\b(%\022\004\022\0020C\030\0010\031H\007J\006\020I\032\0020\027J\b\020J\032\0020\034H\026R\022\020\005\032\0020\0068\000@\000X\016¢\006\002\n\000R\022\020\007\032\0020\0068\000@\000X\016¢\006\002\n\000R\021\020\b\032\0020\0068F¢\006\006\032\004\b\t\020\nR\"\020\013\032\n\022\006\022\004\030\0010\0030\f8\000@\000X\016¢\006\n\n\002\020\016\022\004\b\r\020\004R\030\020\017\032\0020\0208\000@\000X\016¢\006\b\n\000\022\004\b\021\020\004R\021\020\022\032\0020\0068F¢\006\006\032\004\b\023\020\nR\"\020\024\032\n\022\006\022\004\030\0010\0030\f8\000@\000X\016¢\006\n\n\002\020\016\022\004\b\025\020\004\001\001L\002\007\n\005\b20\001¨\006M"}, d2 = {"Landroidx/collection/ScatterMap;", "K", "V", "", "()V", "_capacity", "", "_size", "capacity", "getCapacity", "()I", "keys", "", "getKeys$annotations", "[Ljava/lang/Object;", "metadata", "", "getMetadata$annotations", "size", "getSize", "values", "getValues$annotations", "all", "", "predicate", "Lkotlin/Function2;", "any", "asDebugString", "", "asDebugString$collection", "asMap", "", "contains", "key", "(Ljava/lang/Object;)Z", "containsKey", "containsValue", "value", "count", "equals", "other", "findKeyIndex", "findKeyIndex$collection", "(Ljava/lang/Object;)I", "forEach", "", "block", "Lkotlin/ParameterName;", "name", "forEachIndexed", "Lkotlin/Function1;", "index", "forEachKey", "forEachValue", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", "getOrDefault", "defaultValue", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "getOrElse", "Lkotlin/Function0;", "(Ljava/lang/Object;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "hashCode", "isEmpty", "isNotEmpty", "joinToString", "separator", "", "prefix", "postfix", "limit", "truncated", "transform", "none", "toString", "MapWrapper", "Landroidx/collection/MutableScatterMap;", "collection"})
/*      */ @SourceDebugExtension({"SMAP\nScatterMap.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap\n+ 2 ScatterMap.kt\nandroidx/collection/ScatterMapKt\n*L\n1#1,1834:1\n633#1:1835\n634#1:1839\n636#1,2:1841\n638#1,4:1844\n642#1:1851\n643#1:1855\n644#1:1857\n645#1,4:1860\n651#1:1865\n652#1,8:1867\n633#1:1875\n634#1:1879\n636#1,2:1881\n638#1,4:1884\n642#1:1891\n643#1:1895\n644#1:1897\n645#1,4:1900\n651#1:1905\n652#1,8:1907\n363#1,6:1917\n373#1,3:1924\n376#1,9:1928\n363#1,6:1937\n373#1,3:1944\n376#1,9:1948\n363#1,6:1957\n373#1,3:1964\n376#1,9:1968\n391#1,4:1977\n363#1,6:1981\n373#1,3:1988\n376#1,2:1992\n396#1,2:1994\n379#1,6:1996\n398#1:2002\n391#1,4:2003\n363#1,6:2007\n373#1,3:2014\n376#1,2:2018\n396#1,2:2020\n379#1,6:2022\n398#1:2028\n391#1,4:2029\n363#1,6:2033\n373#1,3:2040\n376#1,2:2044\n396#1,2:2046\n379#1,6:2048\n398#1:2054\n633#1:2055\n634#1:2059\n636#1,2:2061\n638#1,4:2064\n642#1:2071\n643#1:2075\n644#1:2077\n645#1,4:2080\n651#1:2085\n652#1,8:2087\n633#1:2095\n634#1:2099\n636#1,2:2101\n638#1,4:2104\n642#1:2111\n643#1:2115\n644#1:2117\n645#1,4:2120\n651#1:2125\n652#1,8:2127\n418#1,3:2135\n363#1,6:2138\n373#1,3:2145\n376#1,2:2149\n422#1,2:2151\n379#1,6:2153\n424#1:2159\n391#1,4:2160\n363#1,6:2164\n373#1,3:2171\n376#1,2:2175\n396#1,2:2177\n379#1,6:2179\n398#1:2185\n391#1,4:2186\n363#1,6:2190\n373#1,3:2197\n376#1,2:2201\n396#1,2:2203\n379#1,6:2205\n398#1:2211\n391#1,4:2212\n363#1,6:2216\n373#1,3:2223\n376#1,2:2227\n396#1,2:2229\n379#1,6:2231\n398#1:2237\n391#1,4:2238\n363#1,6:2242\n373#1,3:2249\n376#1,2:2253\n396#1,2:2255\n379#1,6:2257\n398#1:2263\n1589#2,3:1836\n1603#2:1840\n1599#2:1843\n1779#2,3:1848\n1793#2,3:1852\n1717#2:1856\n1705#2:1858\n1699#2:1859\n1712#2:1864\n1802#2:1866\n1589#2,3:1876\n1603#2:1880\n1599#2:1883\n1779#2,3:1888\n1793#2,3:1892\n1717#2:1896\n1705#2:1898\n1699#2:1899\n1712#2:1904\n1802#2:1906\n1810#2:1915\n1672#2:1916\n1810#2:1923\n1672#2:1927\n1810#2:1943\n1672#2:1947\n1810#2:1963\n1672#2:1967\n1810#2:1987\n1672#2:1991\n1810#2:2013\n1672#2:2017\n1810#2:2039\n1672#2:2043\n1589#2,3:2056\n1603#2:2060\n1599#2:2063\n1779#2,3:2068\n1793#2,3:2072\n1717#2:2076\n1705#2:2078\n1699#2:2079\n1712#2:2084\n1802#2:2086\n1589#2,3:2096\n1603#2:2100\n1599#2:2103\n1779#2,3:2108\n1793#2,3:2112\n1717#2:2116\n1705#2:2118\n1699#2:2119\n1712#2:2124\n1802#2:2126\n1810#2:2144\n1672#2:2148\n1810#2:2170\n1672#2:2174\n1810#2:2196\n1672#2:2200\n1810#2:2222\n1672#2:2226\n1810#2:2248\n1672#2:2252\n1645#2:2264\n1589#2,3:2265\n1603#2:2268\n1599#2:2269\n1779#2,3:2270\n1793#2,3:2273\n1717#2:2276\n1705#2:2277\n1699#2:2278\n1712#2:2279\n1802#2:2280\n*S KotlinDebug\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap\n*L\n330#1:1835\n330#1:1839\n330#1:1841,2\n330#1:1844,4\n330#1:1851\n330#1:1855\n330#1:1857\n330#1:1860,4\n330#1:1865\n330#1:1867,8\n340#1:1875\n340#1:1879\n340#1:1881,2\n340#1:1884,4\n340#1:1891\n340#1:1895\n340#1:1897\n340#1:1900,4\n340#1:1905\n340#1:1907,8\n394#1:1917,6\n394#1:1924,3\n394#1:1928,9\n407#1:1937,6\n407#1:1944,3\n407#1:1948,9\n420#1:1957,6\n420#1:1964,3\n420#1:1968,9\n430#1:1977,4\n430#1:1981,6\n430#1:1988,3\n430#1:1992,2\n430#1:1994,2\n430#1:1996,6\n430#1:2002\n440#1:2003,4\n440#1:2007,6\n440#1:2014,3\n440#1:2018,2\n440#1:2020,2\n440#1:2022,6\n440#1:2028\n456#1:2029,4\n456#1:2033,6\n456#1:2040,3\n456#1:2044,2\n456#1:2046,2\n456#1:2048,6\n456#1:2054\n466#1:2055\n466#1:2059\n466#1:2061,2\n466#1:2064,4\n466#1:2071\n466#1:2075\n466#1:2077\n466#1:2080,4\n466#1:2085\n466#1:2087,8\n472#1:2095\n472#1:2099\n472#1:2101,2\n472#1:2104,4\n472#1:2111\n472#1:2115\n472#1:2117\n472#1:2120,4\n472#1:2125\n472#1:2127,8\n479#1:2135,3\n479#1:2138,6\n479#1:2145,3\n479#1:2149,2\n479#1:2151,2\n479#1:2153,6\n479#1:2159\n506#1:2160,4\n506#1:2164,6\n506#1:2171,3\n506#1:2175,2\n506#1:2177,2\n506#1:2179,6\n506#1:2185\n533#1:2186,4\n533#1:2190,6\n533#1:2197,3\n533#1:2201,2\n533#1:2203,2\n533#1:2205,6\n533#1:2211\n562#1:2212,4\n562#1:2216,6\n562#1:2223,3\n562#1:2227,2\n562#1:2229,2\n562#1:2231,6\n562#1:2237\n588#1:2238,4\n588#1:2242,6\n588#1:2249,3\n588#1:2253,2\n588#1:2255,2\n588#1:2257,6\n588#1:2263\n330#1:1836,3\n330#1:1840\n330#1:1843\n330#1:1848,3\n330#1:1852,3\n330#1:1856\n330#1:1858\n330#1:1859\n330#1:1864\n330#1:1866\n340#1:1876,3\n340#1:1880\n340#1:1883\n340#1:1888,3\n340#1:1892,3\n340#1:1896\n340#1:1898\n340#1:1899\n340#1:1904\n340#1:1906\n368#1:1915\n375#1:1916\n394#1:1923\n394#1:1927\n407#1:1943\n407#1:1947\n420#1:1963\n420#1:1967\n430#1:1987\n430#1:1991\n440#1:2013\n440#1:2017\n456#1:2039\n456#1:2043\n466#1:2056,3\n466#1:2060\n466#1:2063\n466#1:2068,3\n466#1:2072,3\n466#1:2076\n466#1:2078\n466#1:2079\n466#1:2084\n466#1:2086\n472#1:2096,3\n472#1:2100\n472#1:2103\n472#1:2108,3\n472#1:2112,3\n472#1:2116\n472#1:2118\n472#1:2119\n472#1:2124\n472#1:2126\n479#1:2144\n479#1:2148\n506#1:2170\n506#1:2174\n533#1:2196\n533#1:2200\n562#1:2222\n562#1:2226\n588#1:2248\n588#1:2252\n605#1:2264\n633#1:2265,3\n634#1:2268\n637#1:2269\n641#1:2270,3\n642#1:2273,3\n643#1:2276\n644#1:2277\n644#1:2278\n648#1:2279\n651#1:2280\n*E\n"})
/*      */ public abstract class ScatterMap<K, V>
/*      */ {
/*      */   @JvmField
/*      */   @NotNull
/*  272 */   public long[] metadata = ScatterMapKt.EmptyGroup;
/*      */   
/*      */   @JvmField
/*      */   @NotNull
/*  276 */   public Object[] keys = ContainerHelpersKt.EMPTY_OBJECTS;
/*      */   
/*      */   @JvmField
/*      */   @NotNull
/*  280 */   public Object[] values = ContainerHelpersKt.EMPTY_OBJECTS;
/*      */ 
/*      */   
/*      */   @JvmField
/*      */   public int _capacity;
/*      */ 
/*      */   
/*      */   @JvmField
/*      */   public int _size;
/*      */ 
/*      */   
/*      */   public final int getCapacity() {
/*  292 */     return this._capacity;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final int getSize() {
/*  303 */     return this._size;
/*      */   }
/*      */ 
/*      */   
/*      */   public final boolean any() {
/*  308 */     return (this._size != 0);
/*      */   }
/*      */ 
/*      */   
/*      */   public final boolean none() {
/*  313 */     return (this._size == 0);
/*      */   }
/*      */ 
/*      */   
/*      */   public final boolean isEmpty() {
/*  318 */     return (this._size == 0);
/*      */   }
/*      */ 
/*      */   
/*      */   public final boolean isNotEmpty() {
/*  323 */     return (this._size != 0);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   @Nullable
/*      */   public final V get(Object key) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: astore_3
/*      */     //   2: iconst_0
/*      */     //   3: istore #4
/*      */     //   5: iconst_0
/*      */     //   6: istore #5
/*      */     //   8: aload_1
/*      */     //   9: dup
/*      */     //   10: ifnull -> 19
/*      */     //   13: invokevirtual hashCode : ()I
/*      */     //   16: goto -> 21
/*      */     //   19: pop
/*      */     //   20: iconst_0
/*      */     //   21: ldc -862048943
/*      */     //   23: imul
/*      */     //   24: istore #6
/*      */     //   26: iload #6
/*      */     //   28: iload #6
/*      */     //   30: bipush #16
/*      */     //   32: ishl
/*      */     //   33: ixor
/*      */     //   34: istore #7
/*      */     //   36: iconst_0
/*      */     //   37: istore #6
/*      */     //   39: iload #7
/*      */     //   41: bipush #127
/*      */     //   43: iand
/*      */     //   44: istore #5
/*      */     //   46: aload_3
/*      */     //   47: getfield _capacity : I
/*      */     //   50: istore #6
/*      */     //   52: iconst_0
/*      */     //   53: istore #8
/*      */     //   55: iload #7
/*      */     //   57: bipush #7
/*      */     //   59: iushr
/*      */     //   60: iload #6
/*      */     //   62: iand
/*      */     //   63: istore #9
/*      */     //   65: iconst_0
/*      */     //   66: istore #8
/*      */     //   68: nop
/*      */     //   69: aload_3
/*      */     //   70: getfield metadata : [J
/*      */     //   73: astore #10
/*      */     //   75: iconst_0
/*      */     //   76: istore #11
/*      */     //   78: iload #9
/*      */     //   80: iconst_3
/*      */     //   81: ishr
/*      */     //   82: istore #12
/*      */     //   84: iload #9
/*      */     //   86: bipush #7
/*      */     //   88: iand
/*      */     //   89: iconst_3
/*      */     //   90: ishl
/*      */     //   91: istore #13
/*      */     //   93: aload #10
/*      */     //   95: iload #12
/*      */     //   97: laload
/*      */     //   98: iload #13
/*      */     //   100: lushr
/*      */     //   101: aload #10
/*      */     //   103: iload #12
/*      */     //   105: iconst_1
/*      */     //   106: iadd
/*      */     //   107: laload
/*      */     //   108: bipush #64
/*      */     //   110: iload #13
/*      */     //   112: isub
/*      */     //   113: lshl
/*      */     //   114: iload #13
/*      */     //   116: i2l
/*      */     //   117: lneg
/*      */     //   118: bipush #63
/*      */     //   120: lshr
/*      */     //   121: land
/*      */     //   122: lor
/*      */     //   123: lstore #14
/*      */     //   125: lload #14
/*      */     //   127: lstore #16
/*      */     //   129: iconst_0
/*      */     //   130: istore #18
/*      */     //   132: lload #16
/*      */     //   134: ldc2_w 72340172838076673
/*      */     //   137: iload #5
/*      */     //   139: i2l
/*      */     //   140: lmul
/*      */     //   141: lxor
/*      */     //   142: lstore #19
/*      */     //   144: lload #19
/*      */     //   146: ldc2_w 72340172838076673
/*      */     //   149: lsub
/*      */     //   150: lload #19
/*      */     //   152: ldc2_w -1
/*      */     //   155: lxor
/*      */     //   156: land
/*      */     //   157: ldc2_w -9187201950435737472
/*      */     //   160: land
/*      */     //   161: lstore #21
/*      */     //   163: lload #21
/*      */     //   165: lstore #16
/*      */     //   167: iconst_0
/*      */     //   168: istore #18
/*      */     //   170: lload #16
/*      */     //   172: lconst_0
/*      */     //   173: lcmp
/*      */     //   174: ifeq -> 181
/*      */     //   177: iconst_1
/*      */     //   178: goto -> 182
/*      */     //   181: iconst_0
/*      */     //   182: ifeq -> 253
/*      */     //   185: iload #9
/*      */     //   187: lload #21
/*      */     //   189: lstore #23
/*      */     //   191: iconst_0
/*      */     //   192: istore #25
/*      */     //   194: lload #23
/*      */     //   196: lstore #26
/*      */     //   198: iconst_0
/*      */     //   199: istore #28
/*      */     //   201: lload #26
/*      */     //   203: invokestatic numberOfTrailingZeros : (J)I
/*      */     //   206: iconst_3
/*      */     //   207: ishr
/*      */     //   208: nop
/*      */     //   209: iadd
/*      */     //   210: iload #6
/*      */     //   212: iand
/*      */     //   213: istore #12
/*      */     //   215: aload_3
/*      */     //   216: getfield keys : [Ljava/lang/Object;
/*      */     //   219: iload #12
/*      */     //   221: aaload
/*      */     //   222: aload_1
/*      */     //   223: invokestatic areEqual : (Ljava/lang/Object;Ljava/lang/Object;)Z
/*      */     //   226: ifeq -> 234
/*      */     //   229: iload #12
/*      */     //   231: goto -> 302
/*      */     //   234: lload #21
/*      */     //   236: lstore #23
/*      */     //   238: iconst_0
/*      */     //   239: istore #25
/*      */     //   241: lload #23
/*      */     //   243: lload #23
/*      */     //   245: lconst_1
/*      */     //   246: lsub
/*      */     //   247: land
/*      */     //   248: lstore #21
/*      */     //   250: goto -> 163
/*      */     //   253: lload #14
/*      */     //   255: lstore #16
/*      */     //   257: iconst_0
/*      */     //   258: istore #18
/*      */     //   260: lload #16
/*      */     //   262: lload #16
/*      */     //   264: ldc2_w -1
/*      */     //   267: lxor
/*      */     //   268: bipush #6
/*      */     //   270: lshl
/*      */     //   271: land
/*      */     //   272: ldc2_w -9187201950435737472
/*      */     //   275: land
/*      */     //   276: lconst_0
/*      */     //   277: lcmp
/*      */     //   278: ifeq -> 284
/*      */     //   281: goto -> 301
/*      */     //   284: iinc #8, 8
/*      */     //   287: nop
/*      */     //   288: iload #9
/*      */     //   290: iload #8
/*      */     //   292: iadd
/*      */     //   293: iload #6
/*      */     //   295: iand
/*      */     //   296: istore #9
/*      */     //   298: goto -> 68
/*      */     //   301: iconst_m1
/*      */     //   302: istore_2
/*      */     //   303: iload_2
/*      */     //   304: iflt -> 316
/*      */     //   307: aload_0
/*      */     //   308: getfield values : [Ljava/lang/Object;
/*      */     //   311: iload_2
/*      */     //   312: aaload
/*      */     //   313: goto -> 317
/*      */     //   316: aconst_null
/*      */     //   317: areturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #330	-> 0
/*      */     //   #1835	-> 5
/*      */     //   #1836	-> 8
/*      */     //   #1836	-> 21
/*      */     //   #1838	-> 26
/*      */     //   #1835	-> 34
/*      */     //   #1839	-> 36
/*      */     //   #1840	-> 39
/*      */     //   #1839	-> 44
/*      */     //   #1841	-> 46
/*      */     //   #1842	-> 52
/*      */     //   #1843	-> 55
/*      */     //   #1842	-> 60
/*      */     //   #1844	-> 65
/*      */     //   #1846	-> 68
/*      */     //   #1847	-> 69
/*      */     //   #1848	-> 78
/*      */     //   #1849	-> 84
/*      */     //   #1850	-> 93
/*      */     //   #1847	-> 123
/*      */     //   #1851	-> 125
/*      */     //   #1852	-> 132
/*      */     //   #1854	-> 144
/*      */     //   #1851	-> 161
/*      */     //   #1855	-> 163
/*      */     //   #1856	-> 170
/*      */     //   #1857	-> 185
/*      */     //   #1858	-> 194
/*      */     //   #1859	-> 201
/*      */     //   #1859	-> 206
/*      */     //   #1858	-> 208
/*      */     //   #1857	-> 209
/*      */     //   #1860	-> 215
/*      */     //   #1861	-> 229
/*      */     //   #1863	-> 234
/*      */     //   #1864	-> 241
/*      */     //   #1863	-> 248
/*      */     //   #1865	-> 253
/*      */     //   #1866	-> 260
/*      */     //   #1865	-> 276
/*      */     //   #1867	-> 281
/*      */     //   #1870	-> 287
/*      */     //   #1871	-> 288
/*      */     //   #1874	-> 301
/*      */     //   #330	-> 302
/*      */     //   #332	-> 303
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   8	26	5	$i$f$hash	I
/*      */     //   26	8	6	hash$iv$iv	I
/*      */     //   39	5	6	$i$f$h2	I
/*      */     //   55	5	8	$i$f$h1	I
/*      */     //   78	45	11	$i$f$group	I
/*      */     //   84	39	12	i$iv$iv	I
/*      */     //   93	30	13	b$iv$iv	I
/*      */     //   75	48	10	metadata$iv$iv	[J
/*      */     //   132	29	18	$i$f$match	I
/*      */     //   144	17	19	x$iv$iv	J
/*      */     //   129	32	16	$this$match$iv$iv	J
/*      */     //   170	12	18	$i$f$hasNext	I
/*      */     //   167	15	16	$this$hasNext$iv$iv	J
/*      */     //   201	7	28	$i$f$lowestBitSet	I
/*      */     //   198	10	26	$this$lowestBitSet$iv$iv$iv	J
/*      */     //   194	15	25	$i$f$get	I
/*      */     //   191	18	23	$this$get$iv$iv	J
/*      */     //   241	7	25	$i$f$next	I
/*      */     //   238	10	23	$this$next$iv$iv	J
/*      */     //   215	35	12	index$iv	I
/*      */     //   260	16	18	$i$f$maskEmpty	I
/*      */     //   257	19	16	$this$maskEmpty$iv$iv	J
/*      */     //   125	173	14	g$iv	J
/*      */     //   163	135	21	m$iv	J
/*      */     //   5	297	4	$i$f$findKeyIndex$collection	I
/*      */     //   36	266	7	hash$iv	I
/*      */     //   46	256	5	hash2$iv	I
/*      */     //   52	250	6	probeMask$iv	I
/*      */     //   65	237	9	probeOffset$iv	I
/*      */     //   68	234	8	probeIndex$iv	I
/*      */     //   2	300	3	this_$iv	Landroidx/collection/ScatterMap;
/*      */     //   303	15	2	index	I
/*      */     //   0	318	0	this	Landroidx/collection/ScatterMap;
/*      */     //   0	318	1	key	Ljava/lang/Object;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final V getOrDefault(Object key, Object defaultValue) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: astore #4
/*      */     //   3: iconst_0
/*      */     //   4: istore #5
/*      */     //   6: iconst_0
/*      */     //   7: istore #6
/*      */     //   9: aload_1
/*      */     //   10: dup
/*      */     //   11: ifnull -> 20
/*      */     //   14: invokevirtual hashCode : ()I
/*      */     //   17: goto -> 22
/*      */     //   20: pop
/*      */     //   21: iconst_0
/*      */     //   22: ldc -862048943
/*      */     //   24: imul
/*      */     //   25: istore #7
/*      */     //   27: iload #7
/*      */     //   29: iload #7
/*      */     //   31: bipush #16
/*      */     //   33: ishl
/*      */     //   34: ixor
/*      */     //   35: istore #8
/*      */     //   37: iconst_0
/*      */     //   38: istore #7
/*      */     //   40: iload #8
/*      */     //   42: bipush #127
/*      */     //   44: iand
/*      */     //   45: istore #6
/*      */     //   47: aload #4
/*      */     //   49: getfield _capacity : I
/*      */     //   52: istore #7
/*      */     //   54: iconst_0
/*      */     //   55: istore #9
/*      */     //   57: iload #8
/*      */     //   59: bipush #7
/*      */     //   61: iushr
/*      */     //   62: iload #7
/*      */     //   64: iand
/*      */     //   65: istore #10
/*      */     //   67: iconst_0
/*      */     //   68: istore #9
/*      */     //   70: nop
/*      */     //   71: aload #4
/*      */     //   73: getfield metadata : [J
/*      */     //   76: astore #11
/*      */     //   78: iconst_0
/*      */     //   79: istore #12
/*      */     //   81: iload #10
/*      */     //   83: iconst_3
/*      */     //   84: ishr
/*      */     //   85: istore #13
/*      */     //   87: iload #10
/*      */     //   89: bipush #7
/*      */     //   91: iand
/*      */     //   92: iconst_3
/*      */     //   93: ishl
/*      */     //   94: istore #14
/*      */     //   96: aload #11
/*      */     //   98: iload #13
/*      */     //   100: laload
/*      */     //   101: iload #14
/*      */     //   103: lushr
/*      */     //   104: aload #11
/*      */     //   106: iload #13
/*      */     //   108: iconst_1
/*      */     //   109: iadd
/*      */     //   110: laload
/*      */     //   111: bipush #64
/*      */     //   113: iload #14
/*      */     //   115: isub
/*      */     //   116: lshl
/*      */     //   117: iload #14
/*      */     //   119: i2l
/*      */     //   120: lneg
/*      */     //   121: bipush #63
/*      */     //   123: lshr
/*      */     //   124: land
/*      */     //   125: lor
/*      */     //   126: lstore #15
/*      */     //   128: lload #15
/*      */     //   130: lstore #17
/*      */     //   132: iconst_0
/*      */     //   133: istore #19
/*      */     //   135: lload #17
/*      */     //   137: ldc2_w 72340172838076673
/*      */     //   140: iload #6
/*      */     //   142: i2l
/*      */     //   143: lmul
/*      */     //   144: lxor
/*      */     //   145: lstore #20
/*      */     //   147: lload #20
/*      */     //   149: ldc2_w 72340172838076673
/*      */     //   152: lsub
/*      */     //   153: lload #20
/*      */     //   155: ldc2_w -1
/*      */     //   158: lxor
/*      */     //   159: land
/*      */     //   160: ldc2_w -9187201950435737472
/*      */     //   163: land
/*      */     //   164: lstore #22
/*      */     //   166: lload #22
/*      */     //   168: lstore #17
/*      */     //   170: iconst_0
/*      */     //   171: istore #19
/*      */     //   173: lload #17
/*      */     //   175: lconst_0
/*      */     //   176: lcmp
/*      */     //   177: ifeq -> 184
/*      */     //   180: iconst_1
/*      */     //   181: goto -> 185
/*      */     //   184: iconst_0
/*      */     //   185: ifeq -> 257
/*      */     //   188: iload #10
/*      */     //   190: lload #22
/*      */     //   192: lstore #24
/*      */     //   194: iconst_0
/*      */     //   195: istore #26
/*      */     //   197: lload #24
/*      */     //   199: lstore #27
/*      */     //   201: iconst_0
/*      */     //   202: istore #29
/*      */     //   204: lload #27
/*      */     //   206: invokestatic numberOfTrailingZeros : (J)I
/*      */     //   209: iconst_3
/*      */     //   210: ishr
/*      */     //   211: nop
/*      */     //   212: iadd
/*      */     //   213: iload #7
/*      */     //   215: iand
/*      */     //   216: istore #13
/*      */     //   218: aload #4
/*      */     //   220: getfield keys : [Ljava/lang/Object;
/*      */     //   223: iload #13
/*      */     //   225: aaload
/*      */     //   226: aload_1
/*      */     //   227: invokestatic areEqual : (Ljava/lang/Object;Ljava/lang/Object;)Z
/*      */     //   230: ifeq -> 238
/*      */     //   233: iload #13
/*      */     //   235: goto -> 306
/*      */     //   238: lload #22
/*      */     //   240: lstore #24
/*      */     //   242: iconst_0
/*      */     //   243: istore #26
/*      */     //   245: lload #24
/*      */     //   247: lload #24
/*      */     //   249: lconst_1
/*      */     //   250: lsub
/*      */     //   251: land
/*      */     //   252: lstore #22
/*      */     //   254: goto -> 166
/*      */     //   257: lload #15
/*      */     //   259: lstore #17
/*      */     //   261: iconst_0
/*      */     //   262: istore #19
/*      */     //   264: lload #17
/*      */     //   266: lload #17
/*      */     //   268: ldc2_w -1
/*      */     //   271: lxor
/*      */     //   272: bipush #6
/*      */     //   274: lshl
/*      */     //   275: land
/*      */     //   276: ldc2_w -9187201950435737472
/*      */     //   279: land
/*      */     //   280: lconst_0
/*      */     //   281: lcmp
/*      */     //   282: ifeq -> 288
/*      */     //   285: goto -> 305
/*      */     //   288: iinc #9, 8
/*      */     //   291: nop
/*      */     //   292: iload #10
/*      */     //   294: iload #9
/*      */     //   296: iadd
/*      */     //   297: iload #7
/*      */     //   299: iand
/*      */     //   300: istore #10
/*      */     //   302: goto -> 70
/*      */     //   305: iconst_m1
/*      */     //   306: istore_3
/*      */     //   307: iload_3
/*      */     //   308: iflt -> 318
/*      */     //   311: aload_0
/*      */     //   312: getfield values : [Ljava/lang/Object;
/*      */     //   315: iload_3
/*      */     //   316: aaload
/*      */     //   317: areturn
/*      */     //   318: aload_2
/*      */     //   319: areturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #340	-> 0
/*      */     //   #1875	-> 6
/*      */     //   #1876	-> 9
/*      */     //   #1876	-> 22
/*      */     //   #1878	-> 27
/*      */     //   #1875	-> 35
/*      */     //   #1879	-> 37
/*      */     //   #1880	-> 40
/*      */     //   #1879	-> 45
/*      */     //   #1881	-> 47
/*      */     //   #1882	-> 54
/*      */     //   #1883	-> 57
/*      */     //   #1882	-> 62
/*      */     //   #1884	-> 67
/*      */     //   #1886	-> 70
/*      */     //   #1887	-> 71
/*      */     //   #1888	-> 81
/*      */     //   #1889	-> 87
/*      */     //   #1890	-> 96
/*      */     //   #1887	-> 126
/*      */     //   #1891	-> 128
/*      */     //   #1892	-> 135
/*      */     //   #1894	-> 147
/*      */     //   #1891	-> 164
/*      */     //   #1895	-> 166
/*      */     //   #1896	-> 173
/*      */     //   #1897	-> 188
/*      */     //   #1898	-> 197
/*      */     //   #1899	-> 204
/*      */     //   #1899	-> 209
/*      */     //   #1898	-> 211
/*      */     //   #1897	-> 212
/*      */     //   #1900	-> 218
/*      */     //   #1901	-> 233
/*      */     //   #1903	-> 238
/*      */     //   #1904	-> 245
/*      */     //   #1903	-> 252
/*      */     //   #1905	-> 257
/*      */     //   #1906	-> 264
/*      */     //   #1905	-> 280
/*      */     //   #1907	-> 285
/*      */     //   #1910	-> 291
/*      */     //   #1911	-> 292
/*      */     //   #1914	-> 305
/*      */     //   #340	-> 306
/*      */     //   #341	-> 307
/*      */     //   #343	-> 311
/*      */     //   #345	-> 318
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   9	26	6	$i$f$hash	I
/*      */     //   27	8	7	hash$iv$iv	I
/*      */     //   40	5	7	$i$f$h2	I
/*      */     //   57	5	9	$i$f$h1	I
/*      */     //   81	45	12	$i$f$group	I
/*      */     //   87	39	13	i$iv$iv	I
/*      */     //   96	30	14	b$iv$iv	I
/*      */     //   78	48	11	metadata$iv$iv	[J
/*      */     //   135	29	19	$i$f$match	I
/*      */     //   147	17	20	x$iv$iv	J
/*      */     //   132	32	17	$this$match$iv$iv	J
/*      */     //   173	12	19	$i$f$hasNext	I
/*      */     //   170	15	17	$this$hasNext$iv$iv	J
/*      */     //   204	7	29	$i$f$lowestBitSet	I
/*      */     //   201	10	27	$this$lowestBitSet$iv$iv$iv	J
/*      */     //   197	15	26	$i$f$get	I
/*      */     //   194	18	24	$this$get$iv$iv	J
/*      */     //   245	7	26	$i$f$next	I
/*      */     //   242	10	24	$this$next$iv$iv	J
/*      */     //   218	36	13	index$iv	I
/*      */     //   264	16	19	$i$f$maskEmpty	I
/*      */     //   261	19	17	$this$maskEmpty$iv$iv	J
/*      */     //   128	174	15	g$iv	J
/*      */     //   166	136	22	m$iv	J
/*      */     //   6	300	5	$i$f$findKeyIndex$collection	I
/*      */     //   37	269	8	hash$iv	I
/*      */     //   47	259	6	hash2$iv	I
/*      */     //   54	252	7	probeMask$iv	I
/*      */     //   67	239	10	probeOffset$iv	I
/*      */     //   70	236	9	probeIndex$iv	I
/*      */     //   3	303	4	this_$iv	Landroidx/collection/ScatterMap;
/*      */     //   307	13	3	index	I
/*      */     //   0	320	0	this	Landroidx/collection/ScatterMap;
/*      */     //   0	320	1	key	Ljava/lang/Object;
/*      */     //   0	320	2	defaultValue	Ljava/lang/Object;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final V getOrElse(Object key, @NotNull Function0 defaultValue) {
/*  354 */     Intrinsics.checkNotNullParameter(defaultValue, "defaultValue"); int $i$f$getOrElse = 0; if (get((K)key) == null) get((K)key);  return (V)defaultValue.invoke();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   @PublishedApi
/*      */   public final void forEachIndexed(@NotNull Function1 block) {
/*  363 */     Intrinsics.checkNotNullParameter(block, "block"); int $i$f$forEachIndexed = 0; long[] m = this.metadata;
/*  364 */     int lastIndex = m.length - 2;
/*      */     
/*  366 */     int i = 0; if (i <= lastIndex)
/*  367 */       while (true) { long slot = m[i];
/*  368 */         long $this$maskEmptyOrDeleted$iv = slot; int $i$f$maskEmptyOrDeleted = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */         
/* 1915 */         if (($this$maskEmptyOrDeleted$iv & ($this$maskEmptyOrDeleted$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) { int bitCount = 8 - ((i - lastIndex ^ 0xFFFFFFFF) >>> 31); for (int j = 0; j < bitCount; j++)
/* 1916 */           { long value$iv = slot & 0xFFL; int $i$f$isFull = 0; if ((value$iv < 128L)) { int index = (i << 3) + j; block.invoke(Integer.valueOf(index)); }  slot >>= 8L; }  }  continue; if (i != lastIndex) { i++; continue; }  break; }
/* 1917 */         } public final void forEach(@NotNull Function2 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$forEach = 0; Object[] k = this.keys; Object[] v = this.values; ScatterMap this_$iv = this; int $i$f$forEachIndexed = 0; long[] m$iv = this_$iv.metadata;
/* 1918 */     int lastIndex$iv = m$iv.length - 2;
/*      */     
/* 1920 */     int i$iv = 0; if (i$iv <= lastIndex$iv) { while (true) {
/* 1921 */         long slot$iv = m$iv[i$iv];
/* 1922 */         long $this$maskEmptyOrDeleted$iv$iv = slot$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1923 */         if (($this$maskEmptyOrDeleted$iv$iv & ($this$maskEmptyOrDeleted$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1924 */         { int bitCount$iv = 8 - ((i$iv - lastIndex$iv ^ 0xFFFFFFFF) >>> 31);
/* 1925 */           for (int j$iv = 0;; j$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1933 */           if (bitCount$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv != lastIndex$iv) { i$iv++; continue; }  // Byte code: goto -> 206
/*      */       }  }
/*      */     else {  }
/* 1937 */      } public final void forEachKey(@NotNull Function1 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$forEachKey = 0; Object[] k = this.keys; ScatterMap this_$iv = this; int $i$f$forEachIndexed = 0; long[] m$iv = this_$iv.metadata;
/* 1938 */     int lastIndex$iv = m$iv.length - 2;
/*      */     
/* 1940 */     int i$iv = 0; if (i$iv <= lastIndex$iv) { while (true) {
/* 1941 */         long slot$iv = m$iv[i$iv];
/* 1942 */         long $this$maskEmptyOrDeleted$iv$iv = slot$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1943 */         if (($this$maskEmptyOrDeleted$iv$iv & ($this$maskEmptyOrDeleted$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1944 */         { int bitCount$iv = 8 - ((i$iv - lastIndex$iv ^ 0xFFFFFFFF) >>> 31);
/* 1945 */           for (int j$iv = 0;; j$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1953 */           if (bitCount$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv != lastIndex$iv) { i$iv++; continue; }  // Byte code: goto -> 195
/*      */       }  }
/*      */     else {  }
/* 1957 */      } public final void forEachValue(@NotNull Function1 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$forEachValue = 0; Object[] v = this.values; ScatterMap this_$iv = this; int $i$f$forEachIndexed = 0; long[] m$iv = this_$iv.metadata;
/* 1958 */     int lastIndex$iv = m$iv.length - 2;
/*      */     
/* 1960 */     int i$iv = 0; if (i$iv <= lastIndex$iv) { while (true) {
/* 1961 */         long slot$iv = m$iv[i$iv];
/* 1962 */         long $this$maskEmptyOrDeleted$iv$iv = slot$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1963 */         if (($this$maskEmptyOrDeleted$iv$iv & ($this$maskEmptyOrDeleted$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1964 */         { int bitCount$iv = 8 - ((i$iv - lastIndex$iv ^ 0xFFFFFFFF) >>> 31);
/* 1965 */           for (int j$iv = 0;; j$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1973 */           if (bitCount$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv != lastIndex$iv) { i$iv++; continue; }  // Byte code: goto -> 195
/*      */       }  }
/*      */     else {  }
/* 1977 */      } public final boolean all(@NotNull Function2 predicate) { Intrinsics.checkNotNullParameter(predicate, "predicate"); int $i$f$all = 0; ScatterMap this_$iv = this; int $i$f$forEach = 0; Object[] k$iv = this_$iv.keys;
/* 1978 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 1980 */     ScatterMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 1981 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 1982 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 1984 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 1985 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 1986 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 1987 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 1988 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 1989 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 1998 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }
/*      */          // Byte code: goto -> 236
/*      */       }  }
/*      */     else {  }
/* 2003 */      return true; } public final boolean any(@NotNull Function2 predicate) { Intrinsics.checkNotNullParameter(predicate, "predicate"); int $i$f$any = 0; ScatterMap this_$iv = this; int $i$f$forEach = 0; Object[] k$iv = this_$iv.keys;
/* 2004 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 2006 */     ScatterMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 2007 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 2008 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 2010 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 2011 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 2012 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 2013 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 2014 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 2015 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 2024 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }  // Byte code: goto -> 236
/*      */       }  }
/*      */     else {  }
/*      */      return false; }
/* 2029 */   public final int count() { return getSize(); } public final int count(@NotNull Function2 predicate) { Intrinsics.checkNotNullParameter(predicate, "predicate"); int $i$f$count = 0, count = 0; ScatterMap this_$iv = this; int $i$f$forEach = 0; Object[] k$iv = this_$iv.keys;
/* 2030 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 2032 */     ScatterMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 2033 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 2034 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 2036 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 2037 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 2038 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 2039 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L) {
/* 2040 */           int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 2041 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 2050 */           if (bitCount$iv$iv == 8) {
/*      */             continue;
/*      */           }
/*      */           break;
/*      */         } 
/*      */         continue;
/*      */         if (i$iv$iv != lastIndex$iv$iv) {
/*      */           i$iv$iv++;
/*      */           continue;
/*      */         } 
/*      */         // Byte code: goto -> 244
/*      */       }  }
/*      */     else
/*      */     {  }
/*      */     
/*      */     return count; }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final boolean contains(Object key) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: astore_2
/*      */     //   2: iconst_0
/*      */     //   3: istore_3
/*      */     //   4: iconst_0
/*      */     //   5: istore #4
/*      */     //   7: aload_1
/*      */     //   8: dup
/*      */     //   9: ifnull -> 18
/*      */     //   12: invokevirtual hashCode : ()I
/*      */     //   15: goto -> 20
/*      */     //   18: pop
/*      */     //   19: iconst_0
/*      */     //   20: ldc -862048943
/*      */     //   22: imul
/*      */     //   23: istore #5
/*      */     //   25: iload #5
/*      */     //   27: iload #5
/*      */     //   29: bipush #16
/*      */     //   31: ishl
/*      */     //   32: ixor
/*      */     //   33: istore #6
/*      */     //   35: iconst_0
/*      */     //   36: istore #5
/*      */     //   38: iload #6
/*      */     //   40: bipush #127
/*      */     //   42: iand
/*      */     //   43: istore #4
/*      */     //   45: aload_2
/*      */     //   46: getfield _capacity : I
/*      */     //   49: istore #5
/*      */     //   51: iconst_0
/*      */     //   52: istore #7
/*      */     //   54: iload #6
/*      */     //   56: bipush #7
/*      */     //   58: iushr
/*      */     //   59: iload #5
/*      */     //   61: iand
/*      */     //   62: istore #8
/*      */     //   64: iconst_0
/*      */     //   65: istore #7
/*      */     //   67: nop
/*      */     //   68: aload_2
/*      */     //   69: getfield metadata : [J
/*      */     //   72: astore #9
/*      */     //   74: iconst_0
/*      */     //   75: istore #10
/*      */     //   77: iload #8
/*      */     //   79: iconst_3
/*      */     //   80: ishr
/*      */     //   81: istore #11
/*      */     //   83: iload #8
/*      */     //   85: bipush #7
/*      */     //   87: iand
/*      */     //   88: iconst_3
/*      */     //   89: ishl
/*      */     //   90: istore #12
/*      */     //   92: aload #9
/*      */     //   94: iload #11
/*      */     //   96: laload
/*      */     //   97: iload #12
/*      */     //   99: lushr
/*      */     //   100: aload #9
/*      */     //   102: iload #11
/*      */     //   104: iconst_1
/*      */     //   105: iadd
/*      */     //   106: laload
/*      */     //   107: bipush #64
/*      */     //   109: iload #12
/*      */     //   111: isub
/*      */     //   112: lshl
/*      */     //   113: iload #12
/*      */     //   115: i2l
/*      */     //   116: lneg
/*      */     //   117: bipush #63
/*      */     //   119: lshr
/*      */     //   120: land
/*      */     //   121: lor
/*      */     //   122: lstore #13
/*      */     //   124: lload #13
/*      */     //   126: lstore #15
/*      */     //   128: iconst_0
/*      */     //   129: istore #17
/*      */     //   131: lload #15
/*      */     //   133: ldc2_w 72340172838076673
/*      */     //   136: iload #4
/*      */     //   138: i2l
/*      */     //   139: lmul
/*      */     //   140: lxor
/*      */     //   141: lstore #18
/*      */     //   143: lload #18
/*      */     //   145: ldc2_w 72340172838076673
/*      */     //   148: lsub
/*      */     //   149: lload #18
/*      */     //   151: ldc2_w -1
/*      */     //   154: lxor
/*      */     //   155: land
/*      */     //   156: ldc2_w -9187201950435737472
/*      */     //   159: land
/*      */     //   160: lstore #20
/*      */     //   162: lload #20
/*      */     //   164: lstore #15
/*      */     //   166: iconst_0
/*      */     //   167: istore #17
/*      */     //   169: lload #15
/*      */     //   171: lconst_0
/*      */     //   172: lcmp
/*      */     //   173: ifeq -> 180
/*      */     //   176: iconst_1
/*      */     //   177: goto -> 181
/*      */     //   180: iconst_0
/*      */     //   181: ifeq -> 252
/*      */     //   184: iload #8
/*      */     //   186: lload #20
/*      */     //   188: lstore #22
/*      */     //   190: iconst_0
/*      */     //   191: istore #24
/*      */     //   193: lload #22
/*      */     //   195: lstore #25
/*      */     //   197: iconst_0
/*      */     //   198: istore #27
/*      */     //   200: lload #25
/*      */     //   202: invokestatic numberOfTrailingZeros : (J)I
/*      */     //   205: iconst_3
/*      */     //   206: ishr
/*      */     //   207: nop
/*      */     //   208: iadd
/*      */     //   209: iload #5
/*      */     //   211: iand
/*      */     //   212: istore #11
/*      */     //   214: aload_2
/*      */     //   215: getfield keys : [Ljava/lang/Object;
/*      */     //   218: iload #11
/*      */     //   220: aaload
/*      */     //   221: aload_1
/*      */     //   222: invokestatic areEqual : (Ljava/lang/Object;Ljava/lang/Object;)Z
/*      */     //   225: ifeq -> 233
/*      */     //   228: iload #11
/*      */     //   230: goto -> 301
/*      */     //   233: lload #20
/*      */     //   235: lstore #22
/*      */     //   237: iconst_0
/*      */     //   238: istore #24
/*      */     //   240: lload #22
/*      */     //   242: lload #22
/*      */     //   244: lconst_1
/*      */     //   245: lsub
/*      */     //   246: land
/*      */     //   247: lstore #20
/*      */     //   249: goto -> 162
/*      */     //   252: lload #13
/*      */     //   254: lstore #15
/*      */     //   256: iconst_0
/*      */     //   257: istore #17
/*      */     //   259: lload #15
/*      */     //   261: lload #15
/*      */     //   263: ldc2_w -1
/*      */     //   266: lxor
/*      */     //   267: bipush #6
/*      */     //   269: lshl
/*      */     //   270: land
/*      */     //   271: ldc2_w -9187201950435737472
/*      */     //   274: land
/*      */     //   275: lconst_0
/*      */     //   276: lcmp
/*      */     //   277: ifeq -> 283
/*      */     //   280: goto -> 300
/*      */     //   283: iinc #7, 8
/*      */     //   286: nop
/*      */     //   287: iload #8
/*      */     //   289: iload #7
/*      */     //   291: iadd
/*      */     //   292: iload #5
/*      */     //   294: iand
/*      */     //   295: istore #8
/*      */     //   297: goto -> 67
/*      */     //   300: iconst_m1
/*      */     //   301: iflt -> 308
/*      */     //   304: iconst_1
/*      */     //   305: goto -> 309
/*      */     //   308: iconst_0
/*      */     //   309: ireturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #466	-> 0
/*      */     //   #2055	-> 4
/*      */     //   #2056	-> 7
/*      */     //   #2056	-> 20
/*      */     //   #2058	-> 25
/*      */     //   #2055	-> 33
/*      */     //   #2059	-> 35
/*      */     //   #2060	-> 38
/*      */     //   #2059	-> 43
/*      */     //   #2061	-> 45
/*      */     //   #2062	-> 51
/*      */     //   #2063	-> 54
/*      */     //   #2062	-> 59
/*      */     //   #2064	-> 64
/*      */     //   #2066	-> 67
/*      */     //   #2067	-> 68
/*      */     //   #2068	-> 77
/*      */     //   #2069	-> 83
/*      */     //   #2070	-> 92
/*      */     //   #2067	-> 122
/*      */     //   #2071	-> 124
/*      */     //   #2072	-> 131
/*      */     //   #2074	-> 143
/*      */     //   #2071	-> 160
/*      */     //   #2075	-> 162
/*      */     //   #2076	-> 169
/*      */     //   #2077	-> 184
/*      */     //   #2078	-> 193
/*      */     //   #2079	-> 200
/*      */     //   #2079	-> 205
/*      */     //   #2078	-> 207
/*      */     //   #2077	-> 208
/*      */     //   #2080	-> 214
/*      */     //   #2081	-> 228
/*      */     //   #2083	-> 233
/*      */     //   #2084	-> 240
/*      */     //   #2083	-> 247
/*      */     //   #2085	-> 252
/*      */     //   #2086	-> 259
/*      */     //   #2085	-> 275
/*      */     //   #2087	-> 280
/*      */     //   #2090	-> 286
/*      */     //   #2091	-> 287
/*      */     //   #2094	-> 300
/*      */     //   #466	-> 301
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   7	26	4	$i$f$hash	I
/*      */     //   25	8	5	hash$iv$iv	I
/*      */     //   38	5	5	$i$f$h2	I
/*      */     //   54	5	7	$i$f$h1	I
/*      */     //   77	45	10	$i$f$group	I
/*      */     //   83	39	11	i$iv$iv	I
/*      */     //   92	30	12	b$iv$iv	I
/*      */     //   74	48	9	metadata$iv$iv	[J
/*      */     //   131	29	17	$i$f$match	I
/*      */     //   143	17	18	x$iv$iv	J
/*      */     //   128	32	15	$this$match$iv$iv	J
/*      */     //   169	12	17	$i$f$hasNext	I
/*      */     //   166	15	15	$this$hasNext$iv$iv	J
/*      */     //   200	7	27	$i$f$lowestBitSet	I
/*      */     //   197	10	25	$this$lowestBitSet$iv$iv$iv	J
/*      */     //   193	15	24	$i$f$get	I
/*      */     //   190	18	22	$this$get$iv$iv	J
/*      */     //   240	7	24	$i$f$next	I
/*      */     //   237	10	22	$this$next$iv$iv	J
/*      */     //   214	35	11	index$iv	I
/*      */     //   259	16	17	$i$f$maskEmpty	I
/*      */     //   256	19	15	$this$maskEmpty$iv$iv	J
/*      */     //   124	173	13	g$iv	J
/*      */     //   162	135	20	m$iv	J
/*      */     //   4	297	3	$i$f$findKeyIndex$collection	I
/*      */     //   35	266	6	hash$iv	I
/*      */     //   45	256	4	hash2$iv	I
/*      */     //   51	250	5	probeMask$iv	I
/*      */     //   64	237	8	probeOffset$iv	I
/*      */     //   67	234	7	probeIndex$iv	I
/*      */     //   2	299	2	this_$iv	Landroidx/collection/ScatterMap;
/*      */     //   0	310	0	this	Landroidx/collection/ScatterMap;
/*      */     //   0	310	1	key	Ljava/lang/Object;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final boolean containsKey(Object key) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: astore_2
/*      */     //   2: iconst_0
/*      */     //   3: istore_3
/*      */     //   4: iconst_0
/*      */     //   5: istore #4
/*      */     //   7: aload_1
/*      */     //   8: dup
/*      */     //   9: ifnull -> 18
/*      */     //   12: invokevirtual hashCode : ()I
/*      */     //   15: goto -> 20
/*      */     //   18: pop
/*      */     //   19: iconst_0
/*      */     //   20: ldc -862048943
/*      */     //   22: imul
/*      */     //   23: istore #5
/*      */     //   25: iload #5
/*      */     //   27: iload #5
/*      */     //   29: bipush #16
/*      */     //   31: ishl
/*      */     //   32: ixor
/*      */     //   33: istore #6
/*      */     //   35: iconst_0
/*      */     //   36: istore #5
/*      */     //   38: iload #6
/*      */     //   40: bipush #127
/*      */     //   42: iand
/*      */     //   43: istore #4
/*      */     //   45: aload_2
/*      */     //   46: getfield _capacity : I
/*      */     //   49: istore #5
/*      */     //   51: iconst_0
/*      */     //   52: istore #7
/*      */     //   54: iload #6
/*      */     //   56: bipush #7
/*      */     //   58: iushr
/*      */     //   59: iload #5
/*      */     //   61: iand
/*      */     //   62: istore #8
/*      */     //   64: iconst_0
/*      */     //   65: istore #7
/*      */     //   67: nop
/*      */     //   68: aload_2
/*      */     //   69: getfield metadata : [J
/*      */     //   72: astore #9
/*      */     //   74: iconst_0
/*      */     //   75: istore #10
/*      */     //   77: iload #8
/*      */     //   79: iconst_3
/*      */     //   80: ishr
/*      */     //   81: istore #11
/*      */     //   83: iload #8
/*      */     //   85: bipush #7
/*      */     //   87: iand
/*      */     //   88: iconst_3
/*      */     //   89: ishl
/*      */     //   90: istore #12
/*      */     //   92: aload #9
/*      */     //   94: iload #11
/*      */     //   96: laload
/*      */     //   97: iload #12
/*      */     //   99: lushr
/*      */     //   100: aload #9
/*      */     //   102: iload #11
/*      */     //   104: iconst_1
/*      */     //   105: iadd
/*      */     //   106: laload
/*      */     //   107: bipush #64
/*      */     //   109: iload #12
/*      */     //   111: isub
/*      */     //   112: lshl
/*      */     //   113: iload #12
/*      */     //   115: i2l
/*      */     //   116: lneg
/*      */     //   117: bipush #63
/*      */     //   119: lshr
/*      */     //   120: land
/*      */     //   121: lor
/*      */     //   122: lstore #13
/*      */     //   124: lload #13
/*      */     //   126: lstore #15
/*      */     //   128: iconst_0
/*      */     //   129: istore #17
/*      */     //   131: lload #15
/*      */     //   133: ldc2_w 72340172838076673
/*      */     //   136: iload #4
/*      */     //   138: i2l
/*      */     //   139: lmul
/*      */     //   140: lxor
/*      */     //   141: lstore #18
/*      */     //   143: lload #18
/*      */     //   145: ldc2_w 72340172838076673
/*      */     //   148: lsub
/*      */     //   149: lload #18
/*      */     //   151: ldc2_w -1
/*      */     //   154: lxor
/*      */     //   155: land
/*      */     //   156: ldc2_w -9187201950435737472
/*      */     //   159: land
/*      */     //   160: lstore #20
/*      */     //   162: lload #20
/*      */     //   164: lstore #15
/*      */     //   166: iconst_0
/*      */     //   167: istore #17
/*      */     //   169: lload #15
/*      */     //   171: lconst_0
/*      */     //   172: lcmp
/*      */     //   173: ifeq -> 180
/*      */     //   176: iconst_1
/*      */     //   177: goto -> 181
/*      */     //   180: iconst_0
/*      */     //   181: ifeq -> 252
/*      */     //   184: iload #8
/*      */     //   186: lload #20
/*      */     //   188: lstore #22
/*      */     //   190: iconst_0
/*      */     //   191: istore #24
/*      */     //   193: lload #22
/*      */     //   195: lstore #25
/*      */     //   197: iconst_0
/*      */     //   198: istore #27
/*      */     //   200: lload #25
/*      */     //   202: invokestatic numberOfTrailingZeros : (J)I
/*      */     //   205: iconst_3
/*      */     //   206: ishr
/*      */     //   207: nop
/*      */     //   208: iadd
/*      */     //   209: iload #5
/*      */     //   211: iand
/*      */     //   212: istore #11
/*      */     //   214: aload_2
/*      */     //   215: getfield keys : [Ljava/lang/Object;
/*      */     //   218: iload #11
/*      */     //   220: aaload
/*      */     //   221: aload_1
/*      */     //   222: invokestatic areEqual : (Ljava/lang/Object;Ljava/lang/Object;)Z
/*      */     //   225: ifeq -> 233
/*      */     //   228: iload #11
/*      */     //   230: goto -> 301
/*      */     //   233: lload #20
/*      */     //   235: lstore #22
/*      */     //   237: iconst_0
/*      */     //   238: istore #24
/*      */     //   240: lload #22
/*      */     //   242: lload #22
/*      */     //   244: lconst_1
/*      */     //   245: lsub
/*      */     //   246: land
/*      */     //   247: lstore #20
/*      */     //   249: goto -> 162
/*      */     //   252: lload #13
/*      */     //   254: lstore #15
/*      */     //   256: iconst_0
/*      */     //   257: istore #17
/*      */     //   259: lload #15
/*      */     //   261: lload #15
/*      */     //   263: ldc2_w -1
/*      */     //   266: lxor
/*      */     //   267: bipush #6
/*      */     //   269: lshl
/*      */     //   270: land
/*      */     //   271: ldc2_w -9187201950435737472
/*      */     //   274: land
/*      */     //   275: lconst_0
/*      */     //   276: lcmp
/*      */     //   277: ifeq -> 283
/*      */     //   280: goto -> 300
/*      */     //   283: iinc #7, 8
/*      */     //   286: nop
/*      */     //   287: iload #8
/*      */     //   289: iload #7
/*      */     //   291: iadd
/*      */     //   292: iload #5
/*      */     //   294: iand
/*      */     //   295: istore #8
/*      */     //   297: goto -> 67
/*      */     //   300: iconst_m1
/*      */     //   301: iflt -> 308
/*      */     //   304: iconst_1
/*      */     //   305: goto -> 309
/*      */     //   308: iconst_0
/*      */     //   309: ireturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #472	-> 0
/*      */     //   #2095	-> 4
/*      */     //   #2096	-> 7
/*      */     //   #2096	-> 20
/*      */     //   #2098	-> 25
/*      */     //   #2095	-> 33
/*      */     //   #2099	-> 35
/*      */     //   #2100	-> 38
/*      */     //   #2099	-> 43
/*      */     //   #2101	-> 45
/*      */     //   #2102	-> 51
/*      */     //   #2103	-> 54
/*      */     //   #2102	-> 59
/*      */     //   #2104	-> 64
/*      */     //   #2106	-> 67
/*      */     //   #2107	-> 68
/*      */     //   #2108	-> 77
/*      */     //   #2109	-> 83
/*      */     //   #2110	-> 92
/*      */     //   #2107	-> 122
/*      */     //   #2111	-> 124
/*      */     //   #2112	-> 131
/*      */     //   #2114	-> 143
/*      */     //   #2111	-> 160
/*      */     //   #2115	-> 162
/*      */     //   #2116	-> 169
/*      */     //   #2117	-> 184
/*      */     //   #2118	-> 193
/*      */     //   #2119	-> 200
/*      */     //   #2119	-> 205
/*      */     //   #2118	-> 207
/*      */     //   #2117	-> 208
/*      */     //   #2120	-> 214
/*      */     //   #2121	-> 228
/*      */     //   #2123	-> 233
/*      */     //   #2124	-> 240
/*      */     //   #2123	-> 247
/*      */     //   #2125	-> 252
/*      */     //   #2126	-> 259
/*      */     //   #2125	-> 275
/*      */     //   #2127	-> 280
/*      */     //   #2130	-> 286
/*      */     //   #2131	-> 287
/*      */     //   #2134	-> 300
/*      */     //   #472	-> 301
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   7	26	4	$i$f$hash	I
/*      */     //   25	8	5	hash$iv$iv	I
/*      */     //   38	5	5	$i$f$h2	I
/*      */     //   54	5	7	$i$f$h1	I
/*      */     //   77	45	10	$i$f$group	I
/*      */     //   83	39	11	i$iv$iv	I
/*      */     //   92	30	12	b$iv$iv	I
/*      */     //   74	48	9	metadata$iv$iv	[J
/*      */     //   131	29	17	$i$f$match	I
/*      */     //   143	17	18	x$iv$iv	J
/*      */     //   128	32	15	$this$match$iv$iv	J
/*      */     //   169	12	17	$i$f$hasNext	I
/*      */     //   166	15	15	$this$hasNext$iv$iv	J
/*      */     //   200	7	27	$i$f$lowestBitSet	I
/*      */     //   197	10	25	$this$lowestBitSet$iv$iv$iv	J
/*      */     //   193	15	24	$i$f$get	I
/*      */     //   190	18	22	$this$get$iv$iv	J
/*      */     //   240	7	24	$i$f$next	I
/*      */     //   237	10	22	$this$next$iv$iv	J
/*      */     //   214	35	11	index$iv	I
/*      */     //   259	16	17	$i$f$maskEmpty	I
/*      */     //   256	19	15	$this$maskEmpty$iv$iv	J
/*      */     //   124	173	13	g$iv	J
/*      */     //   162	135	20	m$iv	J
/*      */     //   4	297	3	$i$f$findKeyIndex$collection	I
/*      */     //   35	266	6	hash$iv	I
/*      */     //   45	256	4	hash2$iv	I
/*      */     //   51	250	5	probeMask$iv	I
/*      */     //   64	237	8	probeOffset$iv	I
/*      */     //   67	234	7	probeIndex$iv	I
/*      */     //   2	299	2	this_$iv	Landroidx/collection/ScatterMap;
/*      */     //   0	310	0	this	Landroidx/collection/ScatterMap;
/*      */     //   0	310	1	key	Ljava/lang/Object;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final boolean containsValue(Object value) {
/*      */     ScatterMap this_$iv = this;
/*      */     int $i$f$forEachValue = 0;
/* 2135 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 2137 */     ScatterMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 2138 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 2139 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 2141 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 2142 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 2143 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 2144 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 2145 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 2146 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 2155 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }
/*      */          // Byte code: goto -> 204
/*      */       }  }
/*      */     else {  }
/* 2160 */      return false; } @JvmOverloads @NotNull public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function2 transform) { Intrinsics.checkNotNullParameter(separator, "separator"); Intrinsics.checkNotNullParameter(prefix, "prefix"); Intrinsics.checkNotNullParameter(postfix, "postfix"); Intrinsics.checkNotNullParameter(truncated, "truncated"); StringBuilder stringBuilder1 = new StringBuilder(), $this$joinToString_u24lambda_u248 = stringBuilder1; int $i$a$-buildString-ScatterMap$joinToString$1 = 0; $this$joinToString_u24lambda_u248.append(prefix); int index = 0; ScatterMap this_$iv = this; int $i$f$forEach = 0; Object[] k$iv = this_$iv.keys;
/* 2161 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 2163 */     ScatterMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 2164 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 2165 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 2167 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 2168 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 2169 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 2170 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 2171 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 2172 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 2181 */           if (bitCount$iv$iv == 8)
/*      */             continue;  // Byte code: goto -> 351 }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }
/*      */          // Byte code: goto -> 350
/*      */       }  }
/*      */     else { $this$joinToString_u24lambda_u248.append(postfix); }
/* 2186 */      Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()"); return stringBuilder1.toString(); } public int hashCode() { int hash = 0; ScatterMap this_$iv = this; int $i$f$forEach = 0; Object[] k$iv = this_$iv.keys;
/* 2187 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 2189 */     ScatterMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 2190 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 2191 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 2193 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true)
/* 2194 */       { long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 2195 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 2196 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 2197 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 2198 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 2207 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }  // Byte code: goto -> 240 }  } else {  }
/*      */      return hash; } public boolean equals(@Nullable Object other) { if (other == this)
/*      */       return true;  if (!(other instanceof ScatterMap))
/*      */       return false;  if (((ScatterMap)other).getSize() != getSize())
/* 2212 */       return false;  ScatterMap o = (ScatterMap)other; ScatterMap this_$iv = this; int $i$f$forEach = 0; Object[] k$iv = this_$iv.keys;
/* 2213 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 2215 */     ScatterMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 2216 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 2217 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 2219 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 2220 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 2221 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 2222 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 2223 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 2224 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 2233 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }  // Byte code: goto -> 285
/*      */       }  }
/*      */     else {  }
/*      */      return true; } @NotNull public String toString() { if (isEmpty())
/* 2238 */       return "{}";  StringBuilder s = (new StringBuilder()).append('{'); int i = 0; ScatterMap this_$iv = this; int $i$f$forEach = 0; Object[] k$iv = this_$iv.keys;
/* 2239 */     Object[] v$iv = this_$iv.values;
/*      */     
/* 2241 */     ScatterMap this_$iv$iv = this_$iv; int $i$f$forEachIndexed = 0;
/* 2242 */     long[] m$iv$iv = this_$iv$iv.metadata;
/* 2243 */     int lastIndex$iv$iv = m$iv$iv.length - 2;
/*      */     
/* 2245 */     int i$iv$iv = 0; if (i$iv$iv <= lastIndex$iv$iv) { while (true) {
/* 2246 */         long slot$iv$iv = m$iv$iv[i$iv$iv];
/* 2247 */         long $this$maskEmptyOrDeleted$iv$iv$iv = slot$iv$iv; int $i$f$maskEmptyOrDeleted = 0;
/* 2248 */         if (($this$maskEmptyOrDeleted$iv$iv$iv & ($this$maskEmptyOrDeleted$iv$iv$iv ^ 0xFFFFFFFFFFFFFFFFL) << 7L & 0x8080808080808080L) != -9187201950435737472L)
/* 2249 */         { int bitCount$iv$iv = 8 - ((i$iv$iv - lastIndex$iv$iv ^ 0xFFFFFFFF) >>> 31);
/* 2250 */           for (int j$iv$iv = 0;; j$iv$iv++);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */           
/* 2259 */           if (bitCount$iv$iv == 8)
/*      */             continue;  break; }  continue; if (i$iv$iv != lastIndex$iv$iv) { i$iv$iv++; continue; }
/*      */          // Byte code: goto -> 303
/*      */       }  }
/*      */     else {  }
/* 2264 */      Intrinsics.checkNotNullExpressionValue(s.append('}').toString(), "s.append('}').toString()"); return s.append('}').toString(); } @NotNull public final String asDebugString$collection() { StringBuilder stringBuilder1 = new StringBuilder(), $this$asDebugString_u24lambda_u2412 = stringBuilder1; int $i$a$-buildString-ScatterMap$asDebugString$1 = 0; $this$asDebugString_u24lambda_u2412.append('{'); $this$asDebugString_u24lambda_u2412.append("metadata=["); int i, j; for (i = 0, j = getCapacity(); i < j; i++) { long[] data$iv = this.metadata; int $i$f$readRawMetadata = 0; long metadata = data$iv[i >> 3] >> (i & 0x7) << 3 & 0xFFL; if (metadata == 128L) { $this$asDebugString_u24lambda_u2412.append("Empty"); } else if (metadata == 254L) { $this$asDebugString_u24lambda_u2412.append("Deleted"); } else { $this$asDebugString_u24lambda_u2412.append(metadata); }  $this$asDebugString_u24lambda_u2412.append(", "); }  $this$asDebugString_u24lambda_u2412.append("], "); $this$asDebugString_u24lambda_u2412.append("keys=["); for (i = 0, j = this.keys.length; i < j; i++) { $this$asDebugString_u24lambda_u2412.append(this.keys[i]); $this$asDebugString_u24lambda_u2412.append(", "); }  $this$asDebugString_u24lambda_u2412.append("], "); $this$asDebugString_u24lambda_u2412.append("values=["); for (i = 0, j = this.values.length; i < j; i++) { $this$asDebugString_u24lambda_u2412.append(this.values[i]); $this$asDebugString_u24lambda_u2412.append(", "); }
/* 2265 */      $this$asDebugString_u24lambda_u2412.append("]"); $this$asDebugString_u24lambda_u2412.append('}'); Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "StringBuilder().apply(builderAction).toString()"); return stringBuilder1.toString(); } public final int findKeyIndex$collection(Object key) { int $i$f$findKeyIndex$collection = 0, $i$f$hash = 0; int hash$iv = ((key != null) ? key.hashCode() : 0) * -862048943;
/*      */     
/* 2267 */     int hash = hash$iv ^ hash$iv << 16;
/* 2268 */     int $i$f$h2 = 0, hash2 = hash & 0x7F; int probeMask = this._capacity;
/* 2269 */     int $i$f$h1 = 0, probeOffset = hash >>> 7 & probeMask; int probeIndex = 0; while (true) {
/* 2270 */       long[] metadata$iv = this.metadata; int $i$f$group = 0; int i$iv = probeOffset >> 3;
/* 2271 */       int b$iv = (probeOffset & 0x7) << 3;
/* 2272 */       long g = metadata$iv[i$iv] >>> b$iv | metadata$iv[i$iv + 1] << 64 - b$iv & -(b$iv) >> 63L; long $this$match$iv = g; int $i$f$match = 0;
/* 2273 */       long x$iv = $this$match$iv ^ 72340172838076673L * hash2;
/*      */       
/* 2275 */       long m = x$iv - 72340172838076673L & (x$iv ^ 0xFFFFFFFFFFFFFFFFL) & 0x8080808080808080L; while (true) {
/* 2276 */         long $this$hasNext$iv = m; int $i$f$hasNext = 0; if (($this$hasNext$iv != 0L)) {
/* 2277 */           long $this$get$iv = m; int $i$f$get = 0; long $this$lowestBitSet$iv$iv = $this$get$iv; int $i$f$lowestBitSet = 0;
/* 2278 */           int index = probeOffset + (Long.numberOfTrailingZeros($this$lowestBitSet$iv$iv) >> 3) & probeMask;
/*      */         }  long $this$maskEmpty$iv = g; int $i$f$maskEmpty = 0;
/* 2280 */         if (($this$maskEmpty$iv & ($this$maskEmpty$iv ^ 0xFFFFFFFFFFFFFFFFL) << 6L & 0x8080808080808080L) != 0L)
/*      */           return -1; 
/*      */         break;
/*      */       } 
/*      */       probeIndex += 8;
/*      */       probeOffset = probeOffset + probeIndex & probeMask;
/*      */     } 
/*      */     return -1; }
/*      */ 
/*      */   
/*      */   @NotNull
/*      */   public final Map<K, V> asMap() {
/*      */     return new MapWrapper();
/*      */   }
/*      */   
/*      */   private ScatterMap() {}
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     Intrinsics.checkNotNullParameter(prefix, "prefix");
/*      */     Intrinsics.checkNotNullParameter(postfix, "postfix");
/*      */     Intrinsics.checkNotNullParameter(truncated, "truncated");
/*      */     return joinToString$default(this, separator, prefix, postfix, limit, truncated, null, 32, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     Intrinsics.checkNotNullParameter(prefix, "prefix");
/*      */     Intrinsics.checkNotNullParameter(postfix, "postfix");
/*      */     return joinToString$default(this, separator, prefix, postfix, limit, null, null, 48, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     Intrinsics.checkNotNullParameter(prefix, "prefix");
/*      */     Intrinsics.checkNotNullParameter(postfix, "postfix");
/*      */     return joinToString$default(this, separator, prefix, postfix, 0, null, null, 56, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator, @NotNull CharSequence prefix) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     Intrinsics.checkNotNullParameter(prefix, "prefix");
/*      */     return joinToString$default(this, separator, prefix, null, 0, null, null, 60, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString(@NotNull CharSequence separator) {
/*      */     Intrinsics.checkNotNullParameter(separator, "separator");
/*      */     return joinToString$default(this, separator, null, null, 0, null, null, 62, null);
/*      */   }
/*      */   
/*      */   @JvmOverloads
/*      */   @NotNull
/*      */   public final String joinToString() {
/*      */     return joinToString$default(this, null, null, null, 0, null, null, 63, null);
/*      */   }
/*      */   
/*      */   @Metadata(mv = {1, 8, 0}, k = 1, xi = 48, d1 = {"\0000\n\002\030\002\n\002\020$\n\002\b\002\n\002\020\"\n\002\020&\n\002\b\005\n\002\020\b\n\002\b\003\n\002\020\036\n\002\b\003\n\002\020\013\n\002\b\b\b\004\030\0002\016\022\004\022\0028\000\022\004\022\0028\0010\001B\005¢\006\002\020\002J\025\020\022\032\0020\0232\006\020\024\032\0028\000H\026¢\006\002\020\025J\025\020\026\032\0020\0232\006\020\027\032\0028\001H\026¢\006\002\020\025J\030\020\030\032\004\030\0018\0012\006\020\024\032\0028\000H\002¢\006\002\020\031J\b\020\032\032\0020\023H\026R&\020\003\032\024\022\020\022\016\022\004\022\0028\000\022\004\022\0028\0010\0050\0048VX\004¢\006\006\032\004\b\006\020\007R\032\020\b\032\b\022\004\022\0028\0000\0048VX\004¢\006\006\032\004\b\t\020\007R\024\020\n\032\0020\0138VX\004¢\006\006\032\004\b\f\020\rR\032\020\016\032\b\022\004\022\0028\0010\0178VX\004¢\006\006\032\004\b\020\020\021¨\006\033"}, d2 = {"Landroidx/collection/ScatterMap$MapWrapper;", "", "(Landroidx/collection/ScatterMap;)V", "entries", "", "", "getEntries", "()Ljava/util/Set;", "keys", "getKeys", "size", "", "getSize", "()I", "values", "", "getValues", "()Ljava/util/Collection;", "containsKey", "", "key", "(Ljava/lang/Object;)Z", "containsValue", "value", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", "isEmpty", "collection"})
/*      */   public class MapWrapper implements Map<K, V>, KMappedMarker {
/*      */     @NotNull
/*      */     public Set<Map.Entry<K, V>> getEntries() {
/*      */       return new ScatterMap$MapWrapper$entries$1();
/*      */     }
/*      */     
/*      */     @Metadata(mv = {1, 8, 0}, k = 1, xi = 48, d1 = {"\000-\n\000\n\002\020\"\n\002\020&\n\000\n\002\020\b\n\002\b\003\n\002\020\013\n\002\b\003\n\002\020\036\n\002\b\002\n\002\020(\n\000*\001\000\b\n\030\0002\024\022\020\022\016\022\004\022\0028\000\022\004\022\0028\0010\0020\001J\035\020\007\032\0020\b2\022\020\t\032\016\022\004\022\0028\000\022\004\022\0028\0010\002H\002J\"\020\n\032\0020\b2\030\020\013\032\024\022\020\022\016\022\004\022\0028\000\022\004\022\0028\0010\0020\fH\026J\b\020\r\032\0020\bH\026J\033\020\016\032\024\022\020\022\016\022\004\022\0028\000\022\004\022\0028\0010\0020\017H\002R\024\020\003\032\0020\0048VX\004¢\006\006\032\004\b\005\020\006¨\006\020"}, d2 = {"androidx/collection/ScatterMap$MapWrapper$entries$1", "", "", "size", "", "getSize", "()I", "contains", "", "element", "containsAll", "elements", "", "isEmpty", "iterator", "", "collection"})
/*      */     @SourceDebugExtension({"SMAP\nScatterMap.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$entries$1\n+ 2 _Collections.kt\nkotlin/collections/CollectionsKt___CollectionsKt\n*L\n1#1,1834:1\n1726#2,3:1835\n*S KotlinDebug\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$entries$1\n*L\n712#1:1835,3\n*E\n"})
/*      */     public static final class ScatterMap$MapWrapper$entries$1 implements Set<Map.Entry<? extends K, ? extends V>>, KMappedMarker {
/*      */       public int getSize() {
/*      */         return ScatterMap.this._size;
/*      */       }
/*      */       
/*      */       public boolean isEmpty() {
/*      */         return ScatterMap.this.isEmpty();
/*      */       }
/*      */       
/*      */       @NotNull
/*      */       public Iterator<Map.Entry<K, V>> iterator() {
/*      */         return SequencesKt.iterator(new ScatterMap$MapWrapper$entries$1$iterator$1(null));
/*      */       }
/*      */       
/*      */       @DebugMetadata(f = "ScatterMap.kt", l = {701}, i = {0, 0, 0, 0, 0, 0, 0}, s = {"L$0", "L$2", "I$0", "I$1", "J$0", "I$2", "I$3"}, n = {"$this$iterator", "m$iv", "lastIndex$iv", "i$iv", "slot$iv", "bitCount$iv", "j$iv"}, m = "invokeSuspend", c = "androidx.collection.ScatterMap$MapWrapper$entries$1$iterator$1")
/*      */       @Metadata(mv = {1, 8, 0}, k = 3, xi = 48, d1 = {"\000\022\n\000\n\002\020\002\n\002\b\002\n\002\030\002\n\002\020&\020\000\032\0020\001\"\004\b\000\020\002\"\004\b\001\020\003*\024\022\020\022\016\022\004\022\002H\002\022\004\022\002H\0030\0050\004H@"}, d2 = {"<anonymous>", "", "K", "V", "Lkotlin/sequences/SequenceScope;", ""})
/*      */       @SourceDebugExtension({"SMAP\nScatterMap.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$entries$1$iterator$1\n+ 2 ScatterMap.kt\nandroidx/collection/ScatterMap\n+ 3 ScatterMap.kt\nandroidx/collection/ScatterMapKt\n*L\n1#1,1834:1\n363#2,6:1835\n373#2,3:1842\n376#2,9:1846\n1810#3:1841\n1672#3:1845\n*S KotlinDebug\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$entries$1$iterator$1\n*L\n699#1:1835,6\n699#1:1842,3\n699#1:1846,9\n699#1:1841\n699#1:1845\n*E\n"})
/*      */       static final class ScatterMap$MapWrapper$entries$1$iterator$1 extends RestrictedSuspendLambda implements Function2<SequenceScope<? super Map.Entry<? extends K, ? extends V>>, Continuation<? super Unit>, Object> {
/*      */         Object L$1;
/*      */         Object L$2;
/*      */         int I$0;
/*      */         int I$1;
/*      */         int I$2;
/*      */         int I$3;
/*      */         long J$0;
/*      */         int label;
/*      */         
/*      */         ScatterMap$MapWrapper$entries$1$iterator$1(Continuation $completion) {
/*      */           super(2, $completion);
/*      */         }
/*      */         
/*      */         @Nullable
/*      */         public final Object invokeSuspend(@NotNull Object $result) {
/*      */           // Byte code:
/*      */           //   0: invokestatic getCOROUTINE_SUSPENDED : ()Ljava/lang/Object;
/*      */           //   3: astore #21
/*      */           //   5: aload_0
/*      */           //   6: getfield label : I
/*      */           //   9: tableswitch default -> 382, 0 -> 32, 1 -> 276
/*      */           //   32: aload_1
/*      */           //   33: invokestatic throwOnFailure : (Ljava/lang/Object;)V
/*      */           //   36: aload_0
/*      */           //   37: getfield L$0 : Ljava/lang/Object;
/*      */           //   40: checkcast kotlin/sequences/SequenceScope
/*      */           //   43: astore_2
/*      */           //   44: aload_0
/*      */           //   45: getfield this$0 : Landroidx/collection/ScatterMap;
/*      */           //   48: astore_3
/*      */           //   49: aload_0
/*      */           //   50: getfield this$0 : Landroidx/collection/ScatterMap;
/*      */           //   53: astore #4
/*      */           //   55: iconst_0
/*      */           //   56: istore #5
/*      */           //   58: aload_3
/*      */           //   59: getfield metadata : [J
/*      */           //   62: astore #6
/*      */           //   64: aload #6
/*      */           //   66: arraylength
/*      */           //   67: iconst_2
/*      */           //   68: isub
/*      */           //   69: istore #7
/*      */           //   71: iconst_0
/*      */           //   72: istore #8
/*      */           //   74: iload #8
/*      */           //   76: iload #7
/*      */           //   78: if_icmpgt -> 377
/*      */           //   81: aload #6
/*      */           //   83: iload #8
/*      */           //   85: laload
/*      */           //   86: lstore #9
/*      */           //   88: lload #9
/*      */           //   90: lstore #11
/*      */           //   92: iconst_0
/*      */           //   93: istore #13
/*      */           //   95: lload #11
/*      */           //   97: lload #11
/*      */           //   99: ldc2_w -1
/*      */           //   102: lxor
/*      */           //   103: bipush #7
/*      */           //   105: lshl
/*      */           //   106: land
/*      */           //   107: ldc2_w -9187201950435737472
/*      */           //   110: land
/*      */           //   111: ldc2_w -9187201950435737472
/*      */           //   114: lcmp
/*      */           //   115: ifeq -> 364
/*      */           //   118: bipush #8
/*      */           //   120: iload #8
/*      */           //   122: iload #7
/*      */           //   124: isub
/*      */           //   125: iconst_m1
/*      */           //   126: ixor
/*      */           //   127: bipush #31
/*      */           //   129: iushr
/*      */           //   130: isub
/*      */           //   131: istore #14
/*      */           //   133: iconst_0
/*      */           //   134: istore #15
/*      */           //   136: iload #15
/*      */           //   138: iload #14
/*      */           //   140: if_icmpge -> 357
/*      */           //   143: lload #9
/*      */           //   145: ldc2_w 255
/*      */           //   148: land
/*      */           //   149: lstore #16
/*      */           //   151: iconst_0
/*      */           //   152: istore #18
/*      */           //   154: lload #16
/*      */           //   156: ldc2_w 128
/*      */           //   159: lcmp
/*      */           //   160: ifge -> 167
/*      */           //   163: iconst_1
/*      */           //   164: goto -> 168
/*      */           //   167: iconst_0
/*      */           //   168: ifeq -> 344
/*      */           //   171: iload #8
/*      */           //   173: iconst_3
/*      */           //   174: ishl
/*      */           //   175: iload #15
/*      */           //   177: iadd
/*      */           //   178: istore #13
/*      */           //   180: iload #13
/*      */           //   182: istore #19
/*      */           //   184: iconst_0
/*      */           //   185: istore #20
/*      */           //   187: aload_2
/*      */           //   188: new androidx/collection/MapEntry
/*      */           //   191: dup
/*      */           //   192: aload #4
/*      */           //   194: getfield keys : [Ljava/lang/Object;
/*      */           //   197: iload #19
/*      */           //   199: aaload
/*      */           //   200: aload #4
/*      */           //   202: getfield values : [Ljava/lang/Object;
/*      */           //   205: iload #19
/*      */           //   207: aaload
/*      */           //   208: invokespecial <init> : (Ljava/lang/Object;Ljava/lang/Object;)V
/*      */           //   211: aload_0
/*      */           //   212: aload_0
/*      */           //   213: aload_2
/*      */           //   214: putfield L$0 : Ljava/lang/Object;
/*      */           //   217: aload_0
/*      */           //   218: aload #4
/*      */           //   220: putfield L$1 : Ljava/lang/Object;
/*      */           //   223: aload_0
/*      */           //   224: aload #6
/*      */           //   226: putfield L$2 : Ljava/lang/Object;
/*      */           //   229: aload_0
/*      */           //   230: iload #7
/*      */           //   232: putfield I$0 : I
/*      */           //   235: aload_0
/*      */           //   236: iload #8
/*      */           //   238: putfield I$1 : I
/*      */           //   241: aload_0
/*      */           //   242: lload #9
/*      */           //   244: putfield J$0 : J
/*      */           //   247: aload_0
/*      */           //   248: iload #14
/*      */           //   250: putfield I$2 : I
/*      */           //   253: aload_0
/*      */           //   254: iload #15
/*      */           //   256: putfield I$3 : I
/*      */           //   259: aload_0
/*      */           //   260: iconst_1
/*      */           //   261: putfield label : I
/*      */           //   264: invokevirtual yield : (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
/*      */           //   267: dup
/*      */           //   268: aload #21
/*      */           //   270: if_acmpne -> 343
/*      */           //   273: aload #21
/*      */           //   275: areturn
/*      */           //   276: iconst_0
/*      */           //   277: istore #5
/*      */           //   279: iconst_0
/*      */           //   280: istore #20
/*      */           //   282: aload_0
/*      */           //   283: getfield I$3 : I
/*      */           //   286: istore #15
/*      */           //   288: aload_0
/*      */           //   289: getfield I$2 : I
/*      */           //   292: istore #14
/*      */           //   294: aload_0
/*      */           //   295: getfield J$0 : J
/*      */           //   298: lstore #9
/*      */           //   300: aload_0
/*      */           //   301: getfield I$1 : I
/*      */           //   304: istore #8
/*      */           //   306: aload_0
/*      */           //   307: getfield I$0 : I
/*      */           //   310: istore #7
/*      */           //   312: aload_0
/*      */           //   313: getfield L$2 : Ljava/lang/Object;
/*      */           //   316: checkcast [J
/*      */           //   319: astore #6
/*      */           //   321: aload_0
/*      */           //   322: getfield L$1 : Ljava/lang/Object;
/*      */           //   325: checkcast androidx/collection/ScatterMap
/*      */           //   328: astore #4
/*      */           //   330: aload_0
/*      */           //   331: getfield L$0 : Ljava/lang/Object;
/*      */           //   334: checkcast kotlin/sequences/SequenceScope
/*      */           //   337: astore_2
/*      */           //   338: aload_1
/*      */           //   339: invokestatic throwOnFailure : (Ljava/lang/Object;)V
/*      */           //   342: aload_1
/*      */           //   343: pop
/*      */           //   344: lload #9
/*      */           //   346: bipush #8
/*      */           //   348: lshr
/*      */           //   349: lstore #9
/*      */           //   351: iinc #15, 1
/*      */           //   354: goto -> 136
/*      */           //   357: iload #14
/*      */           //   359: bipush #8
/*      */           //   361: if_icmpne -> 378
/*      */           //   364: iload #8
/*      */           //   366: iload #7
/*      */           //   368: if_icmpeq -> 377
/*      */           //   371: iinc #8, 1
/*      */           //   374: goto -> 81
/*      */           //   377: nop
/*      */           //   378: getstatic kotlin/Unit.INSTANCE : Lkotlin/Unit;
/*      */           //   381: areturn
/*      */           //   382: new java/lang/IllegalStateException
/*      */           //   385: dup
/*      */           //   386: ldc 'call to 'resume' before 'invoke' with coroutine'
/*      */           //   388: invokespecial <init> : (Ljava/lang/String;)V
/*      */           //   391: athrow
/*      */           // Line number table:
/*      */           //   Java source line number -> byte code offset
/*      */           //   #698	-> 3
/*      */           //   #699	-> 44
/*      */           //   #1835	-> 58
/*      */           //   #1836	-> 64
/*      */           //   #1838	-> 71
/*      */           //   #1839	-> 81
/*      */           //   #1840	-> 88
/*      */           //   #1841	-> 95
/*      */           //   #1840	-> 111
/*      */           //   #1842	-> 118
/*      */           //   #1843	-> 133
/*      */           //   #1844	-> 143
/*      */           //   #1845	-> 154
/*      */           //   #1844	-> 168
/*      */           //   #1846	-> 171
/*      */           //   #1847	-> 180
/*      */           //   #701	-> 187
/*      */           //   #702	-> 188
/*      */           //   #703	-> 192
/*      */           //   #704	-> 200
/*      */           //   #702	-> 208
/*      */           //   #701	-> 212
/*      */           //   #698	-> 273
/*      */           //   #707	-> 343
/*      */           //   #1847	-> 344
/*      */           //   #1849	-> 344
/*      */           //   #1843	-> 351
/*      */           //   #1851	-> 357
/*      */           //   #1838	-> 364
/*      */           //   #1854	-> 377
/*      */           //   #708	-> 378
/*      */           //   #698	-> 382
/*      */           // Local variable table:
/*      */           //   start	length	slot	name	descriptor
/*      */           //   44	232	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   338	6	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   344	20	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   364	7	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   371	6	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   55	9	3	this_$iv	Landroidx/collection/ScatterMap;
/*      */           //   64	212	6	m$iv	[J
/*      */           //   321	23	6	m$iv	[J
/*      */           //   344	20	6	m$iv	[J
/*      */           //   364	7	6	m$iv	[J
/*      */           //   371	6	6	m$iv	[J
/*      */           //   71	205	7	lastIndex$iv	I
/*      */           //   312	32	7	lastIndex$iv	I
/*      */           //   344	20	7	lastIndex$iv	I
/*      */           //   364	7	7	lastIndex$iv	I
/*      */           //   371	6	7	lastIndex$iv	I
/*      */           //   74	202	8	i$iv	I
/*      */           //   306	38	8	i$iv	I
/*      */           //   344	20	8	i$iv	I
/*      */           //   364	13	8	i$iv	I
/*      */           //   88	55	9	slot$iv	J
/*      */           //   143	133	9	slot$iv	J
/*      */           //   300	44	9	slot$iv	J
/*      */           //   344	20	9	slot$iv	J
/*      */           //   92	19	11	$this$maskEmptyOrDeleted$iv$iv	J
/*      */           //   180	4	13	index$iv	I
/*      */           //   133	143	14	bitCount$iv	I
/*      */           //   294	50	14	bitCount$iv	I
/*      */           //   344	20	14	bitCount$iv	I
/*      */           //   136	7	15	j$iv	I
/*      */           //   143	133	15	j$iv	I
/*      */           //   288	56	15	j$iv	I
/*      */           //   344	13	15	j$iv	I
/*      */           //   151	16	16	value$iv$iv	J
/*      */           //   184	24	19	index	I
/*      */           //   187	89	20	$i$a$-forEachIndexed-ScatterMap$MapWrapper$entries$1$iterator$1$1	I
/*      */           //   95	16	13	$i$f$maskEmptyOrDeleted	I
/*      */           //   154	14	18	$i$f$isFull	I
/*      */           //   58	218	5	$i$f$forEachIndexed	I
/*      */           //   36	346	0	this	Landroidx/collection/ScatterMap$MapWrapper$entries$1$iterator$1;
/*      */           //   36	346	1	$result	Ljava/lang/Object;
/*      */           //   282	62	20	$i$a$-forEachIndexed-ScatterMap$MapWrapper$entries$1$iterator$1$1	I
/*      */           //   279	99	5	$i$f$forEachIndexed	I
/*      */         }
/*      */         
/*      */         @NotNull
/*      */         public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<? super ScatterMap$MapWrapper$entries$1$iterator$1> $completion) {
/*      */           ScatterMap$MapWrapper$entries$1$iterator$1 scatterMap$MapWrapper$entries$1$iterator$1 = new ScatterMap$MapWrapper$entries$1$iterator$1($completion);
/*      */           scatterMap$MapWrapper$entries$1$iterator$1.L$0 = value;
/*      */           return (Continuation<Unit>)scatterMap$MapWrapper$entries$1$iterator$1;
/*      */         }
/*      */         
/*      */         @Nullable
/*      */         public final Object invoke(@NotNull SequenceScope p1, @Nullable Continuation<?> p2) {
/*      */           return ((ScatterMap$MapWrapper$entries$1$iterator$1)create(p1, p2)).invokeSuspend(Unit.INSTANCE);
/*      */         }
/*      */       }
/*      */       
/*      */       public boolean containsAll(@NotNull Collection elements) {
/*      */         // Byte code:
/*      */         //   0: aload_1
/*      */         //   1: ldc 'elements'
/*      */         //   3: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */         //   6: aload_1
/*      */         //   7: checkcast java/lang/Iterable
/*      */         //   10: astore_2
/*      */         //   11: aload_0
/*      */         //   12: getfield this$0 : Landroidx/collection/ScatterMap;
/*      */         //   15: astore_3
/*      */         //   16: iconst_0
/*      */         //   17: istore #4
/*      */         //   19: aload_2
/*      */         //   20: checkcast java/util/Collection
/*      */         //   23: invokeinterface isEmpty : ()Z
/*      */         //   28: ifeq -> 35
/*      */         //   31: iconst_1
/*      */         //   32: goto -> 101
/*      */         //   35: aload_2
/*      */         //   36: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */         //   41: astore #5
/*      */         //   43: aload #5
/*      */         //   45: invokeinterface hasNext : ()Z
/*      */         //   50: ifeq -> 100
/*      */         //   53: aload #5
/*      */         //   55: invokeinterface next : ()Ljava/lang/Object;
/*      */         //   60: astore #6
/*      */         //   62: aload #6
/*      */         //   64: checkcast java/util/Map$Entry
/*      */         //   67: astore #7
/*      */         //   69: iconst_0
/*      */         //   70: istore #8
/*      */         //   72: aload_3
/*      */         //   73: aload #7
/*      */         //   75: invokeinterface getKey : ()Ljava/lang/Object;
/*      */         //   80: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
/*      */         //   83: aload #7
/*      */         //   85: invokeinterface getValue : ()Ljava/lang/Object;
/*      */         //   90: invokestatic areEqual : (Ljava/lang/Object;Ljava/lang/Object;)Z
/*      */         //   93: ifne -> 43
/*      */         //   96: iconst_0
/*      */         //   97: goto -> 101
/*      */         //   100: iconst_1
/*      */         //   101: ireturn
/*      */         // Line number table:
/*      */         //   Java source line number -> byte code offset
/*      */         //   #712	-> 6
/*      */         //   #1835	-> 19
/*      */         //   #1836	-> 35
/*      */         //   #712	-> 72
/*      */         //   #1836	-> 93
/*      */         //   #1837	-> 100
/*      */         //   #712	-> 101
/*      */         // Local variable table:
/*      */         //   start	length	slot	name	descriptor
/*      */         //   72	21	8	$i$a$-all-ScatterMap$MapWrapper$entries$1$containsAll$1	I
/*      */         //   69	24	7	it	Ljava/util/Map$Entry;
/*      */         //   62	38	6	element$iv	Ljava/lang/Object;
/*      */         //   19	82	4	$i$f$all	I
/*      */         //   16	85	2	$this$all$iv	Ljava/lang/Iterable;
/*      */         //   0	102	0	this	Landroidx/collection/ScatterMap$MapWrapper$entries$1;
/*      */         //   0	102	1	elements	Ljava/util/Collection;
/*      */       }
/*      */       
/*      */       public boolean contains(@NotNull Map.Entry element) {
/*      */         Intrinsics.checkNotNullParameter(element, "element");
/*      */         return Intrinsics.areEqual(ScatterMap.this.get((K)element.getKey()), element.getValue());
/*      */       }
/*      */       
/*      */       public boolean add(Map.Entry element) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean addAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public void clear() {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean remove(Object element) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean removeAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean retainAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public <T> T[] toArray(Object[] array) {
/*      */         Intrinsics.checkNotNullParameter(array, "array");
/*      */         return (T[])CollectionToArray.toArray(this, array);
/*      */       }
/*      */       
/*      */       public Object[] toArray() {
/*      */         return CollectionToArray.toArray(this);
/*      */       }
/*      */     }
/*      */     
/*      */     @NotNull
/*      */     public Set<K> getKeys() {
/*      */       return new ScatterMap$MapWrapper$keys$1();
/*      */     }
/*      */     
/*      */     @Metadata(mv = {1, 8, 0}, k = 1, xi = 48, d1 = {"\000)\n\000\n\002\020\"\n\000\n\002\020\b\n\002\b\003\n\002\020\013\n\002\b\004\n\002\020\036\n\002\b\002\n\002\020(\n\000*\001\000\b\n\030\0002\b\022\004\022\0028\0000\001J\026\020\006\032\0020\0072\006\020\b\032\0028\000H\002¢\006\002\020\tJ\026\020\n\032\0020\0072\f\020\013\032\b\022\004\022\0028\0000\fH\026J\b\020\r\032\0020\007H\026J\017\020\016\032\b\022\004\022\0028\0000\017H\002R\024\020\002\032\0020\0038VX\004¢\006\006\032\004\b\004\020\005¨\006\020"}, d2 = {"androidx/collection/ScatterMap$MapWrapper$keys$1", "", "size", "", "getSize", "()I", "contains", "", "element", "(Ljava/lang/Object;)Z", "containsAll", "elements", "", "isEmpty", "iterator", "", "collection"})
/*      */     @SourceDebugExtension({"SMAP\nScatterMap.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$keys$1\n+ 2 _Collections.kt\nkotlin/collections/CollectionsKt___CollectionsKt\n*L\n1#1,1834:1\n1726#2,3:1835\n*S KotlinDebug\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$keys$1\n*L\n731#1:1835,3\n*E\n"})
/*      */     public static final class ScatterMap$MapWrapper$keys$1 implements Set<K>, KMappedMarker {
/*      */       public int getSize() {
/*      */         return ScatterMap.this._size;
/*      */       }
/*      */       
/*      */       public boolean isEmpty() {
/*      */         return ScatterMap.this.isEmpty();
/*      */       }
/*      */       
/*      */       @NotNull
/*      */       public Iterator<K> iterator() {
/*      */         return SequencesKt.iterator(new ScatterMap$MapWrapper$keys$1$iterator$1(null));
/*      */       }
/*      */       
/*      */       @DebugMetadata(f = "ScatterMap.kt", l = {726}, i = {0, 0, 0, 0, 0, 0, 0, 0}, s = {"L$0", "L$1", "L$2", "I$0", "I$1", "J$0", "I$2", "I$3"}, n = {"$this$iterator", "k$iv", "m$iv$iv", "lastIndex$iv$iv", "i$iv$iv", "slot$iv$iv", "bitCount$iv$iv", "j$iv$iv"}, m = "invokeSuspend", c = "androidx.collection.ScatterMap$MapWrapper$keys$1$iterator$1")
/*      */       @Metadata(mv = {1, 8, 0}, k = 3, xi = 48, d1 = {"\000\016\n\000\n\002\020\002\n\002\b\002\n\002\030\002\020\000\032\0020\001\"\004\b\000\020\002\"\004\b\001\020\003*\b\022\004\022\002H\0020\004H@"}, d2 = {"<anonymous>", "", "K", "V", "Lkotlin/sequences/SequenceScope;"})
/*      */       @SourceDebugExtension({"SMAP\nScatterMap.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$keys$1$iterator$1\n+ 2 ScatterMap.kt\nandroidx/collection/ScatterMap\n+ 3 ScatterMap.kt\nandroidx/collection/ScatterMapKt\n*L\n1#1,1834:1\n405#2,3:1835\n363#2,6:1838\n373#2,3:1845\n376#2,2:1849\n409#2,2:1851\n379#2,6:1853\n411#2:1859\n1810#3:1844\n1672#3:1848\n*S KotlinDebug\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$keys$1$iterator$1\n*L\n725#1:1835,3\n725#1:1838,6\n725#1:1845,3\n725#1:1849,2\n725#1:1851,2\n725#1:1853,6\n725#1:1859\n725#1:1844\n725#1:1848\n*E\n"})
/*      */       static final class ScatterMap$MapWrapper$keys$1$iterator$1 extends RestrictedSuspendLambda implements Function2<SequenceScope<? super K>, Continuation<? super Unit>, Object> {
/*      */         Object L$1;
/*      */         Object L$2;
/*      */         int I$0;
/*      */         int I$1;
/*      */         int I$2;
/*      */         int I$3;
/*      */         long J$0;
/*      */         int label;
/*      */         
/*      */         ScatterMap$MapWrapper$keys$1$iterator$1(Continuation $completion) {
/*      */           super(2, $completion);
/*      */         }
/*      */         
/*      */         @Nullable
/*      */         public final Object invokeSuspend(@NotNull Object $result) {
/*      */           // Byte code:
/*      */           //   0: invokestatic getCOROUTINE_SUSPENDED : ()Ljava/lang/Object;
/*      */           //   3: astore #25
/*      */           //   5: aload_0
/*      */           //   6: getfield label : I
/*      */           //   9: tableswitch default -> 386, 0 -> 32, 1 -> 272
/*      */           //   32: aload_1
/*      */           //   33: invokestatic throwOnFailure : (Ljava/lang/Object;)V
/*      */           //   36: aload_0
/*      */           //   37: getfield L$0 : Ljava/lang/Object;
/*      */           //   40: checkcast kotlin/sequences/SequenceScope
/*      */           //   43: astore_2
/*      */           //   44: aload_0
/*      */           //   45: getfield this$0 : Landroidx/collection/ScatterMap;
/*      */           //   48: astore_3
/*      */           //   49: iconst_0
/*      */           //   50: istore #4
/*      */           //   52: aload_3
/*      */           //   53: getfield keys : [Ljava/lang/Object;
/*      */           //   56: astore #5
/*      */           //   58: aload_3
/*      */           //   59: astore #6
/*      */           //   61: iconst_0
/*      */           //   62: istore #7
/*      */           //   64: aload #6
/*      */           //   66: getfield metadata : [J
/*      */           //   69: astore #8
/*      */           //   71: aload #8
/*      */           //   73: arraylength
/*      */           //   74: iconst_2
/*      */           //   75: isub
/*      */           //   76: istore #9
/*      */           //   78: iconst_0
/*      */           //   79: istore #10
/*      */           //   81: iload #10
/*      */           //   83: iload #9
/*      */           //   85: if_icmpgt -> 380
/*      */           //   88: aload #8
/*      */           //   90: iload #10
/*      */           //   92: laload
/*      */           //   93: lstore #11
/*      */           //   95: lload #11
/*      */           //   97: lstore #13
/*      */           //   99: iconst_0
/*      */           //   100: istore #15
/*      */           //   102: lload #13
/*      */           //   104: lload #13
/*      */           //   106: ldc2_w -1
/*      */           //   109: lxor
/*      */           //   110: bipush #7
/*      */           //   112: lshl
/*      */           //   113: land
/*      */           //   114: ldc2_w -9187201950435737472
/*      */           //   117: land
/*      */           //   118: ldc2_w -9187201950435737472
/*      */           //   121: lcmp
/*      */           //   122: ifeq -> 367
/*      */           //   125: bipush #8
/*      */           //   127: iload #10
/*      */           //   129: iload #9
/*      */           //   131: isub
/*      */           //   132: iconst_m1
/*      */           //   133: ixor
/*      */           //   134: bipush #31
/*      */           //   136: iushr
/*      */           //   137: isub
/*      */           //   138: istore #16
/*      */           //   140: iconst_0
/*      */           //   141: istore #17
/*      */           //   143: iload #17
/*      */           //   145: iload #16
/*      */           //   147: if_icmpge -> 360
/*      */           //   150: lload #11
/*      */           //   152: ldc2_w 255
/*      */           //   155: land
/*      */           //   156: lstore #18
/*      */           //   158: iconst_0
/*      */           //   159: istore #20
/*      */           //   161: lload #18
/*      */           //   163: ldc2_w 128
/*      */           //   166: lcmp
/*      */           //   167: ifge -> 174
/*      */           //   170: iconst_1
/*      */           //   171: goto -> 175
/*      */           //   174: iconst_0
/*      */           //   175: ifeq -> 347
/*      */           //   178: iload #10
/*      */           //   180: iconst_3
/*      */           //   181: ishl
/*      */           //   182: iload #17
/*      */           //   184: iadd
/*      */           //   185: istore #15
/*      */           //   187: iload #15
/*      */           //   189: istore #21
/*      */           //   191: iconst_0
/*      */           //   192: istore #22
/*      */           //   194: aload #5
/*      */           //   196: iload #21
/*      */           //   198: aaload
/*      */           //   199: astore #23
/*      */           //   201: iconst_0
/*      */           //   202: istore #24
/*      */           //   204: aload_2
/*      */           //   205: aload #23
/*      */           //   207: aload_0
/*      */           //   208: aload_0
/*      */           //   209: aload_2
/*      */           //   210: putfield L$0 : Ljava/lang/Object;
/*      */           //   213: aload_0
/*      */           //   214: aload #5
/*      */           //   216: putfield L$1 : Ljava/lang/Object;
/*      */           //   219: aload_0
/*      */           //   220: aload #8
/*      */           //   222: putfield L$2 : Ljava/lang/Object;
/*      */           //   225: aload_0
/*      */           //   226: iload #9
/*      */           //   228: putfield I$0 : I
/*      */           //   231: aload_0
/*      */           //   232: iload #10
/*      */           //   234: putfield I$1 : I
/*      */           //   237: aload_0
/*      */           //   238: lload #11
/*      */           //   240: putfield J$0 : J
/*      */           //   243: aload_0
/*      */           //   244: iload #16
/*      */           //   246: putfield I$2 : I
/*      */           //   249: aload_0
/*      */           //   250: iload #17
/*      */           //   252: putfield I$3 : I
/*      */           //   255: aload_0
/*      */           //   256: iconst_1
/*      */           //   257: putfield label : I
/*      */           //   260: invokevirtual yield : (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
/*      */           //   263: dup
/*      */           //   264: aload #25
/*      */           //   266: if_acmpne -> 345
/*      */           //   269: aload #25
/*      */           //   271: areturn
/*      */           //   272: iconst_0
/*      */           //   273: istore #4
/*      */           //   275: iconst_0
/*      */           //   276: istore #7
/*      */           //   278: iconst_0
/*      */           //   279: istore #22
/*      */           //   281: iconst_0
/*      */           //   282: istore #24
/*      */           //   284: aload_0
/*      */           //   285: getfield I$3 : I
/*      */           //   288: istore #17
/*      */           //   290: aload_0
/*      */           //   291: getfield I$2 : I
/*      */           //   294: istore #16
/*      */           //   296: aload_0
/*      */           //   297: getfield J$0 : J
/*      */           //   300: lstore #11
/*      */           //   302: aload_0
/*      */           //   303: getfield I$1 : I
/*      */           //   306: istore #10
/*      */           //   308: aload_0
/*      */           //   309: getfield I$0 : I
/*      */           //   312: istore #9
/*      */           //   314: aload_0
/*      */           //   315: getfield L$2 : Ljava/lang/Object;
/*      */           //   318: checkcast [J
/*      */           //   321: astore #8
/*      */           //   323: aload_0
/*      */           //   324: getfield L$1 : Ljava/lang/Object;
/*      */           //   327: checkcast [Ljava/lang/Object;
/*      */           //   330: astore #5
/*      */           //   332: aload_0
/*      */           //   333: getfield L$0 : Ljava/lang/Object;
/*      */           //   336: checkcast kotlin/sequences/SequenceScope
/*      */           //   339: astore_2
/*      */           //   340: aload_1
/*      */           //   341: invokestatic throwOnFailure : (Ljava/lang/Object;)V
/*      */           //   344: aload_1
/*      */           //   345: pop
/*      */           //   346: nop
/*      */           //   347: lload #11
/*      */           //   349: bipush #8
/*      */           //   351: lshr
/*      */           //   352: lstore #11
/*      */           //   354: iinc #17, 1
/*      */           //   357: goto -> 143
/*      */           //   360: iload #16
/*      */           //   362: bipush #8
/*      */           //   364: if_icmpne -> 381
/*      */           //   367: iload #10
/*      */           //   369: iload #9
/*      */           //   371: if_icmpeq -> 380
/*      */           //   374: iinc #10, 1
/*      */           //   377: goto -> 88
/*      */           //   380: nop
/*      */           //   381: nop
/*      */           //   382: getstatic kotlin/Unit.INSTANCE : Lkotlin/Unit;
/*      */           //   385: areturn
/*      */           //   386: new java/lang/IllegalStateException
/*      */           //   389: dup
/*      */           //   390: ldc 'call to 'resume' before 'invoke' with coroutine'
/*      */           //   392: invokespecial <init> : (Ljava/lang/String;)V
/*      */           //   395: athrow
/*      */           // Line number table:
/*      */           //   Java source line number -> byte code offset
/*      */           //   #724	-> 3
/*      */           //   #725	-> 44
/*      */           //   #1835	-> 52
/*      */           //   #1837	-> 58
/*      */           //   #1838	-> 64
/*      */           //   #1839	-> 71
/*      */           //   #1841	-> 78
/*      */           //   #1842	-> 88
/*      */           //   #1843	-> 95
/*      */           //   #1844	-> 102
/*      */           //   #1843	-> 118
/*      */           //   #1845	-> 125
/*      */           //   #1846	-> 140
/*      */           //   #1847	-> 150
/*      */           //   #1848	-> 161
/*      */           //   #1847	-> 175
/*      */           //   #1849	-> 178
/*      */           //   #1850	-> 187
/*      */           //   #1851	-> 194
/*      */           //   #726	-> 204
/*      */           //   #724	-> 269
/*      */           //   #727	-> 345
/*      */           //   #1851	-> 346
/*      */           //   #1852	-> 346
/*      */           //   #1850	-> 347
/*      */           //   #1853	-> 347
/*      */           //   #1846	-> 354
/*      */           //   #1855	-> 360
/*      */           //   #1841	-> 367
/*      */           //   #1858	-> 380
/*      */           //   #1859	-> 381
/*      */           //   #728	-> 382
/*      */           //   #724	-> 386
/*      */           // Local variable table:
/*      */           //   start	length	slot	name	descriptor
/*      */           //   44	228	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   340	6	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   346	21	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   367	7	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   374	6	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   49	12	3	this_$iv	Landroidx/collection/ScatterMap;
/*      */           //   58	214	5	k$iv	[Ljava/lang/Object;
/*      */           //   332	14	5	k$iv	[Ljava/lang/Object;
/*      */           //   346	21	5	k$iv	[Ljava/lang/Object;
/*      */           //   367	7	5	k$iv	[Ljava/lang/Object;
/*      */           //   374	6	5	k$iv	[Ljava/lang/Object;
/*      */           //   61	10	6	this_$iv$iv	Landroidx/collection/ScatterMap;
/*      */           //   71	201	8	m$iv$iv	[J
/*      */           //   323	23	8	m$iv$iv	[J
/*      */           //   346	21	8	m$iv$iv	[J
/*      */           //   367	7	8	m$iv$iv	[J
/*      */           //   374	6	8	m$iv$iv	[J
/*      */           //   78	194	9	lastIndex$iv$iv	I
/*      */           //   314	32	9	lastIndex$iv$iv	I
/*      */           //   346	21	9	lastIndex$iv$iv	I
/*      */           //   367	7	9	lastIndex$iv$iv	I
/*      */           //   374	6	9	lastIndex$iv$iv	I
/*      */           //   81	191	10	i$iv$iv	I
/*      */           //   308	38	10	i$iv$iv	I
/*      */           //   346	21	10	i$iv$iv	I
/*      */           //   367	13	10	i$iv$iv	I
/*      */           //   95	55	11	slot$iv$iv	J
/*      */           //   150	122	11	slot$iv$iv	J
/*      */           //   302	44	11	slot$iv$iv	J
/*      */           //   346	21	11	slot$iv$iv	J
/*      */           //   99	19	13	$this$maskEmptyOrDeleted$iv$iv$iv	J
/*      */           //   187	4	15	index$iv$iv	I
/*      */           //   140	132	16	bitCount$iv$iv	I
/*      */           //   296	50	16	bitCount$iv$iv	I
/*      */           //   346	21	16	bitCount$iv$iv	I
/*      */           //   143	7	17	j$iv$iv	I
/*      */           //   150	122	17	j$iv$iv	I
/*      */           //   290	56	17	j$iv$iv	I
/*      */           //   346	14	17	j$iv$iv	I
/*      */           //   158	16	18	value$iv$iv$iv	J
/*      */           //   191	10	21	index$iv	I
/*      */           //   201	62	23	key	Ljava/lang/Object;
/*      */           //   204	68	24	$i$a$-forEachKey-ScatterMap$MapWrapper$keys$1$iterator$1$1	I
/*      */           //   194	78	22	$i$a$-forEachIndexed-ScatterMap$forEachKey$1$iv	I
/*      */           //   102	16	15	$i$f$maskEmptyOrDeleted	I
/*      */           //   161	14	20	$i$f$isFull	I
/*      */           //   64	208	7	$i$f$forEachIndexed	I
/*      */           //   52	220	4	$i$f$forEachKey	I
/*      */           //   36	350	0	this	Landroidx/collection/ScatterMap$MapWrapper$keys$1$iterator$1;
/*      */           //   36	350	1	$result	Ljava/lang/Object;
/*      */           //   284	62	24	$i$a$-forEachKey-ScatterMap$MapWrapper$keys$1$iterator$1$1	I
/*      */           //   281	66	22	$i$a$-forEachIndexed-ScatterMap$forEachKey$1$iv	I
/*      */           //   278	103	7	$i$f$forEachIndexed	I
/*      */           //   275	107	4	$i$f$forEachKey	I
/*      */         }
/*      */         
/*      */         @NotNull
/*      */         public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<? super ScatterMap$MapWrapper$keys$1$iterator$1> $completion) {
/*      */           ScatterMap$MapWrapper$keys$1$iterator$1 scatterMap$MapWrapper$keys$1$iterator$1 = new ScatterMap$MapWrapper$keys$1$iterator$1($completion);
/*      */           scatterMap$MapWrapper$keys$1$iterator$1.L$0 = value;
/*      */           return (Continuation<Unit>)scatterMap$MapWrapper$keys$1$iterator$1;
/*      */         }
/*      */         
/*      */         @Nullable
/*      */         public final Object invoke(@NotNull SequenceScope p1, @Nullable Continuation<?> p2) {
/*      */           return ((ScatterMap$MapWrapper$keys$1$iterator$1)create(p1, p2)).invokeSuspend(Unit.INSTANCE);
/*      */         }
/*      */       }
/*      */       
/*      */       public boolean containsAll(@NotNull Collection elements) {
/*      */         // Byte code:
/*      */         //   0: aload_1
/*      */         //   1: ldc 'elements'
/*      */         //   3: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */         //   6: aload_1
/*      */         //   7: checkcast java/lang/Iterable
/*      */         //   10: astore_2
/*      */         //   11: aload_0
/*      */         //   12: getfield this$0 : Landroidx/collection/ScatterMap;
/*      */         //   15: astore_3
/*      */         //   16: iconst_0
/*      */         //   17: istore #4
/*      */         //   19: aload_2
/*      */         //   20: checkcast java/util/Collection
/*      */         //   23: invokeinterface isEmpty : ()Z
/*      */         //   28: ifeq -> 35
/*      */         //   31: iconst_1
/*      */         //   32: goto -> 83
/*      */         //   35: aload_2
/*      */         //   36: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */         //   41: astore #5
/*      */         //   43: aload #5
/*      */         //   45: invokeinterface hasNext : ()Z
/*      */         //   50: ifeq -> 82
/*      */         //   53: aload #5
/*      */         //   55: invokeinterface next : ()Ljava/lang/Object;
/*      */         //   60: astore #6
/*      */         //   62: aload #6
/*      */         //   64: astore #7
/*      */         //   66: iconst_0
/*      */         //   67: istore #8
/*      */         //   69: aload_3
/*      */         //   70: aload #7
/*      */         //   72: invokevirtual containsKey : (Ljava/lang/Object;)Z
/*      */         //   75: ifne -> 43
/*      */         //   78: iconst_0
/*      */         //   79: goto -> 83
/*      */         //   82: iconst_1
/*      */         //   83: ireturn
/*      */         // Line number table:
/*      */         //   Java source line number -> byte code offset
/*      */         //   #731	-> 6
/*      */         //   #1835	-> 19
/*      */         //   #1836	-> 35
/*      */         //   #731	-> 69
/*      */         //   #1836	-> 75
/*      */         //   #1837	-> 82
/*      */         //   #731	-> 83
/*      */         // Local variable table:
/*      */         //   start	length	slot	name	descriptor
/*      */         //   69	6	8	$i$a$-all-ScatterMap$MapWrapper$keys$1$containsAll$1	I
/*      */         //   66	9	7	it	Ljava/lang/Object;
/*      */         //   62	20	6	element$iv	Ljava/lang/Object;
/*      */         //   19	64	4	$i$f$all	I
/*      */         //   16	67	2	$this$all$iv	Ljava/lang/Iterable;
/*      */         //   0	84	0	this	Landroidx/collection/ScatterMap$MapWrapper$keys$1;
/*      */         //   0	84	1	elements	Ljava/util/Collection;
/*      */       }
/*      */       
/*      */       public boolean contains(Object element) {
/*      */         return ScatterMap.this.containsKey((K)element);
/*      */       }
/*      */       
/*      */       public boolean add(Object element) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean addAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public void clear() {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean remove(Object element) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean removeAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean retainAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public <T> T[] toArray(Object[] array) {
/*      */         Intrinsics.checkNotNullParameter(array, "array");
/*      */         return (T[])CollectionToArray.toArray(this, array);
/*      */       }
/*      */       
/*      */       public Object[] toArray() {
/*      */         return CollectionToArray.toArray(this);
/*      */       }
/*      */     }
/*      */     
/*      */     @NotNull
/*      */     public Collection<V> getValues() {
/*      */       return new ScatterMap$MapWrapper$values$1();
/*      */     }
/*      */     
/*      */     @Metadata(mv = {1, 8, 0}, k = 1, xi = 48, d1 = {"\000!\n\000\n\002\020\036\n\000\n\002\020\b\n\002\b\003\n\002\020\013\n\002\b\006\n\002\020(\n\000*\001\000\b\n\030\0002\b\022\004\022\0028\0000\001J\026\020\006\032\0020\0072\006\020\b\032\0028\000H\002¢\006\002\020\tJ\026\020\n\032\0020\0072\f\020\013\032\b\022\004\022\0028\0000\001H\026J\b\020\f\032\0020\007H\026J\017\020\r\032\b\022\004\022\0028\0000\016H\002R\024\020\002\032\0020\0038VX\004¢\006\006\032\004\b\004\020\005¨\006\017"}, d2 = {"androidx/collection/ScatterMap$MapWrapper$values$1", "", "size", "", "getSize", "()I", "contains", "", "element", "(Ljava/lang/Object;)Z", "containsAll", "elements", "isEmpty", "iterator", "", "collection"})
/*      */     @SourceDebugExtension({"SMAP\nScatterMap.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$values$1\n+ 2 _Collections.kt\nkotlin/collections/CollectionsKt___CollectionsKt\n*L\n1#1,1834:1\n1726#2,3:1835\n*S KotlinDebug\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$values$1\n*L\n749#1:1835,3\n*E\n"})
/*      */     public static final class ScatterMap$MapWrapper$values$1 implements Collection<V>, KMappedMarker {
/*      */       public int getSize() {
/*      */         return ScatterMap.this._size;
/*      */       }
/*      */       
/*      */       public boolean isEmpty() {
/*      */         return ScatterMap.this.isEmpty();
/*      */       }
/*      */       
/*      */       @NotNull
/*      */       public Iterator<V> iterator() {
/*      */         return SequencesKt.iterator(new ScatterMap$MapWrapper$values$1$iterator$1(null));
/*      */       }
/*      */       
/*      */       @DebugMetadata(f = "ScatterMap.kt", l = {744}, i = {0, 0, 0, 0, 0, 0, 0, 0}, s = {"L$0", "L$1", "L$2", "I$0", "I$1", "J$0", "I$2", "I$3"}, n = {"$this$iterator", "v$iv", "m$iv$iv", "lastIndex$iv$iv", "i$iv$iv", "slot$iv$iv", "bitCount$iv$iv", "j$iv$iv"}, m = "invokeSuspend", c = "androidx.collection.ScatterMap$MapWrapper$values$1$iterator$1")
/*      */       @Metadata(mv = {1, 8, 0}, k = 3, xi = 48, d1 = {"\000\016\n\000\n\002\020\002\n\002\b\002\n\002\030\002\020\000\032\0020\001\"\004\b\000\020\002\"\004\b\001\020\003*\b\022\004\022\002H\0030\004H@"}, d2 = {"<anonymous>", "", "K", "V", "Lkotlin/sequences/SequenceScope;"})
/*      */       @SourceDebugExtension({"SMAP\nScatterMap.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$values$1$iterator$1\n+ 2 ScatterMap.kt\nandroidx/collection/ScatterMap\n+ 3 ScatterMap.kt\nandroidx/collection/ScatterMapKt\n*L\n1#1,1834:1\n418#2,3:1835\n363#2,6:1838\n373#2,3:1845\n376#2,2:1849\n422#2,2:1851\n379#2,6:1853\n424#2:1859\n1810#3:1844\n1672#3:1848\n*S KotlinDebug\n*F\n+ 1 ScatterMap.kt\nandroidx/collection/ScatterMap$MapWrapper$values$1$iterator$1\n*L\n743#1:1835,3\n743#1:1838,6\n743#1:1845,3\n743#1:1849,2\n743#1:1851,2\n743#1:1853,6\n743#1:1859\n743#1:1844\n743#1:1848\n*E\n"})
/*      */       static final class ScatterMap$MapWrapper$values$1$iterator$1 extends RestrictedSuspendLambda implements Function2<SequenceScope<? super V>, Continuation<? super Unit>, Object> {
/*      */         Object L$1;
/*      */         Object L$2;
/*      */         int I$0;
/*      */         int I$1;
/*      */         int I$2;
/*      */         int I$3;
/*      */         long J$0;
/*      */         int label;
/*      */         
/*      */         ScatterMap$MapWrapper$values$1$iterator$1(Continuation $completion) {
/*      */           super(2, $completion);
/*      */         }
/*      */         
/*      */         @Nullable
/*      */         public final Object invokeSuspend(@NotNull Object $result) {
/*      */           // Byte code:
/*      */           //   0: invokestatic getCOROUTINE_SUSPENDED : ()Ljava/lang/Object;
/*      */           //   3: astore #25
/*      */           //   5: aload_0
/*      */           //   6: getfield label : I
/*      */           //   9: tableswitch default -> 386, 0 -> 32, 1 -> 272
/*      */           //   32: aload_1
/*      */           //   33: invokestatic throwOnFailure : (Ljava/lang/Object;)V
/*      */           //   36: aload_0
/*      */           //   37: getfield L$0 : Ljava/lang/Object;
/*      */           //   40: checkcast kotlin/sequences/SequenceScope
/*      */           //   43: astore_2
/*      */           //   44: aload_0
/*      */           //   45: getfield this$0 : Landroidx/collection/ScatterMap;
/*      */           //   48: astore_3
/*      */           //   49: iconst_0
/*      */           //   50: istore #4
/*      */           //   52: aload_3
/*      */           //   53: getfield values : [Ljava/lang/Object;
/*      */           //   56: astore #5
/*      */           //   58: aload_3
/*      */           //   59: astore #6
/*      */           //   61: iconst_0
/*      */           //   62: istore #7
/*      */           //   64: aload #6
/*      */           //   66: getfield metadata : [J
/*      */           //   69: astore #8
/*      */           //   71: aload #8
/*      */           //   73: arraylength
/*      */           //   74: iconst_2
/*      */           //   75: isub
/*      */           //   76: istore #9
/*      */           //   78: iconst_0
/*      */           //   79: istore #10
/*      */           //   81: iload #10
/*      */           //   83: iload #9
/*      */           //   85: if_icmpgt -> 380
/*      */           //   88: aload #8
/*      */           //   90: iload #10
/*      */           //   92: laload
/*      */           //   93: lstore #11
/*      */           //   95: lload #11
/*      */           //   97: lstore #13
/*      */           //   99: iconst_0
/*      */           //   100: istore #15
/*      */           //   102: lload #13
/*      */           //   104: lload #13
/*      */           //   106: ldc2_w -1
/*      */           //   109: lxor
/*      */           //   110: bipush #7
/*      */           //   112: lshl
/*      */           //   113: land
/*      */           //   114: ldc2_w -9187201950435737472
/*      */           //   117: land
/*      */           //   118: ldc2_w -9187201950435737472
/*      */           //   121: lcmp
/*      */           //   122: ifeq -> 367
/*      */           //   125: bipush #8
/*      */           //   127: iload #10
/*      */           //   129: iload #9
/*      */           //   131: isub
/*      */           //   132: iconst_m1
/*      */           //   133: ixor
/*      */           //   134: bipush #31
/*      */           //   136: iushr
/*      */           //   137: isub
/*      */           //   138: istore #16
/*      */           //   140: iconst_0
/*      */           //   141: istore #17
/*      */           //   143: iload #17
/*      */           //   145: iload #16
/*      */           //   147: if_icmpge -> 360
/*      */           //   150: lload #11
/*      */           //   152: ldc2_w 255
/*      */           //   155: land
/*      */           //   156: lstore #18
/*      */           //   158: iconst_0
/*      */           //   159: istore #20
/*      */           //   161: lload #18
/*      */           //   163: ldc2_w 128
/*      */           //   166: lcmp
/*      */           //   167: ifge -> 174
/*      */           //   170: iconst_1
/*      */           //   171: goto -> 175
/*      */           //   174: iconst_0
/*      */           //   175: ifeq -> 347
/*      */           //   178: iload #10
/*      */           //   180: iconst_3
/*      */           //   181: ishl
/*      */           //   182: iload #17
/*      */           //   184: iadd
/*      */           //   185: istore #15
/*      */           //   187: iload #15
/*      */           //   189: istore #21
/*      */           //   191: iconst_0
/*      */           //   192: istore #22
/*      */           //   194: aload #5
/*      */           //   196: iload #21
/*      */           //   198: aaload
/*      */           //   199: astore #23
/*      */           //   201: iconst_0
/*      */           //   202: istore #24
/*      */           //   204: aload_2
/*      */           //   205: aload #23
/*      */           //   207: aload_0
/*      */           //   208: aload_0
/*      */           //   209: aload_2
/*      */           //   210: putfield L$0 : Ljava/lang/Object;
/*      */           //   213: aload_0
/*      */           //   214: aload #5
/*      */           //   216: putfield L$1 : Ljava/lang/Object;
/*      */           //   219: aload_0
/*      */           //   220: aload #8
/*      */           //   222: putfield L$2 : Ljava/lang/Object;
/*      */           //   225: aload_0
/*      */           //   226: iload #9
/*      */           //   228: putfield I$0 : I
/*      */           //   231: aload_0
/*      */           //   232: iload #10
/*      */           //   234: putfield I$1 : I
/*      */           //   237: aload_0
/*      */           //   238: lload #11
/*      */           //   240: putfield J$0 : J
/*      */           //   243: aload_0
/*      */           //   244: iload #16
/*      */           //   246: putfield I$2 : I
/*      */           //   249: aload_0
/*      */           //   250: iload #17
/*      */           //   252: putfield I$3 : I
/*      */           //   255: aload_0
/*      */           //   256: iconst_1
/*      */           //   257: putfield label : I
/*      */           //   260: invokevirtual yield : (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
/*      */           //   263: dup
/*      */           //   264: aload #25
/*      */           //   266: if_acmpne -> 345
/*      */           //   269: aload #25
/*      */           //   271: areturn
/*      */           //   272: iconst_0
/*      */           //   273: istore #4
/*      */           //   275: iconst_0
/*      */           //   276: istore #7
/*      */           //   278: iconst_0
/*      */           //   279: istore #22
/*      */           //   281: iconst_0
/*      */           //   282: istore #24
/*      */           //   284: aload_0
/*      */           //   285: getfield I$3 : I
/*      */           //   288: istore #17
/*      */           //   290: aload_0
/*      */           //   291: getfield I$2 : I
/*      */           //   294: istore #16
/*      */           //   296: aload_0
/*      */           //   297: getfield J$0 : J
/*      */           //   300: lstore #11
/*      */           //   302: aload_0
/*      */           //   303: getfield I$1 : I
/*      */           //   306: istore #10
/*      */           //   308: aload_0
/*      */           //   309: getfield I$0 : I
/*      */           //   312: istore #9
/*      */           //   314: aload_0
/*      */           //   315: getfield L$2 : Ljava/lang/Object;
/*      */           //   318: checkcast [J
/*      */           //   321: astore #8
/*      */           //   323: aload_0
/*      */           //   324: getfield L$1 : Ljava/lang/Object;
/*      */           //   327: checkcast [Ljava/lang/Object;
/*      */           //   330: astore #5
/*      */           //   332: aload_0
/*      */           //   333: getfield L$0 : Ljava/lang/Object;
/*      */           //   336: checkcast kotlin/sequences/SequenceScope
/*      */           //   339: astore_2
/*      */           //   340: aload_1
/*      */           //   341: invokestatic throwOnFailure : (Ljava/lang/Object;)V
/*      */           //   344: aload_1
/*      */           //   345: pop
/*      */           //   346: nop
/*      */           //   347: lload #11
/*      */           //   349: bipush #8
/*      */           //   351: lshr
/*      */           //   352: lstore #11
/*      */           //   354: iinc #17, 1
/*      */           //   357: goto -> 143
/*      */           //   360: iload #16
/*      */           //   362: bipush #8
/*      */           //   364: if_icmpne -> 381
/*      */           //   367: iload #10
/*      */           //   369: iload #9
/*      */           //   371: if_icmpeq -> 380
/*      */           //   374: iinc #10, 1
/*      */           //   377: goto -> 88
/*      */           //   380: nop
/*      */           //   381: nop
/*      */           //   382: getstatic kotlin/Unit.INSTANCE : Lkotlin/Unit;
/*      */           //   385: areturn
/*      */           //   386: new java/lang/IllegalStateException
/*      */           //   389: dup
/*      */           //   390: ldc 'call to 'resume' before 'invoke' with coroutine'
/*      */           //   392: invokespecial <init> : (Ljava/lang/String;)V
/*      */           //   395: athrow
/*      */           // Line number table:
/*      */           //   Java source line number -> byte code offset
/*      */           //   #742	-> 3
/*      */           //   #743	-> 44
/*      */           //   #1835	-> 52
/*      */           //   #1837	-> 58
/*      */           //   #1838	-> 64
/*      */           //   #1839	-> 71
/*      */           //   #1841	-> 78
/*      */           //   #1842	-> 88
/*      */           //   #1843	-> 95
/*      */           //   #1844	-> 102
/*      */           //   #1843	-> 118
/*      */           //   #1845	-> 125
/*      */           //   #1846	-> 140
/*      */           //   #1847	-> 150
/*      */           //   #1848	-> 161
/*      */           //   #1847	-> 175
/*      */           //   #1849	-> 178
/*      */           //   #1850	-> 187
/*      */           //   #1851	-> 194
/*      */           //   #744	-> 204
/*      */           //   #742	-> 269
/*      */           //   #745	-> 345
/*      */           //   #1851	-> 346
/*      */           //   #1852	-> 346
/*      */           //   #1850	-> 347
/*      */           //   #1853	-> 347
/*      */           //   #1846	-> 354
/*      */           //   #1855	-> 360
/*      */           //   #1841	-> 367
/*      */           //   #1858	-> 380
/*      */           //   #1859	-> 381
/*      */           //   #746	-> 382
/*      */           //   #742	-> 386
/*      */           // Local variable table:
/*      */           //   start	length	slot	name	descriptor
/*      */           //   44	228	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   340	6	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   346	21	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   367	7	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   374	6	2	$this$iterator	Lkotlin/sequences/SequenceScope;
/*      */           //   49	12	3	this_$iv	Landroidx/collection/ScatterMap;
/*      */           //   58	214	5	v$iv	[Ljava/lang/Object;
/*      */           //   332	14	5	v$iv	[Ljava/lang/Object;
/*      */           //   346	21	5	v$iv	[Ljava/lang/Object;
/*      */           //   367	7	5	v$iv	[Ljava/lang/Object;
/*      */           //   374	6	5	v$iv	[Ljava/lang/Object;
/*      */           //   61	10	6	this_$iv$iv	Landroidx/collection/ScatterMap;
/*      */           //   71	201	8	m$iv$iv	[J
/*      */           //   323	23	8	m$iv$iv	[J
/*      */           //   346	21	8	m$iv$iv	[J
/*      */           //   367	7	8	m$iv$iv	[J
/*      */           //   374	6	8	m$iv$iv	[J
/*      */           //   78	194	9	lastIndex$iv$iv	I
/*      */           //   314	32	9	lastIndex$iv$iv	I
/*      */           //   346	21	9	lastIndex$iv$iv	I
/*      */           //   367	7	9	lastIndex$iv$iv	I
/*      */           //   374	6	9	lastIndex$iv$iv	I
/*      */           //   81	191	10	i$iv$iv	I
/*      */           //   308	38	10	i$iv$iv	I
/*      */           //   346	21	10	i$iv$iv	I
/*      */           //   367	13	10	i$iv$iv	I
/*      */           //   95	55	11	slot$iv$iv	J
/*      */           //   150	122	11	slot$iv$iv	J
/*      */           //   302	44	11	slot$iv$iv	J
/*      */           //   346	21	11	slot$iv$iv	J
/*      */           //   99	19	13	$this$maskEmptyOrDeleted$iv$iv$iv	J
/*      */           //   187	4	15	index$iv$iv	I
/*      */           //   140	132	16	bitCount$iv$iv	I
/*      */           //   296	50	16	bitCount$iv$iv	I
/*      */           //   346	21	16	bitCount$iv$iv	I
/*      */           //   143	7	17	j$iv$iv	I
/*      */           //   150	122	17	j$iv$iv	I
/*      */           //   290	56	17	j$iv$iv	I
/*      */           //   346	14	17	j$iv$iv	I
/*      */           //   158	16	18	value$iv$iv$iv	J
/*      */           //   191	10	21	index$iv	I
/*      */           //   201	62	23	value	Ljava/lang/Object;
/*      */           //   204	68	24	$i$a$-forEachValue-ScatterMap$MapWrapper$values$1$iterator$1$1	I
/*      */           //   194	78	22	$i$a$-forEachIndexed-ScatterMap$forEachValue$1$iv	I
/*      */           //   102	16	15	$i$f$maskEmptyOrDeleted	I
/*      */           //   161	14	20	$i$f$isFull	I
/*      */           //   64	208	7	$i$f$forEachIndexed	I
/*      */           //   52	220	4	$i$f$forEachValue	I
/*      */           //   36	350	0	this	Landroidx/collection/ScatterMap$MapWrapper$values$1$iterator$1;
/*      */           //   36	350	1	$result	Ljava/lang/Object;
/*      */           //   284	62	24	$i$a$-forEachValue-ScatterMap$MapWrapper$values$1$iterator$1$1	I
/*      */           //   281	66	22	$i$a$-forEachIndexed-ScatterMap$forEachValue$1$iv	I
/*      */           //   278	103	7	$i$f$forEachIndexed	I
/*      */           //   275	107	4	$i$f$forEachValue	I
/*      */         }
/*      */         
/*      */         @NotNull
/*      */         public final Continuation<Unit> create(@Nullable Object value, @NotNull Continuation<? super ScatterMap$MapWrapper$values$1$iterator$1> $completion) {
/*      */           ScatterMap$MapWrapper$values$1$iterator$1 scatterMap$MapWrapper$values$1$iterator$1 = new ScatterMap$MapWrapper$values$1$iterator$1($completion);
/*      */           scatterMap$MapWrapper$values$1$iterator$1.L$0 = value;
/*      */           return (Continuation<Unit>)scatterMap$MapWrapper$values$1$iterator$1;
/*      */         }
/*      */         
/*      */         @Nullable
/*      */         public final Object invoke(@NotNull SequenceScope p1, @Nullable Continuation<?> p2) {
/*      */           return ((ScatterMap$MapWrapper$values$1$iterator$1)create(p1, p2)).invokeSuspend(Unit.INSTANCE);
/*      */         }
/*      */       }
/*      */       
/*      */       public boolean containsAll(@NotNull Collection elements) {
/*      */         // Byte code:
/*      */         //   0: aload_1
/*      */         //   1: ldc 'elements'
/*      */         //   3: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */         //   6: aload_1
/*      */         //   7: checkcast java/lang/Iterable
/*      */         //   10: astore_2
/*      */         //   11: aload_0
/*      */         //   12: getfield this$0 : Landroidx/collection/ScatterMap;
/*      */         //   15: astore_3
/*      */         //   16: iconst_0
/*      */         //   17: istore #4
/*      */         //   19: aload_2
/*      */         //   20: checkcast java/util/Collection
/*      */         //   23: invokeinterface isEmpty : ()Z
/*      */         //   28: ifeq -> 35
/*      */         //   31: iconst_1
/*      */         //   32: goto -> 83
/*      */         //   35: aload_2
/*      */         //   36: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */         //   41: astore #5
/*      */         //   43: aload #5
/*      */         //   45: invokeinterface hasNext : ()Z
/*      */         //   50: ifeq -> 82
/*      */         //   53: aload #5
/*      */         //   55: invokeinterface next : ()Ljava/lang/Object;
/*      */         //   60: astore #6
/*      */         //   62: aload #6
/*      */         //   64: astore #7
/*      */         //   66: iconst_0
/*      */         //   67: istore #8
/*      */         //   69: aload_3
/*      */         //   70: aload #7
/*      */         //   72: invokevirtual containsValue : (Ljava/lang/Object;)Z
/*      */         //   75: ifne -> 43
/*      */         //   78: iconst_0
/*      */         //   79: goto -> 83
/*      */         //   82: iconst_1
/*      */         //   83: ireturn
/*      */         // Line number table:
/*      */         //   Java source line number -> byte code offset
/*      */         //   #749	-> 6
/*      */         //   #1835	-> 19
/*      */         //   #1836	-> 35
/*      */         //   #749	-> 69
/*      */         //   #1836	-> 75
/*      */         //   #1837	-> 82
/*      */         //   #749	-> 83
/*      */         // Local variable table:
/*      */         //   start	length	slot	name	descriptor
/*      */         //   69	6	8	$i$a$-all-ScatterMap$MapWrapper$values$1$containsAll$1	I
/*      */         //   66	9	7	it	Ljava/lang/Object;
/*      */         //   62	20	6	element$iv	Ljava/lang/Object;
/*      */         //   19	64	4	$i$f$all	I
/*      */         //   16	67	2	$this$all$iv	Ljava/lang/Iterable;
/*      */         //   0	84	0	this	Landroidx/collection/ScatterMap$MapWrapper$values$1;
/*      */         //   0	84	1	elements	Ljava/util/Collection;
/*      */       }
/*      */       
/*      */       public boolean contains(Object element) {
/*      */         return ScatterMap.this.containsValue((V)element);
/*      */       }
/*      */       
/*      */       public boolean add(Object element) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean addAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public void clear() {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean remove(Object element) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean removeAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean removeIf(Predicate p0) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public boolean retainAll(Collection elements) {
/*      */         throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */       }
/*      */       
/*      */       public <T> T[] toArray(Object[] array) {
/*      */         Intrinsics.checkNotNullParameter(array, "array");
/*      */         return (T[])CollectionToArray.toArray(this, array);
/*      */       }
/*      */       
/*      */       public Object[] toArray() {
/*      */         return CollectionToArray.toArray(this);
/*      */       }
/*      */     }
/*      */     
/*      */     public int getSize() {
/*      */       return ScatterMap.this._size;
/*      */     }
/*      */     
/*      */     public boolean isEmpty() {
/*      */       return ScatterMap.this.isEmpty();
/*      */     }
/*      */     
/*      */     @Nullable
/*      */     public V get(Object key) {
/*      */       return ScatterMap.this.get((K)key);
/*      */     }
/*      */     
/*      */     public boolean containsValue(Object value) {
/*      */       return ScatterMap.this.containsValue((V)value);
/*      */     }
/*      */     
/*      */     public boolean containsKey(Object key) {
/*      */       return ScatterMap.this.containsKey((K)key);
/*      */     }
/*      */     
/*      */     public void clear() {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public V compute(Object p0, BiFunction p1) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public V computeIfAbsent(Object p0, Function p1) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public V computeIfPresent(Object p0, BiFunction p1) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public V merge(Object p0, Object p1, BiFunction p2) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public V put(Object key, Object value) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public void putAll(Map from) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public V putIfAbsent(Object p0, Object p1) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public V remove(Object key) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public boolean remove(Object key, Object value) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public boolean replace(Object p0, Object p1, Object p2) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public V replace(Object p0, Object p1) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */     
/*      */     public void replaceAll(BiFunction p0) {
/*      */       throw new UnsupportedOperationException("Operation is not supported for read-only collection");
/*      */     }
/*      */   }
/*      */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\collection-jvm-1.4.0.jar!\androidx\collection\ScatterMap.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */