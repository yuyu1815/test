/*      */ package androidx.compose.runtime;
/*      */ 
/*      */ import androidx.collection.IntSet;
/*      */ import androidx.collection.MutableIntObjectMap;
/*      */ import androidx.collection.MutableIntSet;
/*      */ import androidx.compose.runtime.internal.StabilityInferred;
/*      */ import androidx.compose.runtime.tooling.CompositionData;
/*      */ import androidx.compose.runtime.tooling.CompositionGroup;
/*      */ import java.util.ArrayList;
/*      */ import java.util.HashMap;
/*      */ import java.util.Iterator;
/*      */ import java.util.List;
/*      */ import kotlin.Metadata;
/*      */ import kotlin.Unit;
/*      */ import kotlin.collections.ArraysKt;
/*      */ import kotlin.jvm.functions.Function1;
/*      */ import kotlin.jvm.internal.InlineMarker;
/*      */ import kotlin.jvm.internal.Intrinsics;
/*      */ import kotlin.jvm.internal.Ref;
/*      */ import kotlin.jvm.internal.SourceDebugExtension;
/*      */ import kotlin.jvm.internal.markers.KMappedMarker;
/*      */ import kotlin.text.StringsKt;
/*      */ import org.jetbrains.annotations.NotNull;
/*      */ import org.jetbrains.annotations.Nullable;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000¶\001\n\002\030\002\n\002\030\002\n\002\020\034\n\002\030\002\n\002\b\002\n\002\030\002\n\002\030\002\n\002\030\002\n\002\b\005\n\002\030\002\n\002\030\002\n\002\b\b\n\002\020\025\n\002\b\003\n\002\020\b\n\002\b\004\n\002\020\013\n\002\b\002\n\002\030\002\n\000\n\002\020\021\n\002\020\000\n\002\b\007\n\002\030\002\n\002\030\002\n\002\030\002\n\002\b\016\n\002\020\002\n\000\n\002\030\002\n\000\n\002\030\002\n\002\b\005\n\002\020 \n\002\b\003\n\002\030\002\n\002\b\b\n\002\020(\n\002\b\t\n\002\030\002\n\002\030\002\n\002\b\f\n\002\020\016\n\002\b\004\n\002\030\002\n\002\030\002\n\002\b\002\b\000\030\0002\0020\0012\b\022\004\022\0020\0030\002B\005¢\006\002\020\004J\016\020<\032\0020\0072\006\020=\032\0020\034J\016\020>\032\0020\0342\006\020<\032\0020\007J=\020?\032\0020@2\006\020A\032\0020B2&\020.\032\"\022\004\022\0020\007\022\004\022\00200\030\0010/j\020\022\004\022\0020\007\022\004\022\00200\030\001`1H\000¢\006\002\bCJ\001\020?\032\0020@2\006\020:\032\0020D2\006\020\031\032\0020\0302\006\020\035\032\0020\0342\016\020(\032\n\022\006\022\004\030\0010'0&2\006\020,\032\0020\0342\026\020\005\032\022\022\004\022\0020\0070\006j\b\022\004\022\0020\007`\b2&\020.\032\"\022\004\022\0020\007\022\004\022\00200\030\0010/j\020\022\004\022\0020\007\022\004\022\00200\030\001`12\016\020\r\032\n\022\004\022\0020\017\030\0010\016H\000¢\006\004\bC\020EJ\006\020F\032\0020@J\006\020G\032\0020@J\006\020H\032\0020!J\016\020I\032\b\022\004\022\0020\0340JH\002J\022\020K\032\004\030\0010\0032\006\020L\032\0020'H\026J\022\020M\032\004\030\0010N2\006\020O\032\0020\034H\002J\026\020P\032\0020!2\006\020Q\032\0020\0342\006\020<\032\0020\007J\016\020R\032\b\022\004\022\0020\0340JH\002J\035\020S\032\n\022\004\022\0020N\030\0010J2\006\020T\032\0020\034H\000¢\006\002\bUJ\017\020V\032\b\022\004\022\0020\0030WH\002J\016\020X\032\b\022\004\022\0020\0340JH\002J\016\020Y\032\b\022\004\022\0020\0340JH\002J\006\020Z\032\0020BJ\006\020[\032\0020DJ\016\020\\\032\0020!2\006\020<\032\0020\007J\016\020]\032\b\022\004\022\0020\0340JH\002J:\020^\032\002H_\"\004\b\000\020_2!\020`\032\035\022\023\022\0210B¢\006\f\bb\022\b\bc\022\004\b\b(A\022\004\022\002H_0aH\bø\001\000¢\006\002\020dJ\001\020e\032\0020@2\006\020\031\032\0020\0302\006\020\035\032\0020\0342\016\020(\032\n\022\006\022\004\030\0010'0&2\006\020,\032\0020\0342\026\020\005\032\022\022\004\022\0020\0070\006j\b\022\004\022\0020\007`\b2&\020.\032\"\022\004\022\0020\007\022\004\022\00200\030\0010/j\020\022\004\022\0020\007\022\004\022\00200\030\001`12\016\020\r\032\n\022\004\022\0020\017\030\0010\016H\000¢\006\004\bf\020gJ\037\020h\032\004\030\0010'2\006\020O\032\0020\0342\006\020i\032\0020\034H\000¢\006\002\bjJ\035\020k\032\n\022\006\022\004\030\0010'0J2\006\020O\032\0020\034H\000¢\006\002\blJ\020\020m\032\004\030\001002\006\020O\032\0020\034J\006\020n\032\0020oJ\022\020p\032\004\030\0010\0072\006\020=\032\0020\034H\002J\006\020q\032\0020@J:\020r\032\002H_\"\004\b\000\020_2!\020`\032\035\022\023\022\0210D¢\006\f\bb\022\b\bc\022\004\b\b(:\022\004\022\002H_0aH\bø\001\000¢\006\002\020dJ \020s\032\0020\034*\0060tj\002`u2\006\020=\032\0020\0342\006\020v\032\0020\034H\002R*\020\005\032\022\022\004\022\0020\0070\006j\b\022\004\022\0020\007`\bX\016¢\006\016\n\000\032\004\b\t\020\n\"\004\b\013\020\fR\"\020\r\032\n\022\004\022\0020\017\030\0010\016X\016¢\006\016\n\000\032\004\b\020\020\021\"\004\b\022\020\023R\032\020\024\032\b\022\004\022\0020\0030\0028VX\004¢\006\006\032\004\b\025\020\026R\036\020\031\032\0020\0302\006\020\027\032\0020\030@BX\016¢\006\b\n\000\032\004\b\032\020\033R\036\020\035\032\0020\0342\006\020\027\032\0020\034@BX\016¢\006\b\n\000\032\004\b\036\020\037R\024\020 \032\0020!8VX\004¢\006\006\032\004\b \020\"R\016\020#\032\0020$X\004¢\006\002\n\000R\016\020%\032\0020\034X\016¢\006\002\n\000R0\020(\032\n\022\006\022\004\030\0010'0&2\016\020\027\032\n\022\006\022\004\030\0010'0&@BX\016¢\006\n\n\002\020+\032\004\b)\020*R\036\020,\032\0020\0342\006\020\027\032\0020\034@BX\016¢\006\b\n\000\032\004\b-\020\037R:\020.\032\"\022\004\022\0020\007\022\004\022\00200\030\0010/j\020\022\004\022\0020\007\022\004\022\00200\030\001`1X\016¢\006\016\n\000\032\004\b2\0203\"\004\b4\0205R\032\0206\032\0020\034X\016¢\006\016\n\000\032\004\b7\020\037\"\004\b8\0209R\036\020:\032\0020!2\006\020\027\032\0020!@BX\016¢\006\b\n\000\032\004\b;\020\"\002\007\n\005\b20\001¨\006w"}, d2 = {"Landroidx/compose/runtime/SlotTable;", "Landroidx/compose/runtime/tooling/CompositionData;", "", "Landroidx/compose/runtime/tooling/CompositionGroup;", "()V", "anchors", "Ljava/util/ArrayList;", "Landroidx/compose/runtime/Anchor;", "Lkotlin/collections/ArrayList;", "getAnchors$runtime", "()Ljava/util/ArrayList;", "setAnchors$runtime", "(Ljava/util/ArrayList;)V", "calledByMap", "Landroidx/collection/MutableIntObjectMap;", "Landroidx/collection/MutableIntSet;", "getCalledByMap$runtime", "()Landroidx/collection/MutableIntObjectMap;", "setCalledByMap$runtime", "(Landroidx/collection/MutableIntObjectMap;)V", "compositionGroups", "getCompositionGroups", "()Ljava/lang/Iterable;", "<set-?>", "", "groups", "getGroups", "()[I", "", "groupsSize", "getGroupsSize", "()I", "isEmpty", "", "()Z", "lock", "Landroidx/compose/runtime/SynchronizedObject;", "readers", "", "", "slots", "getSlots", "()[Ljava/lang/Object;", "[Ljava/lang/Object;", "slotsSize", "getSlotsSize", "sourceInformationMap", "Ljava/util/HashMap;", "Landroidx/compose/runtime/GroupSourceInformation;", "Lkotlin/collections/HashMap;", "getSourceInformationMap$runtime", "()Ljava/util/HashMap;", "setSourceInformationMap$runtime", "(Ljava/util/HashMap;)V", "version", "getVersion$runtime", "setVersion$runtime", "(I)V", "writer", "getWriter$runtime", "anchor", "index", "anchorIndex", "close", "", "reader", "Landroidx/compose/runtime/SlotReader;", "close$runtime", "Landroidx/compose/runtime/SlotWriter;", "(Landroidx/compose/runtime/SlotWriter;[II[Ljava/lang/Object;ILjava/util/ArrayList;Ljava/util/HashMap;Landroidx/collection/MutableIntObjectMap;)V", "collectCalledByInformation", "collectSourceInformation", "containsMark", "dataIndexes", "", "find", "identityToFind", "findEffectiveRecomposeScope", "Landroidx/compose/runtime/RecomposeScopeImpl;", "group", "groupContainsAnchor", "groupIndex", "groupSizes", "invalidateGroupsWithKey", "target", "invalidateGroupsWithKey$runtime", "iterator", "", "keys", "nodes", "openReader", "openWriter", "ownsAnchor", "parentIndexes", "read", "T", "block", "Lkotlin/Function1;", "Lkotlin/ParameterName;", "name", "(Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "setTo", "setTo$runtime", "([II[Ljava/lang/Object;ILjava/util/ArrayList;Ljava/util/HashMap;Landroidx/collection/MutableIntObjectMap;)V", "slot", "slotIndex", "slot$runtime", "slotsOf", "slotsOf$runtime", "sourceInformationOf", "toDebugString", "", "tryAnchor", "verifyWellFormed", "write", "emitGroup", "Ljava/lang/StringBuilder;", "Lkotlin/text/StringBuilder;", "level", "runtime"})
/*      */ @StabilityInferred(parameters = 0)
/*      */ @SourceDebugExtension({"SMAP\nSlotTable.kt\nKotlin\n*S Kotlin\n*F\n+ 1 SlotTable.kt\nandroidx/compose/runtime/SlotTable\n+ 2 fake.kt\nkotlin/jvm/internal/FakeKt\n+ 3 Composer.kt\nandroidx/compose/runtime/ComposerKt\n+ 4 Preconditions.kt\nandroidx/compose/runtime/PreconditionsKt\n+ 5 SlotTable.kt\nandroidx/compose/runtime/SlotTableKt\n+ 6 SynchronizedObject.jvm.kt\nandroidx/compose/runtime/ActualJvm_jvmKt__SynchronizedObject_jvmKt\n+ 7 ListUtils.kt\nandroidx/compose/runtime/snapshots/ListUtilsKt\n*L\n1#1,4179:1\n161#1,8:4265\n177#1,5:4273\n183#1,3:4285\n1#2:4180\n1#2:4284\n4553#3,7:4181\n4553#3,7:4188\n4553#3,7:4195\n4553#3,7:4215\n4553#3,7:4222\n4553#3,7:4236\n4553#3,7:4243\n4553#3,7:4250\n33#4,7:4202\n33#4,7:4229\n33#4,7:4258\n50#4,7:4288\n50#4,7:4295\n33#4,7:4306\n33#4,7:4313\n33#4,7:4321\n33#4,7:4328\n50#4,7:4335\n50#4,7:4342\n50#4,7:4349\n50#4,7:4356\n50#4,7:4363\n50#4,7:4370\n50#4,7:4377\n50#4,7:4384\n50#4,7:4391\n50#4,7:4398\n50#4,7:4405\n33#4,7:4416\n33#4,7:4423\n4046#5,6:4209\n26#6:4257\n33#7,6:4278\n33#7,4:4302\n38#7:4320\n33#7,4:4412\n38#7:4430\n*S KotlinDebug\n*F\n+ 1 SlotTable.kt\nandroidx/compose/runtime/SlotTable\n*L\n360#1:4265,8\n397#1:4273,5\n397#1:4285,3\n397#1:4284\n206#1:4181,7\n207#1:4188,7\n223#1:4195,7\n236#1:4215,7\n247#1:4222,7\n267#1:4236,7\n268#1:4243,7\n280#1:4250,7\n224#1:4202,7\n248#1:4229,7\n309#1:4258,7\n516#1:4288,7\n523#1:4295,7\n532#1:4306,7\n535#1:4313,7\n558#1:4321,7\n561#1:4328,7\n454#1:4335,7\n459#1:4342,7\n462#1:4349,7\n468#1:4356,7\n471#1:4363,7\n475#1:4370,7\n481#1:4377,7\n485#1:4384,7\n494#1:4391,7\n499#1:4398,7\n504#1:4405,7\n544#1:4416,7\n547#1:4423,7\n227#1:4209,6\n283#1:4257\n399#1:4278,6\n530#1:4302,4\n530#1:4320\n541#1:4412,4\n541#1:4430\n*E\n"})
/*      */ public final class SlotTable
/*      */   implements CompositionData, Iterable<CompositionGroup>, KMappedMarker
/*      */ {
/*      */   @NotNull
/*   90 */   private int[] groups = new int[0]; private int groupsSize; @NotNull private Object[] slots; private int slotsSize; private int readers; @NotNull private final SynchronizedObject lock; private boolean writer; private int version; @NotNull private ArrayList<Anchor> anchors; @Nullable private HashMap<Anchor, GroupSourceInformation> sourceInformationMap; @Nullable private MutableIntObjectMap<MutableIntSet> calledByMap; public static final int $stable = 8; @NotNull public final int[] getGroups() { return this.groups; }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final int getGroupsSize() {
/*   96 */     return this.groupsSize;
/*      */   }
/*      */   @NotNull
/*      */   public final Object[] getSlots() { return this.slots; } public final int getSlotsSize() {
/*      */     return this.slotsSize;
/*      */   } public final boolean getWriter$runtime() {
/*      */     return this.writer;
/*      */   } public SlotTable() { Object[] arrayOfObject;
/*      */     SlotTable slotTable;
/*  105 */     for (byte b = 0; b; ) { byte b1 = b; arrayOfObject[b1] = null; b++; }  slotTable.slots = arrayOfObject;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  120 */     this.lock = new SynchronizedObject();
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  137 */     this.anchors = new ArrayList<>(); } public final int getVersion$runtime() { return this.version; } public final void setVersion$runtime(int <set-?>) { this.version = <set-?>; } @NotNull public final ArrayList<Anchor> getAnchors$runtime() { return this.anchors; } public final void setAnchors$runtime(@NotNull ArrayList<Anchor> <set-?>) { Intrinsics.checkNotNullParameter(<set-?>, "<set-?>"); this.anchors = <set-?>; }
/*      */ 
/*      */   
/*      */   @Nullable
/*      */   public final HashMap<Anchor, GroupSourceInformation> getSourceInformationMap$runtime() {
/*  142 */     return this.sourceInformationMap; } public final void setSourceInformationMap$runtime(@Nullable HashMap<Anchor, GroupSourceInformation> <set-?>) { this.sourceInformationMap = <set-?>; }
/*      */ 
/*      */   
/*      */   @Nullable
/*      */   public final MutableIntObjectMap<MutableIntSet> getCalledByMap$runtime()
/*      */   {
/*  148 */     return this.calledByMap; } public final void setCalledByMap$runtime(@Nullable MutableIntObjectMap<MutableIntSet> <set-?>) { this.calledByMap = <set-?>; }
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean isEmpty() {
/*  153 */     return (this.groupsSize == 0);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final <T> T read(@NotNull Function1 block) {
/*      */     Object object;
/*  161 */     Intrinsics.checkNotNullParameter(block, "block"); int $i$f$read = 0;
/*  162 */     SlotReader reader = openReader(); int $i$a$-let-SlotTable$read$1 = 0;
/*      */     
/*  164 */     try { object = block.invoke(reader); }
/*      */     finally
/*  166 */     { InlineMarker.finallyStart(1); reader.close(); InlineMarker.finallyEnd(1); }  return (T)object;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public final <T> T write(@NotNull Function1 block)
/*      */   {
/*      */     Object object;
/*  177 */     Intrinsics.checkNotNullParameter(block, "block"); int $i$f$write = 0;
/*  178 */     SlotWriter writer = openWriter(); int $i$a$-let-SlotTable$write$1 = 0;
/*  179 */     boolean normalClose = false;
/*      */     
/*  181 */     try { Object it = object = block.invoke(writer);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/* 4180 */       int $i$a$-also-SlotTable$write$1$1 = 0; normalClose = true; object = object; } finally { InlineMarker.finallyStart(1); writer.close(normalClose); InlineMarker.finallyEnd(1); }  return (T)object; } @Nullable public final List<RecomposeScopeImpl> invalidateGroupsWithKey$runtime(int target) { List<Anchor> anchors = new ArrayList(); List<RecomposeScopeImpl> scopes = new ArrayList(); Ref.BooleanRef allScopesFound = new Ref.BooleanRef(); allScopesFound.element = true; MutableIntSet mutableIntSet1 = new MutableIntSet(0, 1, null), it = mutableIntSet1; int $i$a$-also-SlotTable$invalidateGroupsWithKey$set$1 = 0; it.add(target); it.add(-3); MutableIntSet set = mutableIntSet1; if (this.calledByMap != null && (MutableIntSet)this.calledByMap.get(target) != null) { MutableIntSet mutableIntSet = (MutableIntSet)this.calledByMap.get(target); int $i$a$-let-SlotTable$invalidateGroupsWithKey$1 = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       set.addAll((IntSet)mutableIntSet); }
/*      */     else
/*      */     { (MutableIntSet)this.calledByMap.get(target); }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     SlotTable this_$iv = this;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*      */     int $i$f$read = 0;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 4266 */     SlotReader reader$iv = this_$iv.openReader(); int $i$a$-let-SlotTable$read$1$iv = 0;
/*      */     
/* 4268 */     try { SlotReader reader = reader$iv; int $i$a$-read-SlotTable$invalidateGroupsWithKey$2 = 0; invalidateGroupsWithKey$lambda$20$scanGroup(reader, set, anchors, allScopesFound, this, scopes); Unit unit = Unit.INSTANCE;
/*      */       
/* 4270 */       reader$iv.close(); } finally { reader$iv.close(); }
/*      */ 
/*      */     
/*      */     int $i$f$write = 0;
/* 4274 */     SlotWriter writer$iv = this_$iv.openWriter(); int $i$a$-let-SlotTable$write$1$iv = 0;
/* 4275 */     boolean normalClose$iv = false;
/*      */     
/* 4277 */     try { SlotWriter writer = writer$iv; int $i$a$-write-SlotTable$invalidateGroupsWithKey$3 = 0; writer.startGroup(); List<Anchor> $this$fastForEach$iv = anchors;
/*      */       int $i$f$fastForEach = 0;
/* 4279 */       int index$iv = 0, i = $this$fastForEach$iv.size(); if (index$iv < i) {
/* 4280 */         Object item$iv = $this$fastForEach$iv.get(index$iv);
/* 4281 */         Anchor anchor = (Anchor)item$iv; int $i$a$-fastForEach-SlotTable$invalidateGroupsWithKey$3$1 = 0; if (anchor.toIndexFor(writer) >= writer.getCurrentGroup()) {
/*      */           writer.seek(anchor); writer.bashCurrentGroup();
/*      */         } 
/* 4284 */       }  writer.skipToGroupEnd(); int j = writer.endGroup(), it$iv = j; int $i$a$-also-SlotTable$write$1$1$iv = 0; normalClose$iv = true; j = j;
/* 4285 */       writer$iv.close(normalClose$iv); } finally { writer$iv.close(normalClose$iv); }
/*      */      }
/*      */ 
/*      */   
/*      */   @NotNull
/*      */   public final SlotReader openReader() {
/*      */     if (this.writer)
/*      */       throw new IllegalStateException("Cannot read while a writer is pending".toString()); 
/*      */     int i = this.readers;
/*      */     this.readers = i + 1;
/*      */     return new SlotReader(this);
/*      */   }
/*      */   
/*      */   @NotNull
/*      */   public final SlotWriter openWriter() {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: getfield writer : Z
/*      */     //   4: ifne -> 11
/*      */     //   7: iconst_1
/*      */     //   8: goto -> 12
/*      */     //   11: iconst_0
/*      */     //   12: istore_1
/*      */     //   13: iconst_0
/*      */     //   14: istore_2
/*      */     //   15: nop
/*      */     //   16: iload_1
/*      */     //   17: ifne -> 27
/*      */     //   20: iconst_0
/*      */     //   21: istore_3
/*      */     //   22: ldc 'Cannot start a writer when another writer is pending'
/*      */     //   24: invokestatic composeImmediateRuntimeError : (Ljava/lang/String;)V
/*      */     //   27: nop
/*      */     //   28: aload_0
/*      */     //   29: getfield readers : I
/*      */     //   32: ifgt -> 39
/*      */     //   35: iconst_1
/*      */     //   36: goto -> 40
/*      */     //   39: iconst_0
/*      */     //   40: istore_1
/*      */     //   41: iconst_0
/*      */     //   42: istore_2
/*      */     //   43: nop
/*      */     //   44: iload_1
/*      */     //   45: ifne -> 55
/*      */     //   48: iconst_0
/*      */     //   49: istore_3
/*      */     //   50: ldc 'Cannot start a writer when a reader is pending'
/*      */     //   52: invokestatic composeImmediateRuntimeError : (Ljava/lang/String;)V
/*      */     //   55: nop
/*      */     //   56: aload_0
/*      */     //   57: iconst_1
/*      */     //   58: putfield writer : Z
/*      */     //   61: aload_0
/*      */     //   62: getfield version : I
/*      */     //   65: istore_1
/*      */     //   66: aload_0
/*      */     //   67: iload_1
/*      */     //   68: iconst_1
/*      */     //   69: iadd
/*      */     //   70: putfield version : I
/*      */     //   73: new androidx/compose/runtime/SlotWriter
/*      */     //   76: dup
/*      */     //   77: aload_0
/*      */     //   78: invokespecial <init> : (Landroidx/compose/runtime/SlotTable;)V
/*      */     //   81: areturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #206	-> 0
/*      */     //   #4181	-> 15
/*      */     //   #4184	-> 16
/*      */     //   #4185	-> 20
/*      */     //   #206	-> 22
/*      */     //   #4185	-> 24
/*      */     //   #4187	-> 27
/*      */     //   #207	-> 28
/*      */     //   #4188	-> 43
/*      */     //   #4191	-> 44
/*      */     //   #4192	-> 48
/*      */     //   #207	-> 50
/*      */     //   #4192	-> 52
/*      */     //   #4194	-> 55
/*      */     //   #208	-> 56
/*      */     //   #209	-> 61
/*      */     //   #210	-> 73
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   22	2	3	$i$a$-runtimeCheck-SlotTable$openWriter$1	I
/*      */     //   15	13	2	$i$f$runtimeCheck	I
/*      */     //   13	15	1	value$iv	Z
/*      */     //   50	2	3	$i$a$-runtimeCheck-SlotTable$openWriter$2	I
/*      */     //   43	13	2	$i$f$runtimeCheck	I
/*      */     //   41	15	1	value$iv	Z
/*      */     //   0	82	0	this	Landroidx/compose/runtime/SlotTable;
/*      */   }
/*      */   
/*      */   @NotNull
/*      */   public final Anchor anchor(int index) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: getfield writer : Z
/*      */     //   4: ifne -> 11
/*      */     //   7: iconst_1
/*      */     //   8: goto -> 12
/*      */     //   11: iconst_0
/*      */     //   12: istore_2
/*      */     //   13: iconst_0
/*      */     //   14: istore_3
/*      */     //   15: nop
/*      */     //   16: iload_2
/*      */     //   17: ifne -> 28
/*      */     //   20: iconst_0
/*      */     //   21: istore #4
/*      */     //   23: ldc 'use active SlotWriter to create an anchor location instead'
/*      */     //   25: invokestatic composeImmediateRuntimeError : (Ljava/lang/String;)V
/*      */     //   28: nop
/*      */     //   29: iconst_0
/*      */     //   30: iload_1
/*      */     //   31: if_icmpgt -> 50
/*      */     //   34: iload_1
/*      */     //   35: aload_0
/*      */     //   36: getfield groupsSize : I
/*      */     //   39: if_icmpge -> 46
/*      */     //   42: iconst_1
/*      */     //   43: goto -> 51
/*      */     //   46: iconst_0
/*      */     //   47: goto -> 51
/*      */     //   50: iconst_0
/*      */     //   51: istore_2
/*      */     //   52: iconst_0
/*      */     //   53: istore_3
/*      */     //   54: nop
/*      */     //   55: iload_2
/*      */     //   56: ifne -> 67
/*      */     //   59: iconst_0
/*      */     //   60: istore #4
/*      */     //   62: ldc 'Parameter index is out of range'
/*      */     //   64: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   67: nop
/*      */     //   68: aload_0
/*      */     //   69: getfield anchors : Ljava/util/ArrayList;
/*      */     //   72: astore_2
/*      */     //   73: aload_0
/*      */     //   74: getfield groupsSize : I
/*      */     //   77: istore_3
/*      */     //   78: iconst_0
/*      */     //   79: istore #4
/*      */     //   81: aload_2
/*      */     //   82: iload_1
/*      */     //   83: iload_3
/*      */     //   84: invokestatic access$search : (Ljava/util/ArrayList;II)I
/*      */     //   87: istore #5
/*      */     //   89: iload #5
/*      */     //   91: ifge -> 123
/*      */     //   94: iconst_0
/*      */     //   95: istore #6
/*      */     //   97: new androidx/compose/runtime/Anchor
/*      */     //   100: dup
/*      */     //   101: iload_1
/*      */     //   102: invokespecial <init> : (I)V
/*      */     //   105: astore #6
/*      */     //   107: aload_2
/*      */     //   108: iload #5
/*      */     //   110: iconst_1
/*      */     //   111: iadd
/*      */     //   112: ineg
/*      */     //   113: aload #6
/*      */     //   115: invokevirtual add : (ILjava/lang/Object;)V
/*      */     //   118: aload #6
/*      */     //   120: goto -> 138
/*      */     //   123: aload_2
/*      */     //   124: iload #5
/*      */     //   126: invokevirtual get : (I)Ljava/lang/Object;
/*      */     //   129: dup
/*      */     //   130: ldc 'get(...)'
/*      */     //   132: invokestatic checkNotNullExpressionValue : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   135: checkcast androidx/compose/runtime/Anchor
/*      */     //   138: nop
/*      */     //   139: areturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #223	-> 0
/*      */     //   #4195	-> 15
/*      */     //   #4198	-> 16
/*      */     //   #4199	-> 20
/*      */     //   #223	-> 23
/*      */     //   #4199	-> 25
/*      */     //   #4201	-> 28
/*      */     //   #224	-> 29
/*      */     //   #4202	-> 54
/*      */     //   #4205	-> 55
/*      */     //   #4206	-> 59
/*      */     //   #225	-> 62
/*      */     //   #4206	-> 64
/*      */     //   #4208	-> 67
/*      */     //   #227	-> 68
/*      */     //   #4209	-> 81
/*      */     //   #4210	-> 89
/*      */     //   #4211	-> 94
/*      */     //   #228	-> 97
/*      */     //   #4211	-> 105
/*      */     //   #4212	-> 107
/*      */     //   #4213	-> 118
/*      */     //   #4214	-> 123
/*      */     //   #4210	-> 138
/*      */     //   #227	-> 139
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   23	2	4	$i$a$-runtimeCheck-SlotTable$anchor$1	I
/*      */     //   15	14	3	$i$f$runtimeCheck	I
/*      */     //   13	16	2	value$iv	Z
/*      */     //   62	2	4	$i$a$-requirePrecondition-SlotTable$anchor$2	I
/*      */     //   54	14	3	$i$f$requirePrecondition	I
/*      */     //   52	16	2	value$iv	Z
/*      */     //   97	8	6	$i$a$-getOrAdd-SlotTable$anchor$3	I
/*      */     //   107	13	6	anchor$iv	Landroidx/compose/runtime/Anchor;
/*      */     //   81	58	4	$i$f$getOrAdd	I
/*      */     //   89	50	5	location$iv	I
/*      */     //   78	61	2	$this$getOrAdd$iv	Ljava/util/ArrayList;
/*      */     //   78	61	3	effectiveSize$iv	I
/*      */     //   0	140	0	this	Landroidx/compose/runtime/SlotTable;
/*      */     //   0	140	1	index	I
/*      */   }
/*      */   
/*      */   private final Anchor tryAnchor(int index) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: getfield writer : Z
/*      */     //   4: ifne -> 11
/*      */     //   7: iconst_1
/*      */     //   8: goto -> 12
/*      */     //   11: iconst_0
/*      */     //   12: istore_2
/*      */     //   13: iconst_0
/*      */     //   14: istore_3
/*      */     //   15: nop
/*      */     //   16: iload_2
/*      */     //   17: ifne -> 28
/*      */     //   20: iconst_0
/*      */     //   21: istore #4
/*      */     //   23: ldc 'use active SlotWriter to crate an anchor for location instead'
/*      */     //   25: invokestatic composeImmediateRuntimeError : (Ljava/lang/String;)V
/*      */     //   28: nop
/*      */     //   29: iconst_0
/*      */     //   30: iload_1
/*      */     //   31: if_icmpgt -> 50
/*      */     //   34: iload_1
/*      */     //   35: aload_0
/*      */     //   36: getfield groupsSize : I
/*      */     //   39: if_icmpge -> 46
/*      */     //   42: iconst_1
/*      */     //   43: goto -> 51
/*      */     //   46: iconst_0
/*      */     //   47: goto -> 51
/*      */     //   50: iconst_0
/*      */     //   51: ifeq -> 69
/*      */     //   54: aload_0
/*      */     //   55: getfield anchors : Ljava/util/ArrayList;
/*      */     //   58: iload_1
/*      */     //   59: aload_0
/*      */     //   60: getfield groupsSize : I
/*      */     //   63: invokestatic access$find : (Ljava/util/ArrayList;II)Landroidx/compose/runtime/Anchor;
/*      */     //   66: goto -> 70
/*      */     //   69: aconst_null
/*      */     //   70: areturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #236	-> 0
/*      */     //   #4215	-> 15
/*      */     //   #4218	-> 16
/*      */     //   #4219	-> 20
/*      */     //   #236	-> 23
/*      */     //   #4219	-> 25
/*      */     //   #4221	-> 28
/*      */     //   #237	-> 29
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   23	2	4	$i$a$-runtimeCheck-SlotTable$tryAnchor$1	I
/*      */     //   15	14	3	$i$f$runtimeCheck	I
/*      */     //   13	16	2	value$iv	Z
/*      */     //   0	71	0	this	Landroidx/compose/runtime/SlotTable;
/*      */     //   0	71	1	index	I
/*      */   }
/*      */   
/*      */   public final int anchorIndex(@NotNull Anchor anchor) {
/*      */     // Byte code:
/*      */     //   0: aload_1
/*      */     //   1: ldc 'anchor'
/*      */     //   3: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   6: aload_0
/*      */     //   7: getfield writer : Z
/*      */     //   10: ifne -> 17
/*      */     //   13: iconst_1
/*      */     //   14: goto -> 18
/*      */     //   17: iconst_0
/*      */     //   18: istore_2
/*      */     //   19: iconst_0
/*      */     //   20: istore_3
/*      */     //   21: nop
/*      */     //   22: iload_2
/*      */     //   23: ifne -> 34
/*      */     //   26: iconst_0
/*      */     //   27: istore #4
/*      */     //   29: ldc 'Use active SlotWriter to determine anchor location instead'
/*      */     //   31: invokestatic composeImmediateRuntimeError : (Ljava/lang/String;)V
/*      */     //   34: nop
/*      */     //   35: aload_1
/*      */     //   36: invokevirtual getValid : ()Z
/*      */     //   39: istore_2
/*      */     //   40: iconst_0
/*      */     //   41: istore_3
/*      */     //   42: nop
/*      */     //   43: iload_2
/*      */     //   44: ifne -> 55
/*      */     //   47: iconst_0
/*      */     //   48: istore #4
/*      */     //   50: ldc 'Anchor refers to a group that was removed'
/*      */     //   52: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   55: nop
/*      */     //   56: aload_1
/*      */     //   57: invokevirtual getLocation$runtime : ()I
/*      */     //   60: ireturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #247	-> 6
/*      */     //   #4222	-> 21
/*      */     //   #4225	-> 22
/*      */     //   #4226	-> 26
/*      */     //   #247	-> 29
/*      */     //   #4226	-> 31
/*      */     //   #4228	-> 34
/*      */     //   #248	-> 35
/*      */     //   #4229	-> 42
/*      */     //   #4232	-> 43
/*      */     //   #4233	-> 47
/*      */     //   #248	-> 50
/*      */     //   #4233	-> 52
/*      */     //   #4235	-> 55
/*      */     //   #249	-> 56
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   29	2	4	$i$a$-runtimeCheck-SlotTable$anchorIndex$1	I
/*      */     //   21	14	3	$i$f$runtimeCheck	I
/*      */     //   19	16	2	value$iv	Z
/*      */     //   50	2	4	$i$a$-requirePrecondition-SlotTable$anchorIndex$2	I
/*      */     //   42	14	3	$i$f$requirePrecondition	I
/*      */     //   40	16	2	value$iv	Z
/*      */     //   0	61	0	this	Landroidx/compose/runtime/SlotTable;
/*      */     //   0	61	1	anchor	Landroidx/compose/runtime/Anchor;
/*      */   }
/*      */   
/*      */   public final boolean ownsAnchor(@NotNull Anchor anchor) {
/*      */     Intrinsics.checkNotNullParameter(anchor, "anchor");
/*      */     if (anchor.getValid()) {
/*      */       int it = SlotTableKt.access$search(this.anchors, anchor.getLocation$runtime(), this.groupsSize), $i$a$-let-SlotTable$ownsAnchor$1 = 0;
/*      */       if ((it >= 0 && Intrinsics.areEqual(this.anchors.get(it), anchor)));
/*      */     } 
/*      */     return false;
/*      */   }
/*      */   
/*      */   public final boolean groupContainsAnchor(int groupIndex, @NotNull Anchor anchor) {
/*      */     // Byte code:
/*      */     //   0: aload_2
/*      */     //   1: ldc 'anchor'
/*      */     //   3: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   6: aload_0
/*      */     //   7: getfield writer : Z
/*      */     //   10: ifne -> 17
/*      */     //   13: iconst_1
/*      */     //   14: goto -> 18
/*      */     //   17: iconst_0
/*      */     //   18: istore_3
/*      */     //   19: iconst_0
/*      */     //   20: istore #4
/*      */     //   22: nop
/*      */     //   23: iload_3
/*      */     //   24: ifne -> 36
/*      */     //   27: iconst_0
/*      */     //   28: istore #5
/*      */     //   30: ldc_w 'Writer is active'
/*      */     //   33: invokestatic composeImmediateRuntimeError : (Ljava/lang/String;)V
/*      */     //   36: nop
/*      */     //   37: iconst_0
/*      */     //   38: iload_1
/*      */     //   39: if_icmpgt -> 58
/*      */     //   42: iload_1
/*      */     //   43: aload_0
/*      */     //   44: getfield groupsSize : I
/*      */     //   47: if_icmpge -> 54
/*      */     //   50: iconst_1
/*      */     //   51: goto -> 59
/*      */     //   54: iconst_0
/*      */     //   55: goto -> 59
/*      */     //   58: iconst_0
/*      */     //   59: istore_3
/*      */     //   60: iconst_0
/*      */     //   61: istore #4
/*      */     //   63: nop
/*      */     //   64: iload_3
/*      */     //   65: ifne -> 77
/*      */     //   68: iconst_0
/*      */     //   69: istore #5
/*      */     //   71: ldc_w 'Invalid group index'
/*      */     //   74: invokestatic composeImmediateRuntimeError : (Ljava/lang/String;)V
/*      */     //   77: nop
/*      */     //   78: aload_0
/*      */     //   79: aload_2
/*      */     //   80: invokevirtual ownsAnchor : (Landroidx/compose/runtime/Anchor;)Z
/*      */     //   83: ifeq -> 131
/*      */     //   86: iload_1
/*      */     //   87: aload_0
/*      */     //   88: getfield groups : [I
/*      */     //   91: iload_1
/*      */     //   92: invokestatic access$groupSize : ([II)I
/*      */     //   95: iadd
/*      */     //   96: istore_3
/*      */     //   97: aload_2
/*      */     //   98: invokevirtual getLocation$runtime : ()I
/*      */     //   101: istore #4
/*      */     //   103: iload_1
/*      */     //   104: iload #4
/*      */     //   106: if_icmpgt -> 123
/*      */     //   109: iload #4
/*      */     //   111: iload_3
/*      */     //   112: if_icmpge -> 119
/*      */     //   115: iconst_1
/*      */     //   116: goto -> 124
/*      */     //   119: iconst_0
/*      */     //   120: goto -> 124
/*      */     //   123: iconst_0
/*      */     //   124: ifeq -> 131
/*      */     //   127: iconst_1
/*      */     //   128: goto -> 132
/*      */     //   131: iconst_0
/*      */     //   132: ireturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #267	-> 6
/*      */     //   #4236	-> 22
/*      */     //   #4239	-> 23
/*      */     //   #4240	-> 27
/*      */     //   #267	-> 30
/*      */     //   #4240	-> 33
/*      */     //   #4242	-> 36
/*      */     //   #268	-> 37
/*      */     //   #4243	-> 63
/*      */     //   #4246	-> 64
/*      */     //   #4247	-> 68
/*      */     //   #268	-> 71
/*      */     //   #4247	-> 74
/*      */     //   #4249	-> 77
/*      */     //   #269	-> 78
/*      */     //   #270	-> 86
/*      */     //   #269	-> 132
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   30	3	5	$i$a$-runtimeCheck-SlotTable$groupContainsAnchor$1	I
/*      */     //   22	15	4	$i$f$runtimeCheck	I
/*      */     //   19	18	3	value$iv	Z
/*      */     //   71	3	5	$i$a$-runtimeCheck-SlotTable$groupContainsAnchor$2	I
/*      */     //   63	15	4	$i$f$runtimeCheck	I
/*      */     //   60	18	3	value$iv	Z
/*      */     //   0	133	0	this	Landroidx/compose/runtime/SlotTable;
/*      */     //   0	133	1	groupIndex	I
/*      */     //   0	133	2	anchor	Landroidx/compose/runtime/Anchor;
/*      */   }
/*      */   
/*      */   public final void close$runtime(@NotNull SlotReader reader, @Nullable HashMap sourceInformationMap) {
/*      */     // Byte code:
/*      */     //   0: aload_1
/*      */     //   1: ldc_w 'reader'
/*      */     //   4: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   7: aload_1
/*      */     //   8: invokevirtual getTable$runtime : ()Landroidx/compose/runtime/SlotTable;
/*      */     //   11: aload_0
/*      */     //   12: if_acmpne -> 26
/*      */     //   15: aload_0
/*      */     //   16: getfield readers : I
/*      */     //   19: ifle -> 26
/*      */     //   22: iconst_1
/*      */     //   23: goto -> 27
/*      */     //   26: iconst_0
/*      */     //   27: istore_3
/*      */     //   28: iconst_0
/*      */     //   29: istore #4
/*      */     //   31: nop
/*      */     //   32: iload_3
/*      */     //   33: ifne -> 45
/*      */     //   36: iconst_0
/*      */     //   37: istore #5
/*      */     //   39: ldc_w 'Unexpected reader close()'
/*      */     //   42: invokestatic composeImmediateRuntimeError : (Ljava/lang/String;)V
/*      */     //   45: nop
/*      */     //   46: aload_0
/*      */     //   47: getfield readers : I
/*      */     //   50: istore_3
/*      */     //   51: aload_0
/*      */     //   52: iload_3
/*      */     //   53: iconst_m1
/*      */     //   54: iadd
/*      */     //   55: putfield readers : I
/*      */     //   58: aload_2
/*      */     //   59: ifnull -> 129
/*      */     //   62: aload_0
/*      */     //   63: getfield lock : Landroidx/compose/runtime/SynchronizedObject;
/*      */     //   66: astore_3
/*      */     //   67: iconst_0
/*      */     //   68: istore #4
/*      */     //   70: aload_3
/*      */     //   71: astore #5
/*      */     //   73: aload #5
/*      */     //   75: monitorenter
/*      */     //   76: nop
/*      */     //   77: iconst_0
/*      */     //   78: istore #6
/*      */     //   80: aload_0
/*      */     //   81: getfield sourceInformationMap : Ljava/util/HashMap;
/*      */     //   84: astore #7
/*      */     //   86: aload #7
/*      */     //   88: ifnull -> 103
/*      */     //   91: aload #7
/*      */     //   93: aload_2
/*      */     //   94: checkcast java/util/Map
/*      */     //   97: invokevirtual putAll : (Ljava/util/Map;)V
/*      */     //   100: goto -> 108
/*      */     //   103: aload_0
/*      */     //   104: aload_2
/*      */     //   105: putfield sourceInformationMap : Ljava/util/HashMap;
/*      */     //   108: nop
/*      */     //   109: getstatic kotlin/Unit.INSTANCE : Lkotlin/Unit;
/*      */     //   112: astore #8
/*      */     //   114: aload #5
/*      */     //   116: monitorexit
/*      */     //   117: goto -> 128
/*      */     //   120: astore #8
/*      */     //   122: aload #5
/*      */     //   124: monitorexit
/*      */     //   125: aload #8
/*      */     //   127: athrow
/*      */     //   128: nop
/*      */     //   129: return
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #280	-> 7
/*      */     //   #4250	-> 31
/*      */     //   #4253	-> 32
/*      */     //   #4254	-> 36
/*      */     //   #280	-> 39
/*      */     //   #4254	-> 42
/*      */     //   #4256	-> 45
/*      */     //   #281	-> 46
/*      */     //   #282	-> 58
/*      */     //   #283	-> 62
/*      */     //   #4257	-> 70
/*      */     //   #284	-> 80
/*      */     //   #285	-> 86
/*      */     //   #286	-> 91
/*      */     //   #288	-> 103
/*      */     //   #290	-> 108
/*      */     //   #4257	-> 112
/*      */     //   #4257	-> 128
/*      */     //   #292	-> 129
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   39	3	5	$i$a$-runtimeCheck-SlotTable$close$1	I
/*      */     //   31	15	4	$i$f$runtimeCheck	I
/*      */     //   28	18	3	value$iv	Z
/*      */     //   80	29	6	$i$a$-synchronized-SlotTable$close$2	I
/*      */     //   86	23	7	thisMap	Ljava/util/HashMap;
/*      */     //   70	59	4	$i$f$synchronized	I
/*      */     //   67	62	3	lock$iv	Landroidx/compose/runtime/SynchronizedObject;
/*      */     //   0	130	0	this	Landroidx/compose/runtime/SlotTable;
/*      */     //   0	130	1	reader	Landroidx/compose/runtime/SlotReader;
/*      */     //   0	130	2	sourceInformationMap	Ljava/util/HashMap;
/*      */     // Exception table:
/*      */     //   from	to	target	type
/*      */     //   76	114	120	finally
/*      */     //   120	122	120	finally
/*      */   }
/*      */   
/*      */   public final void close$runtime(@NotNull SlotWriter writer, @NotNull int[] groups, int groupsSize, @NotNull Object[] slots, int slotsSize, @NotNull ArrayList anchors, @Nullable HashMap sourceInformationMap, @Nullable MutableIntObjectMap calledByMap) {
/*      */     // Byte code:
/*      */     //   0: aload_1
/*      */     //   1: ldc_w 'writer'
/*      */     //   4: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   7: aload_2
/*      */     //   8: ldc_w 'groups'
/*      */     //   11: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   14: aload #4
/*      */     //   16: ldc_w 'slots'
/*      */     //   19: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   22: aload #6
/*      */     //   24: ldc_w 'anchors'
/*      */     //   27: invokestatic checkNotNullParameter : (Ljava/lang/Object;Ljava/lang/String;)V
/*      */     //   30: aload_1
/*      */     //   31: invokevirtual getTable$runtime : ()Landroidx/compose/runtime/SlotTable;
/*      */     //   34: aload_0
/*      */     //   35: if_acmpne -> 49
/*      */     //   38: aload_0
/*      */     //   39: getfield writer : Z
/*      */     //   42: ifeq -> 49
/*      */     //   45: iconst_1
/*      */     //   46: goto -> 50
/*      */     //   49: iconst_0
/*      */     //   50: istore #9
/*      */     //   52: iconst_0
/*      */     //   53: istore #10
/*      */     //   55: nop
/*      */     //   56: iload #9
/*      */     //   58: ifne -> 70
/*      */     //   61: iconst_0
/*      */     //   62: istore #11
/*      */     //   64: ldc_w 'Unexpected writer close()'
/*      */     //   67: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   70: nop
/*      */     //   71: aload_0
/*      */     //   72: iconst_0
/*      */     //   73: putfield writer : Z
/*      */     //   76: aload_0
/*      */     //   77: aload_2
/*      */     //   78: iload_3
/*      */     //   79: aload #4
/*      */     //   81: iload #5
/*      */     //   83: aload #6
/*      */     //   85: aload #7
/*      */     //   87: aload #8
/*      */     //   89: invokevirtual setTo$runtime : ([II[Ljava/lang/Object;ILjava/util/ArrayList;Ljava/util/HashMap;Landroidx/collection/MutableIntObjectMap;)V
/*      */     //   92: return
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #309	-> 30
/*      */     //   #4258	-> 55
/*      */     //   #4261	-> 56
/*      */     //   #4262	-> 61
/*      */     //   #309	-> 64
/*      */     //   #4262	-> 67
/*      */     //   #4264	-> 70
/*      */     //   #310	-> 71
/*      */     //   #311	-> 76
/*      */     //   #312	-> 92
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   64	3	11	$i$a$-requirePrecondition-SlotTable$close$3	I
/*      */     //   55	16	10	$i$f$requirePrecondition	I
/*      */     //   52	19	9	value$iv	Z
/*      */     //   0	93	0	this	Landroidx/compose/runtime/SlotTable;
/*      */     //   0	93	1	writer	Landroidx/compose/runtime/SlotWriter;
/*      */     //   0	93	2	groups	[I
/*      */     //   0	93	3	groupsSize	I
/*      */     //   0	93	4	slots	[Ljava/lang/Object;
/*      */     //   0	93	5	slotsSize	I
/*      */     //   0	93	6	anchors	Ljava/util/ArrayList;
/*      */     //   0	93	7	sourceInformationMap	Ljava/util/HashMap;
/*      */     //   0	93	8	calledByMap	Landroidx/collection/MutableIntObjectMap;
/*      */   }
/*      */   
/*      */   public final void setTo$runtime(@NotNull int[] groups, int groupsSize, @NotNull Object[] slots, int slotsSize, @NotNull ArrayList<Anchor> anchors, @Nullable HashMap<Anchor, GroupSourceInformation> sourceInformationMap, @Nullable MutableIntObjectMap<MutableIntSet> calledByMap) {
/*      */     Intrinsics.checkNotNullParameter(groups, "groups");
/*      */     Intrinsics.checkNotNullParameter(slots, "slots");
/*      */     Intrinsics.checkNotNullParameter(anchors, "anchors");
/*      */     this.groups = groups;
/*      */     this.groupsSize = groupsSize;
/*      */     this.slots = slots;
/*      */     this.slotsSize = slotsSize;
/*      */     this.anchors = anchors;
/*      */     this.sourceInformationMap = sourceInformationMap;
/*      */     this.calledByMap = calledByMap;
/*      */   }
/*      */   
/*      */   private static final void invalidateGroupsWithKey$lambda$20$scanGroup(SlotReader $reader, MutableIntSet set, List<Anchor> anchors, Ref.BooleanRef allScopesFound, SlotTable this$0, List<RecomposeScopeImpl> scopes) {
/*      */     int key = $reader.getGroupKey();
/*      */     if (set.contains(key)) {
/*      */       if (key != -3)
/*      */         anchors.add(SlotReader.anchor$default($reader, 0, 1, null)); 
/*      */       if (allScopesFound.element) {
/*      */         RecomposeScopeImpl nearestScope = this$0.findEffectiveRecomposeScope($reader.getCurrentGroup());
/*      */         if (nearestScope != null) {
/*      */           scopes.add(nearestScope);
/*      */           nearestScope.getAnchor();
/*      */           if ((nearestScope.getAnchor() != null) ? ((nearestScope.getAnchor().getLocation$runtime() == $reader.getCurrentGroup())) : false) {
/*      */             RecomposeScopeImpl parentScope = this$0.findEffectiveRecomposeScope($reader.getParent());
/*      */             if (parentScope != null) {
/*      */               RecomposeScopeImpl it = parentScope;
/*      */               int $i$a$-let-SlotTable$invalidateGroupsWithKey$2$scanGroup$1 = 0;
/*      */               scopes.add(it);
/*      */             } else {
/*      */             
/*      */             } 
/*      */           } 
/*      */         } else {
/*      */           allScopesFound.element = false;
/*      */           scopes.clear();
/*      */         } 
/*      */       } 
/*      */       $reader.skipGroup();
/*      */       return;
/*      */     } 
/*      */     $reader.startGroup();
/*      */     while (!$reader.isGroupEnd())
/*      */       invalidateGroupsWithKey$lambda$20$scanGroup($reader, set, anchors, allScopesFound, this$0, scopes); 
/*      */     $reader.endGroup();
/*      */   }
/*      */   
/*      */   public final boolean containsMark() {
/*      */     return (this.groupsSize > 0 && SlotTableKt.access$containsMark(this.groups, 0));
/*      */   }
/*      */   
/*      */   @Nullable
/*      */   public final GroupSourceInformation sourceInformationOf(int group) {
/*      */     HashMap<Anchor, GroupSourceInformation> map = this.sourceInformationMap;
/*      */     int $i$a$-let-SlotTable$sourceInformationOf$1 = 0;
/*      */     Anchor anchor = tryAnchor(group);
/*      */     int $i$a$-let-SlotTable$sourceInformationOf$1$1 = 0;
/*      */     tryAnchor(group);
/*      */     return (this.sourceInformationMap != null) ? ((tryAnchor(group) != null) ? map.get(anchor) : null) : null;
/*      */   }
/*      */   
/*      */   private final RecomposeScopeImpl findEffectiveRecomposeScope(int group) {
/*      */     int current = group;
/*      */     while (current > 0) {
/*      */       for (Object data : new DataIterator(this, current)) {
/*      */         if (data instanceof RecomposeScopeImpl) {
/*      */           if (((RecomposeScopeImpl)data).getUsed() && current != group)
/*      */             return (RecomposeScopeImpl)data; 
/*      */           ((RecomposeScopeImpl)data).setForcedRecompose(true);
/*      */         } 
/*      */       } 
/*      */       current = SlotTableKt.access$parentAnchor(this.groups, current);
/*      */     } 
/*      */     return null;
/*      */   }
/*      */   
/*      */   public final void verifyWellFormed() {
/*      */     // Byte code:
/*      */     //   0: new kotlin/jvm/internal/Ref$IntRef
/*      */     //   3: dup
/*      */     //   4: invokespecial <init> : ()V
/*      */     //   7: astore_1
/*      */     //   8: aload_0
/*      */     //   9: getfield groupsSize : I
/*      */     //   12: ifle -> 119
/*      */     //   15: aload_1
/*      */     //   16: getfield element : I
/*      */     //   19: aload_0
/*      */     //   20: getfield groupsSize : I
/*      */     //   23: if_icmpge -> 52
/*      */     //   26: aload_1
/*      */     //   27: aload_0
/*      */     //   28: iconst_m1
/*      */     //   29: aload_1
/*      */     //   30: getfield element : I
/*      */     //   33: aload_0
/*      */     //   34: getfield groups : [I
/*      */     //   37: aload_1
/*      */     //   38: getfield element : I
/*      */     //   41: invokestatic access$groupSize : ([II)I
/*      */     //   44: iadd
/*      */     //   45: invokestatic verifyWellFormed$validateGroup : (Lkotlin/jvm/internal/Ref$IntRef;Landroidx/compose/runtime/SlotTable;II)I
/*      */     //   48: pop
/*      */     //   49: goto -> 15
/*      */     //   52: aload_1
/*      */     //   53: getfield element : I
/*      */     //   56: aload_0
/*      */     //   57: getfield groupsSize : I
/*      */     //   60: if_icmpne -> 67
/*      */     //   63: iconst_1
/*      */     //   64: goto -> 68
/*      */     //   67: iconst_0
/*      */     //   68: istore_2
/*      */     //   69: iconst_0
/*      */     //   70: istore_3
/*      */     //   71: nop
/*      */     //   72: iload_2
/*      */     //   73: ifne -> 118
/*      */     //   76: iconst_0
/*      */     //   77: istore #4
/*      */     //   79: new java/lang/StringBuilder
/*      */     //   82: dup
/*      */     //   83: invokespecial <init> : ()V
/*      */     //   86: ldc_w 'Incomplete group at root '
/*      */     //   89: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   92: aload_1
/*      */     //   93: getfield element : I
/*      */     //   96: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   99: ldc_w ' expected to be '
/*      */     //   102: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   105: aload_0
/*      */     //   106: getfield groupsSize : I
/*      */     //   109: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   112: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   115: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   118: nop
/*      */     //   119: aload_0
/*      */     //   120: getfield slotsSize : I
/*      */     //   123: istore_2
/*      */     //   124: aload_0
/*      */     //   125: getfield slots : [Ljava/lang/Object;
/*      */     //   128: arraylength
/*      */     //   129: istore_3
/*      */     //   130: iload_2
/*      */     //   131: iload_3
/*      */     //   132: if_icmpge -> 193
/*      */     //   135: aload_0
/*      */     //   136: getfield slots : [Ljava/lang/Object;
/*      */     //   139: iload_2
/*      */     //   140: aaload
/*      */     //   141: ifnonnull -> 148
/*      */     //   144: iconst_1
/*      */     //   145: goto -> 149
/*      */     //   148: iconst_0
/*      */     //   149: istore #4
/*      */     //   151: iconst_0
/*      */     //   152: istore #5
/*      */     //   154: nop
/*      */     //   155: iload #4
/*      */     //   157: ifne -> 186
/*      */     //   160: iconst_0
/*      */     //   161: istore #6
/*      */     //   163: new java/lang/StringBuilder
/*      */     //   166: dup
/*      */     //   167: invokespecial <init> : ()V
/*      */     //   170: ldc_w 'Non null value in the slot gap at index '
/*      */     //   173: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   176: iload_2
/*      */     //   177: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   180: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   183: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   186: nop
/*      */     //   187: iinc #2, 1
/*      */     //   190: goto -> 130
/*      */     //   193: iconst_0
/*      */     //   194: istore_2
/*      */     //   195: iconst_m1
/*      */     //   196: istore_2
/*      */     //   197: aload_0
/*      */     //   198: getfield anchors : Ljava/util/ArrayList;
/*      */     //   201: checkcast java/util/List
/*      */     //   204: astore_3
/*      */     //   205: iconst_0
/*      */     //   206: istore #4
/*      */     //   208: nop
/*      */     //   209: iconst_0
/*      */     //   210: istore #5
/*      */     //   212: aload_3
/*      */     //   213: invokeinterface size : ()I
/*      */     //   218: istore #6
/*      */     //   220: iload #5
/*      */     //   222: iload #6
/*      */     //   224: if_icmpge -> 343
/*      */     //   227: aload_3
/*      */     //   228: iload #5
/*      */     //   230: invokeinterface get : (I)Ljava/lang/Object;
/*      */     //   235: astore #7
/*      */     //   237: aload #7
/*      */     //   239: checkcast androidx/compose/runtime/Anchor
/*      */     //   242: astore #8
/*      */     //   244: iconst_0
/*      */     //   245: istore #9
/*      */     //   247: aload #8
/*      */     //   249: aload_0
/*      */     //   250: invokevirtual toIndexFor : (Landroidx/compose/runtime/SlotTable;)I
/*      */     //   253: istore #10
/*      */     //   255: iconst_0
/*      */     //   256: iload #10
/*      */     //   258: if_icmpgt -> 278
/*      */     //   261: iload #10
/*      */     //   263: aload_0
/*      */     //   264: getfield groupsSize : I
/*      */     //   267: if_icmpgt -> 274
/*      */     //   270: iconst_1
/*      */     //   271: goto -> 279
/*      */     //   274: iconst_0
/*      */     //   275: goto -> 279
/*      */     //   278: iconst_0
/*      */     //   279: istore #11
/*      */     //   281: iconst_0
/*      */     //   282: istore #12
/*      */     //   284: nop
/*      */     //   285: iload #11
/*      */     //   287: ifne -> 299
/*      */     //   290: iconst_0
/*      */     //   291: istore #13
/*      */     //   293: ldc_w 'Invalid anchor, location out of bound'
/*      */     //   296: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   299: nop
/*      */     //   300: iload_2
/*      */     //   301: iload #10
/*      */     //   303: if_icmpge -> 310
/*      */     //   306: iconst_1
/*      */     //   307: goto -> 311
/*      */     //   310: iconst_0
/*      */     //   311: istore #11
/*      */     //   313: iconst_0
/*      */     //   314: istore #12
/*      */     //   316: nop
/*      */     //   317: iload #11
/*      */     //   319: ifne -> 331
/*      */     //   322: iconst_0
/*      */     //   323: istore #13
/*      */     //   325: ldc_w 'Anchor is out of order'
/*      */     //   328: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   331: nop
/*      */     //   332: iload #10
/*      */     //   334: istore_2
/*      */     //   335: nop
/*      */     //   336: nop
/*      */     //   337: iinc #5, 1
/*      */     //   340: goto -> 220
/*      */     //   343: nop
/*      */     //   344: aload_0
/*      */     //   345: getfield sourceInformationMap : Ljava/util/HashMap;
/*      */     //   348: dup
/*      */     //   349: ifnull -> 486
/*      */     //   352: astore #5
/*      */     //   354: iconst_0
/*      */     //   355: istore #6
/*      */     //   357: aload #5
/*      */     //   359: checkcast java/util/Map
/*      */     //   362: invokeinterface entrySet : ()Ljava/util/Set;
/*      */     //   367: invokeinterface iterator : ()Ljava/util/Iterator;
/*      */     //   372: astore #7
/*      */     //   374: aload #7
/*      */     //   376: invokeinterface hasNext : ()Z
/*      */     //   381: ifeq -> 482
/*      */     //   384: aload #7
/*      */     //   386: invokeinterface next : ()Ljava/lang/Object;
/*      */     //   391: checkcast java/util/Map$Entry
/*      */     //   394: astore #8
/*      */     //   396: aload #8
/*      */     //   398: invokeinterface getKey : ()Ljava/lang/Object;
/*      */     //   403: checkcast androidx/compose/runtime/Anchor
/*      */     //   406: astore #9
/*      */     //   408: aload #8
/*      */     //   410: invokeinterface getValue : ()Ljava/lang/Object;
/*      */     //   415: checkcast androidx/compose/runtime/GroupSourceInformation
/*      */     //   418: astore #10
/*      */     //   420: aload #9
/*      */     //   422: invokevirtual getValid : ()Z
/*      */     //   425: istore #11
/*      */     //   427: iconst_0
/*      */     //   428: istore #12
/*      */     //   430: nop
/*      */     //   431: iload #11
/*      */     //   433: ifne -> 445
/*      */     //   436: iconst_0
/*      */     //   437: istore #13
/*      */     //   439: ldc_w 'Source map contains invalid anchor'
/*      */     //   442: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   445: nop
/*      */     //   446: aload_0
/*      */     //   447: aload #9
/*      */     //   449: invokevirtual ownsAnchor : (Landroidx/compose/runtime/Anchor;)Z
/*      */     //   452: istore #11
/*      */     //   454: iconst_0
/*      */     //   455: istore #12
/*      */     //   457: nop
/*      */     //   458: iload #11
/*      */     //   460: ifne -> 472
/*      */     //   463: iconst_0
/*      */     //   464: istore #13
/*      */     //   466: ldc_w 'Source map anchor is not owned by the slot table'
/*      */     //   469: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   472: nop
/*      */     //   473: aload_0
/*      */     //   474: aload #10
/*      */     //   476: invokestatic verifyWellFormed$verifySourceGroup : (Landroidx/compose/runtime/SlotTable;Landroidx/compose/runtime/GroupSourceInformation;)V
/*      */     //   479: goto -> 374
/*      */     //   482: nop
/*      */     //   483: goto -> 488
/*      */     //   486: pop
/*      */     //   487: nop
/*      */     //   488: return
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #450	-> 0
/*      */     //   #512	-> 8
/*      */     //   #513	-> 15
/*      */     //   #514	-> 26
/*      */     //   #516	-> 52
/*      */     //   #4288	-> 71
/*      */     //   #4291	-> 72
/*      */     //   #4292	-> 76
/*      */     //   #517	-> 79
/*      */     //   #4292	-> 115
/*      */     //   #4294	-> 118
/*      */     //   #522	-> 119
/*      */     //   #523	-> 135
/*      */     //   #4295	-> 154
/*      */     //   #4298	-> 155
/*      */     //   #4299	-> 160
/*      */     //   #524	-> 163
/*      */     //   #4299	-> 183
/*      */     //   #4301	-> 186
/*      */     //   #522	-> 187
/*      */     //   #529	-> 193
/*      */     //   #530	-> 197
/*      */     //   #4302	-> 208
/*      */     //   #4303	-> 209
/*      */     //   #4304	-> 227
/*      */     //   #4305	-> 237
/*      */     //   #531	-> 247
/*      */     //   #532	-> 255
/*      */     //   #4306	-> 284
/*      */     //   #4309	-> 285
/*      */     //   #4310	-> 290
/*      */     //   #533	-> 293
/*      */     //   #4310	-> 296
/*      */     //   #4312	-> 299
/*      */     //   #535	-> 300
/*      */     //   #4313	-> 316
/*      */     //   #4316	-> 317
/*      */     //   #4317	-> 322
/*      */     //   #535	-> 325
/*      */     //   #4317	-> 328
/*      */     //   #4319	-> 331
/*      */     //   #536	-> 332
/*      */     //   #537	-> 335
/*      */     //   #4305	-> 336
/*      */     //   #4303	-> 337
/*      */     //   #4320	-> 343
/*      */     //   #556	-> 344
/*      */     //   #557	-> 357
/*      */     //   #557	-> 372
/*      */     //   #557	-> 406
/*      */     //   #557	-> 418
/*      */     //   #558	-> 420
/*      */     //   #4321	-> 430
/*      */     //   #4324	-> 431
/*      */     //   #4325	-> 436
/*      */     //   #559	-> 439
/*      */     //   #4325	-> 442
/*      */     //   #4327	-> 445
/*      */     //   #561	-> 446
/*      */     //   #4328	-> 457
/*      */     //   #4331	-> 458
/*      */     //   #4332	-> 463
/*      */     //   #562	-> 466
/*      */     //   #4332	-> 469
/*      */     //   #4334	-> 472
/*      */     //   #564	-> 473
/*      */     //   #566	-> 482
/*      */     //   #556	-> 483
/*      */     //   #556	-> 486
/*      */     //   #567	-> 488
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   79	36	4	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$1	I
/*      */     //   71	48	3	$i$f$checkPrecondition	I
/*      */     //   69	50	2	value$iv	Z
/*      */     //   163	20	6	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$2	I
/*      */     //   154	33	5	$i$f$checkPrecondition	I
/*      */     //   151	36	4	value$iv	Z
/*      */     //   124	69	2	index	I
/*      */     //   293	3	13	$i$a$-requirePrecondition-SlotTable$verifyWellFormed$3$1	I
/*      */     //   284	16	12	$i$f$requirePrecondition	I
/*      */     //   281	19	11	value$iv	Z
/*      */     //   325	3	13	$i$a$-requirePrecondition-SlotTable$verifyWellFormed$3$2	I
/*      */     //   316	16	12	$i$f$requirePrecondition	I
/*      */     //   313	19	11	value$iv	Z
/*      */     //   247	89	9	$i$a$-fastForEach-SlotTable$verifyWellFormed$3	I
/*      */     //   255	81	10	location	I
/*      */     //   244	92	8	anchor	Landroidx/compose/runtime/Anchor;
/*      */     //   237	100	7	item$iv	Ljava/lang/Object;
/*      */     //   212	131	5	index$iv	I
/*      */     //   208	136	4	$i$f$fastForEach	I
/*      */     //   205	139	3	$this$fastForEach$iv	Ljava/util/List;
/*      */     //   439	3	13	$i$a$-requirePrecondition-SlotTable$verifyWellFormed$4$1	I
/*      */     //   430	16	12	$i$f$requirePrecondition	I
/*      */     //   427	19	11	value$iv	Z
/*      */     //   466	3	13	$i$a$-requirePrecondition-SlotTable$verifyWellFormed$4$2	I
/*      */     //   457	16	12	$i$f$requirePrecondition	I
/*      */     //   454	19	11	value$iv	Z
/*      */     //   408	71	9	anchor	Landroidx/compose/runtime/Anchor;
/*      */     //   420	59	10	sourceGroup	Landroidx/compose/runtime/GroupSourceInformation;
/*      */     //   357	126	6	$i$a$-let-SlotTable$verifyWellFormed$4	I
/*      */     //   354	129	5	sourceInformationMap	Ljava/util/HashMap;
/*      */     //   8	481	1	current	Lkotlin/jvm/internal/Ref$IntRef;
/*      */     //   195	294	2	lastLocation	I
/*      */     //   0	489	0	this	Landroidx/compose/runtime/SlotTable;
/*      */   }
/*      */   
/*      */   private static final int verifyWellFormed$validateGroup(Ref.IntRef current, SlotTable this$0, int parent, int parentEnd) {
/*      */     // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: getfield element : I
/*      */     //   4: istore #5
/*      */     //   6: aload_0
/*      */     //   7: iload #5
/*      */     //   9: iconst_1
/*      */     //   10: iadd
/*      */     //   11: putfield element : I
/*      */     //   14: iload #5
/*      */     //   16: istore #4
/*      */     //   18: aload_1
/*      */     //   19: getfield groups : [I
/*      */     //   22: iload #4
/*      */     //   24: invokestatic access$parentAnchor : ([II)I
/*      */     //   27: istore #5
/*      */     //   29: iload #5
/*      */     //   31: iload_2
/*      */     //   32: if_icmpne -> 39
/*      */     //   35: iconst_1
/*      */     //   36: goto -> 40
/*      */     //   39: iconst_0
/*      */     //   40: istore #6
/*      */     //   42: iconst_0
/*      */     //   43: istore #7
/*      */     //   45: nop
/*      */     //   46: iload #6
/*      */     //   48: ifne -> 99
/*      */     //   51: iconst_0
/*      */     //   52: istore #8
/*      */     //   54: new java/lang/StringBuilder
/*      */     //   57: dup
/*      */     //   58: invokespecial <init> : ()V
/*      */     //   61: ldc_w 'Invalid parent index detected at '
/*      */     //   64: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   67: iload #4
/*      */     //   69: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   72: ldc_w ', expected parent index to be '
/*      */     //   75: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   78: iload_2
/*      */     //   79: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   82: ldc_w ' found '
/*      */     //   85: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   88: iload #5
/*      */     //   90: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   93: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   96: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   99: nop
/*      */     //   100: iload #4
/*      */     //   102: aload_1
/*      */     //   103: getfield groups : [I
/*      */     //   106: iload #4
/*      */     //   108: invokestatic access$groupSize : ([II)I
/*      */     //   111: iadd
/*      */     //   112: istore #6
/*      */     //   114: iload #6
/*      */     //   116: aload_1
/*      */     //   117: getfield groupsSize : I
/*      */     //   120: if_icmpgt -> 127
/*      */     //   123: iconst_1
/*      */     //   124: goto -> 128
/*      */     //   127: iconst_0
/*      */     //   128: istore #7
/*      */     //   130: iconst_0
/*      */     //   131: istore #8
/*      */     //   133: nop
/*      */     //   134: iload #7
/*      */     //   136: ifne -> 166
/*      */     //   139: iconst_0
/*      */     //   140: istore #9
/*      */     //   142: new java/lang/StringBuilder
/*      */     //   145: dup
/*      */     //   146: invokespecial <init> : ()V
/*      */     //   149: ldc_w 'A group extends past the end of the table at '
/*      */     //   152: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   155: iload #4
/*      */     //   157: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   160: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   163: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   166: nop
/*      */     //   167: iload #6
/*      */     //   169: iload_3
/*      */     //   170: if_icmpgt -> 177
/*      */     //   173: iconst_1
/*      */     //   174: goto -> 178
/*      */     //   177: iconst_0
/*      */     //   178: istore #7
/*      */     //   180: iconst_0
/*      */     //   181: istore #8
/*      */     //   183: nop
/*      */     //   184: iload #7
/*      */     //   186: ifne -> 216
/*      */     //   189: iconst_0
/*      */     //   190: istore #9
/*      */     //   192: new java/lang/StringBuilder
/*      */     //   195: dup
/*      */     //   196: invokespecial <init> : ()V
/*      */     //   199: ldc_w 'A group extends past its parent group at '
/*      */     //   202: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   205: iload #4
/*      */     //   207: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   210: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   213: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   216: nop
/*      */     //   217: aload_1
/*      */     //   218: getfield groups : [I
/*      */     //   221: iload #4
/*      */     //   223: invokestatic access$dataAnchor : ([II)I
/*      */     //   226: istore #7
/*      */     //   228: iload #4
/*      */     //   230: aload_1
/*      */     //   231: getfield groupsSize : I
/*      */     //   234: iconst_1
/*      */     //   235: isub
/*      */     //   236: if_icmplt -> 246
/*      */     //   239: aload_1
/*      */     //   240: getfield slotsSize : I
/*      */     //   243: goto -> 257
/*      */     //   246: aload_1
/*      */     //   247: getfield groups : [I
/*      */     //   250: iload #4
/*      */     //   252: iconst_1
/*      */     //   253: iadd
/*      */     //   254: invokestatic access$dataAnchor : ([II)I
/*      */     //   257: istore #8
/*      */     //   259: iload #8
/*      */     //   261: aload_1
/*      */     //   262: getfield slots : [Ljava/lang/Object;
/*      */     //   265: arraylength
/*      */     //   266: if_icmpgt -> 273
/*      */     //   269: iconst_1
/*      */     //   270: goto -> 274
/*      */     //   273: iconst_0
/*      */     //   274: istore #9
/*      */     //   276: iconst_0
/*      */     //   277: istore #10
/*      */     //   279: nop
/*      */     //   280: iload #9
/*      */     //   282: ifne -> 318
/*      */     //   285: iconst_0
/*      */     //   286: istore #11
/*      */     //   288: new java/lang/StringBuilder
/*      */     //   291: dup
/*      */     //   292: invokespecial <init> : ()V
/*      */     //   295: ldc_w 'Slots for '
/*      */     //   298: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   301: iload #4
/*      */     //   303: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   306: ldc_w ' extend past the end of the slot table'
/*      */     //   309: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   312: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   315: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   318: nop
/*      */     //   319: iload #7
/*      */     //   321: iload #8
/*      */     //   323: if_icmpgt -> 330
/*      */     //   326: iconst_1
/*      */     //   327: goto -> 331
/*      */     //   330: iconst_0
/*      */     //   331: istore #9
/*      */     //   333: iconst_0
/*      */     //   334: istore #10
/*      */     //   336: nop
/*      */     //   337: iload #9
/*      */     //   339: ifne -> 369
/*      */     //   342: iconst_0
/*      */     //   343: istore #11
/*      */     //   345: new java/lang/StringBuilder
/*      */     //   348: dup
/*      */     //   349: invokespecial <init> : ()V
/*      */     //   352: ldc_w 'Invalid data anchor at '
/*      */     //   355: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   358: iload #4
/*      */     //   360: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   363: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   366: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   369: nop
/*      */     //   370: aload_1
/*      */     //   371: getfield groups : [I
/*      */     //   374: iload #4
/*      */     //   376: invokestatic access$slotAnchor : ([II)I
/*      */     //   379: istore #9
/*      */     //   381: iload #9
/*      */     //   383: iload #8
/*      */     //   385: if_icmpgt -> 392
/*      */     //   388: iconst_1
/*      */     //   389: goto -> 393
/*      */     //   392: iconst_0
/*      */     //   393: istore #10
/*      */     //   395: iconst_0
/*      */     //   396: istore #11
/*      */     //   398: nop
/*      */     //   399: iload #10
/*      */     //   401: ifne -> 431
/*      */     //   404: iconst_0
/*      */     //   405: istore #12
/*      */     //   407: new java/lang/StringBuilder
/*      */     //   410: dup
/*      */     //   411: invokespecial <init> : ()V
/*      */     //   414: ldc_w 'Slots start out of range at '
/*      */     //   417: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   420: iload #4
/*      */     //   422: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   425: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   428: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   431: nop
/*      */     //   432: aload_1
/*      */     //   433: getfield groups : [I
/*      */     //   436: iload #4
/*      */     //   438: invokestatic access$isNode : ([II)Z
/*      */     //   441: ifeq -> 448
/*      */     //   444: iconst_1
/*      */     //   445: goto -> 449
/*      */     //   448: iconst_0
/*      */     //   449: aload_1
/*      */     //   450: getfield groups : [I
/*      */     //   453: iload #4
/*      */     //   455: invokestatic access$hasObjectKey : ([II)Z
/*      */     //   458: ifeq -> 465
/*      */     //   461: iconst_1
/*      */     //   462: goto -> 466
/*      */     //   465: iconst_0
/*      */     //   466: iadd
/*      */     //   467: aload_1
/*      */     //   468: getfield groups : [I
/*      */     //   471: iload #4
/*      */     //   473: invokestatic access$hasAux : ([II)Z
/*      */     //   476: ifeq -> 483
/*      */     //   479: iconst_1
/*      */     //   480: goto -> 484
/*      */     //   483: iconst_0
/*      */     //   484: iadd
/*      */     //   485: istore #10
/*      */     //   487: iload #8
/*      */     //   489: iload #7
/*      */     //   491: isub
/*      */     //   492: iload #10
/*      */     //   494: if_icmplt -> 501
/*      */     //   497: iconst_1
/*      */     //   498: goto -> 502
/*      */     //   501: iconst_0
/*      */     //   502: istore #11
/*      */     //   504: iconst_0
/*      */     //   505: istore #12
/*      */     //   507: nop
/*      */     //   508: iload #11
/*      */     //   510: ifne -> 540
/*      */     //   513: iconst_0
/*      */     //   514: istore #13
/*      */     //   516: new java/lang/StringBuilder
/*      */     //   519: dup
/*      */     //   520: invokespecial <init> : ()V
/*      */     //   523: ldc_w 'Not enough slots added for group '
/*      */     //   526: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   529: iload #4
/*      */     //   531: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   534: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   537: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   540: nop
/*      */     //   541: aload_1
/*      */     //   542: getfield groups : [I
/*      */     //   545: iload #4
/*      */     //   547: invokestatic access$isNode : ([II)Z
/*      */     //   550: istore #11
/*      */     //   552: iload #11
/*      */     //   554: ifeq -> 574
/*      */     //   557: aload_1
/*      */     //   558: getfield slots : [Ljava/lang/Object;
/*      */     //   561: aload_1
/*      */     //   562: getfield groups : [I
/*      */     //   565: iload #4
/*      */     //   567: invokestatic access$nodeIndex : ([II)I
/*      */     //   570: aaload
/*      */     //   571: ifnull -> 578
/*      */     //   574: iconst_1
/*      */     //   575: goto -> 579
/*      */     //   578: iconst_0
/*      */     //   579: istore #12
/*      */     //   581: iconst_0
/*      */     //   582: istore #13
/*      */     //   584: nop
/*      */     //   585: iload #12
/*      */     //   587: ifne -> 617
/*      */     //   590: iconst_0
/*      */     //   591: istore #14
/*      */     //   593: new java/lang/StringBuilder
/*      */     //   596: dup
/*      */     //   597: invokespecial <init> : ()V
/*      */     //   600: ldc_w 'No node recorded for a node group at '
/*      */     //   603: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   606: iload #4
/*      */     //   608: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   611: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   614: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   617: nop
/*      */     //   618: iconst_0
/*      */     //   619: istore #12
/*      */     //   621: aload_0
/*      */     //   622: getfield element : I
/*      */     //   625: iload #6
/*      */     //   627: if_icmpge -> 647
/*      */     //   630: iload #12
/*      */     //   632: aload_0
/*      */     //   633: aload_1
/*      */     //   634: iload #4
/*      */     //   636: iload #6
/*      */     //   638: invokestatic verifyWellFormed$validateGroup : (Lkotlin/jvm/internal/Ref$IntRef;Landroidx/compose/runtime/SlotTable;II)I
/*      */     //   641: iadd
/*      */     //   642: istore #12
/*      */     //   644: goto -> 621
/*      */     //   647: aload_1
/*      */     //   648: getfield groups : [I
/*      */     //   651: iload #4
/*      */     //   653: invokestatic access$nodeCount : ([II)I
/*      */     //   656: istore #13
/*      */     //   658: aload_1
/*      */     //   659: getfield groups : [I
/*      */     //   662: iload #4
/*      */     //   664: invokestatic access$groupSize : ([II)I
/*      */     //   667: istore #14
/*      */     //   669: iload #13
/*      */     //   671: iload #12
/*      */     //   673: if_icmpne -> 680
/*      */     //   676: iconst_1
/*      */     //   677: goto -> 681
/*      */     //   680: iconst_0
/*      */     //   681: istore #15
/*      */     //   683: iconst_0
/*      */     //   684: istore #16
/*      */     //   686: nop
/*      */     //   687: iload #15
/*      */     //   689: ifne -> 741
/*      */     //   692: iconst_0
/*      */     //   693: istore #17
/*      */     //   695: new java/lang/StringBuilder
/*      */     //   698: dup
/*      */     //   699: invokespecial <init> : ()V
/*      */     //   702: ldc_w 'Incorrect node count detected at '
/*      */     //   705: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   708: iload #4
/*      */     //   710: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   713: ldc_w ', expected '
/*      */     //   716: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   719: iload #13
/*      */     //   721: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   724: ldc_w ', received '
/*      */     //   727: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   730: iload #12
/*      */     //   732: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   735: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   738: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   741: nop
/*      */     //   742: aload_0
/*      */     //   743: getfield element : I
/*      */     //   746: iload #4
/*      */     //   748: isub
/*      */     //   749: istore #15
/*      */     //   751: iload #14
/*      */     //   753: iload #15
/*      */     //   755: if_icmpne -> 762
/*      */     //   758: iconst_1
/*      */     //   759: goto -> 763
/*      */     //   762: iconst_0
/*      */     //   763: istore #16
/*      */     //   765: iconst_0
/*      */     //   766: istore #17
/*      */     //   768: nop
/*      */     //   769: iload #16
/*      */     //   771: ifne -> 823
/*      */     //   774: iconst_0
/*      */     //   775: istore #18
/*      */     //   777: new java/lang/StringBuilder
/*      */     //   780: dup
/*      */     //   781: invokespecial <init> : ()V
/*      */     //   784: ldc_w 'Incorrect slot count detected at '
/*      */     //   787: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   790: iload #4
/*      */     //   792: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   795: ldc_w ', expected '
/*      */     //   798: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   801: iload #14
/*      */     //   803: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   806: ldc_w ', received '
/*      */     //   809: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   812: iload #15
/*      */     //   814: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   817: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   820: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   823: nop
/*      */     //   824: aload_1
/*      */     //   825: getfield groups : [I
/*      */     //   828: iload #4
/*      */     //   830: invokestatic access$containsAnyMark : ([II)Z
/*      */     //   833: ifeq -> 912
/*      */     //   836: iload #4
/*      */     //   838: ifle -> 852
/*      */     //   841: aload_1
/*      */     //   842: getfield groups : [I
/*      */     //   845: iload_2
/*      */     //   846: invokestatic access$containsMark : ([II)Z
/*      */     //   849: ifeq -> 856
/*      */     //   852: iconst_1
/*      */     //   853: goto -> 857
/*      */     //   856: iconst_0
/*      */     //   857: istore #16
/*      */     //   859: iconst_0
/*      */     //   860: istore #17
/*      */     //   862: nop
/*      */     //   863: iload #16
/*      */     //   865: ifne -> 911
/*      */     //   868: iconst_0
/*      */     //   869: istore #18
/*      */     //   871: new java/lang/StringBuilder
/*      */     //   874: dup
/*      */     //   875: invokespecial <init> : ()V
/*      */     //   878: ldc_w 'Expected group '
/*      */     //   881: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   884: iload_2
/*      */     //   885: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   888: ldc_w ' to record it contains a mark because '
/*      */     //   891: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   894: iload #4
/*      */     //   896: invokevirtual append : (I)Ljava/lang/StringBuilder;
/*      */     //   899: ldc_w ' does'
/*      */     //   902: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   905: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   908: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   911: nop
/*      */     //   912: iload #11
/*      */     //   914: ifeq -> 921
/*      */     //   917: iconst_1
/*      */     //   918: goto -> 923
/*      */     //   921: iload #12
/*      */     //   923: ireturn
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #452	-> 0
/*      */     //   #453	-> 18
/*      */     //   #454	-> 29
/*      */     //   #4335	-> 45
/*      */     //   #4338	-> 46
/*      */     //   #4339	-> 51
/*      */     //   #455	-> 54
/*      */     //   #456	-> 88
/*      */     //   #455	-> 90
/*      */     //   #4339	-> 96
/*      */     //   #4341	-> 99
/*      */     //   #458	-> 100
/*      */     //   #459	-> 114
/*      */     //   #4342	-> 133
/*      */     //   #4345	-> 134
/*      */     //   #4346	-> 139
/*      */     //   #460	-> 142
/*      */     //   #4346	-> 163
/*      */     //   #4348	-> 166
/*      */     //   #462	-> 167
/*      */     //   #4349	-> 183
/*      */     //   #4352	-> 184
/*      */     //   #4353	-> 189
/*      */     //   #463	-> 192
/*      */     //   #4353	-> 213
/*      */     //   #4355	-> 216
/*      */     //   #466	-> 217
/*      */     //   #467	-> 228
/*      */     //   #468	-> 259
/*      */     //   #4356	-> 279
/*      */     //   #4359	-> 280
/*      */     //   #4360	-> 285
/*      */     //   #469	-> 288
/*      */     //   #4360	-> 315
/*      */     //   #4362	-> 318
/*      */     //   #471	-> 319
/*      */     //   #4363	-> 336
/*      */     //   #4366	-> 337
/*      */     //   #4367	-> 342
/*      */     //   #472	-> 345
/*      */     //   #4367	-> 366
/*      */     //   #4369	-> 369
/*      */     //   #474	-> 370
/*      */     //   #475	-> 381
/*      */     //   #4370	-> 398
/*      */     //   #4373	-> 399
/*      */     //   #4374	-> 404
/*      */     //   #476	-> 407
/*      */     //   #4374	-> 428
/*      */     //   #4376	-> 431
/*      */     //   #478	-> 432
/*      */     //   #479	-> 449
/*      */     //   #478	-> 466
/*      */     //   #480	-> 467
/*      */     //   #478	-> 484
/*      */     //   #481	-> 487
/*      */     //   #4377	-> 507
/*      */     //   #4380	-> 508
/*      */     //   #4381	-> 513
/*      */     //   #482	-> 516
/*      */     //   #4381	-> 537
/*      */     //   #4383	-> 540
/*      */     //   #484	-> 541
/*      */     //   #485	-> 552
/*      */     //   #4384	-> 584
/*      */     //   #4387	-> 585
/*      */     //   #4388	-> 590
/*      */     //   #486	-> 593
/*      */     //   #4388	-> 614
/*      */     //   #4390	-> 617
/*      */     //   #488	-> 618
/*      */     //   #489	-> 621
/*      */     //   #490	-> 630
/*      */     //   #492	-> 647
/*      */     //   #493	-> 658
/*      */     //   #494	-> 669
/*      */     //   #4391	-> 686
/*      */     //   #4394	-> 687
/*      */     //   #4395	-> 692
/*      */     //   #495	-> 695
/*      */     //   #496	-> 719
/*      */     //   #495	-> 721
/*      */     //   #496	-> 724
/*      */     //   #495	-> 727
/*      */     //   #496	-> 730
/*      */     //   #495	-> 732
/*      */     //   #4395	-> 738
/*      */     //   #4397	-> 741
/*      */     //   #498	-> 742
/*      */     //   #499	-> 751
/*      */     //   #4398	-> 768
/*      */     //   #4401	-> 769
/*      */     //   #4402	-> 774
/*      */     //   #500	-> 777
/*      */     //   #501	-> 812
/*      */     //   #500	-> 814
/*      */     //   #4402	-> 820
/*      */     //   #4404	-> 823
/*      */     //   #503	-> 824
/*      */     //   #504	-> 836
/*      */     //   #4405	-> 862
/*      */     //   #4408	-> 863
/*      */     //   #4409	-> 868
/*      */     //   #505	-> 871
/*      */     //   #4409	-> 908
/*      */     //   #4411	-> 911
/*      */     //   #509	-> 912
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   54	42	8	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$1	I
/*      */     //   45	55	7	$i$f$checkPrecondition	I
/*      */     //   42	58	6	value$iv	Z
/*      */     //   142	21	9	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$2	I
/*      */     //   133	34	8	$i$f$checkPrecondition	I
/*      */     //   130	37	7	value$iv	Z
/*      */     //   192	21	9	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$3	I
/*      */     //   183	34	8	$i$f$checkPrecondition	I
/*      */     //   180	37	7	value$iv	Z
/*      */     //   288	27	11	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$4	I
/*      */     //   279	40	10	$i$f$checkPrecondition	I
/*      */     //   276	43	9	value$iv	Z
/*      */     //   345	21	11	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$5	I
/*      */     //   336	34	10	$i$f$checkPrecondition	I
/*      */     //   333	37	9	value$iv	Z
/*      */     //   407	21	12	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$6	I
/*      */     //   398	34	11	$i$f$checkPrecondition	I
/*      */     //   395	37	10	value$iv	Z
/*      */     //   516	21	13	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$7	I
/*      */     //   507	34	12	$i$f$checkPrecondition	I
/*      */     //   504	37	11	value$iv	Z
/*      */     //   593	21	14	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$8	I
/*      */     //   584	34	13	$i$f$checkPrecondition	I
/*      */     //   581	37	12	value$iv	Z
/*      */     //   695	43	17	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$9	I
/*      */     //   686	56	16	$i$f$checkPrecondition	I
/*      */     //   683	59	15	value$iv	Z
/*      */     //   777	43	18	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$10	I
/*      */     //   768	56	17	$i$f$checkPrecondition	I
/*      */     //   765	59	16	value$iv	Z
/*      */     //   871	37	18	$i$a$-checkPrecondition-SlotTable$verifyWellFormed$validateGroup$11	I
/*      */     //   862	50	17	$i$f$checkPrecondition	I
/*      */     //   859	53	16	value$iv	Z
/*      */     //   18	906	4	group	I
/*      */     //   29	895	5	parentIndex	I
/*      */     //   114	810	6	end	I
/*      */     //   228	696	7	dataStart	I
/*      */     //   259	665	8	dataEnd	I
/*      */     //   381	543	9	slotStart	I
/*      */     //   487	437	10	minSlotsNeeded	I
/*      */     //   552	372	11	isNode	Z
/*      */     //   621	303	12	nodeCount	I
/*      */     //   658	266	13	expectedNodeCount	I
/*      */     //   669	255	14	expectedSlotCount	I
/*      */     //   751	173	15	actualSlotCount	I
/*      */     //   0	924	0	current	Lkotlin/jvm/internal/Ref$IntRef;
/*      */     //   0	924	1	this$0	Landroidx/compose/runtime/SlotTable;
/*      */     //   0	924	2	parent	I
/*      */     //   0	924	3	parentEnd	I
/*      */   }
/*      */   
/*      */   private static final void verifyWellFormed$verifySourceGroup(SlotTable this$0, GroupSourceInformation group) {
/*      */     // Byte code:
/*      */     //   0: aload_1
/*      */     //   1: invokevirtual getGroups : ()Ljava/util/ArrayList;
/*      */     //   4: dup
/*      */     //   5: ifnull -> 153
/*      */     //   8: checkcast java/util/List
/*      */     //   11: astore_2
/*      */     //   12: iconst_0
/*      */     //   13: istore_3
/*      */     //   14: nop
/*      */     //   15: iconst_0
/*      */     //   16: istore #4
/*      */     //   18: aload_2
/*      */     //   19: invokeinterface size : ()I
/*      */     //   24: istore #5
/*      */     //   26: iload #4
/*      */     //   28: iload #5
/*      */     //   30: if_icmpge -> 149
/*      */     //   33: aload_2
/*      */     //   34: iload #4
/*      */     //   36: invokeinterface get : (I)Ljava/lang/Object;
/*      */     //   41: astore #6
/*      */     //   43: aload #6
/*      */     //   45: astore #7
/*      */     //   47: iconst_0
/*      */     //   48: istore #8
/*      */     //   50: aload #7
/*      */     //   52: astore #9
/*      */     //   54: aload #9
/*      */     //   56: instanceof androidx/compose/runtime/Anchor
/*      */     //   59: ifeq -> 124
/*      */     //   62: aload #7
/*      */     //   64: checkcast androidx/compose/runtime/Anchor
/*      */     //   67: invokevirtual getValid : ()Z
/*      */     //   70: istore #10
/*      */     //   72: iconst_0
/*      */     //   73: istore #11
/*      */     //   75: nop
/*      */     //   76: iload #10
/*      */     //   78: ifne -> 90
/*      */     //   81: iconst_0
/*      */     //   82: istore #12
/*      */     //   84: ldc_w 'Source map contains invalid anchor'
/*      */     //   87: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   90: nop
/*      */     //   91: aload_0
/*      */     //   92: aload #7
/*      */     //   94: checkcast androidx/compose/runtime/Anchor
/*      */     //   97: invokevirtual ownsAnchor : (Landroidx/compose/runtime/Anchor;)Z
/*      */     //   100: istore #10
/*      */     //   102: iconst_0
/*      */     //   103: istore #11
/*      */     //   105: nop
/*      */     //   106: iload #10
/*      */     //   108: ifne -> 120
/*      */     //   111: iconst_0
/*      */     //   112: istore #12
/*      */     //   114: ldc_w 'Source map anchor is not owned by the slot table'
/*      */     //   117: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   120: nop
/*      */     //   121: goto -> 141
/*      */     //   124: aload #9
/*      */     //   126: instanceof androidx/compose/runtime/GroupSourceInformation
/*      */     //   129: ifeq -> 141
/*      */     //   132: aload_0
/*      */     //   133: aload #7
/*      */     //   135: checkcast androidx/compose/runtime/GroupSourceInformation
/*      */     //   138: invokestatic verifyWellFormed$verifySourceGroup : (Landroidx/compose/runtime/SlotTable;Landroidx/compose/runtime/GroupSourceInformation;)V
/*      */     //   141: nop
/*      */     //   142: nop
/*      */     //   143: iinc #4, 1
/*      */     //   146: goto -> 26
/*      */     //   149: nop
/*      */     //   150: goto -> 155
/*      */     //   153: pop
/*      */     //   154: nop
/*      */     //   155: return
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #541	-> 0
/*      */     //   #4412	-> 14
/*      */     //   #4413	-> 15
/*      */     //   #4414	-> 33
/*      */     //   #4415	-> 43
/*      */     //   #542	-> 50
/*      */     //   #543	-> 54
/*      */     //   #544	-> 62
/*      */     //   #4416	-> 75
/*      */     //   #4419	-> 76
/*      */     //   #4420	-> 81
/*      */     //   #545	-> 84
/*      */     //   #4420	-> 87
/*      */     //   #4422	-> 90
/*      */     //   #547	-> 91
/*      */     //   #4423	-> 105
/*      */     //   #4426	-> 106
/*      */     //   #4427	-> 111
/*      */     //   #548	-> 114
/*      */     //   #4427	-> 117
/*      */     //   #4429	-> 120
/*      */     //   #551	-> 124
/*      */     //   #553	-> 141
/*      */     //   #4415	-> 142
/*      */     //   #4413	-> 143
/*      */     //   #4430	-> 149
/*      */     //   #541	-> 153
/*      */     //   #554	-> 155
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   84	3	12	$i$a$-requirePrecondition-SlotTable$verifyWellFormed$verifySourceGroup$1$1	I
/*      */     //   75	16	11	$i$f$requirePrecondition	I
/*      */     //   72	19	10	value$iv	Z
/*      */     //   114	3	12	$i$a$-requirePrecondition-SlotTable$verifyWellFormed$verifySourceGroup$1$2	I
/*      */     //   105	16	11	$i$f$requirePrecondition	I
/*      */     //   102	19	10	value$iv	Z
/*      */     //   50	92	8	$i$a$-fastForEach-SlotTable$verifyWellFormed$verifySourceGroup$1	I
/*      */     //   47	95	7	item	Ljava/lang/Object;
/*      */     //   43	100	6	item$iv	Ljava/lang/Object;
/*      */     //   18	131	4	index$iv	I
/*      */     //   14	136	3	$i$f$fastForEach	I
/*      */     //   12	138	2	$this$fastForEach$iv	Ljava/util/List;
/*      */     //   0	156	0	this$0	Landroidx/compose/runtime/SlotTable;
/*      */     //   0	156	1	group	Landroidx/compose/runtime/GroupSourceInformation;
/*      */   }
/*      */   
/*      */   public final void collectCalledByInformation() {
/*      */     this.calledByMap = new MutableIntObjectMap(0, 1, null);
/*      */   }
/*      */   
/*      */   public final void collectSourceInformation() {
/*      */     this.sourceInformationMap = new HashMap<>();
/*      */   }
/*      */   
/*      */   @NotNull
/*      */   public final String toDebugString() {
/*      */     StringBuilder stringBuilder1 = new StringBuilder(), $this$toDebugString_u24lambda_u2447 = stringBuilder1;
/*      */     int $i$a$-buildString-SlotTable$toDebugString$1 = 0;
/*      */     $this$toDebugString_u24lambda_u2447.append(toString());
/*      */     $this$toDebugString_u24lambda_u2447.append('\n');
/*      */     int groupsSize = this.groupsSize;
/*      */     if (groupsSize > 0) {
/*      */       int current = 0;
/*      */       while (current < groupsSize)
/*      */         current += emitGroup($this$toDebugString_u24lambda_u2447, current, 0); 
/*      */     } else {
/*      */       $this$toDebugString_u24lambda_u2447.append("<EMPTY>");
/*      */     } 
/*      */     Intrinsics.checkNotNullExpressionValue(stringBuilder1.toString(), "toString(...)");
/*      */     return this.writer ? toString() : stringBuilder1.toString();
/*      */   }
/*      */   
/*      */   private final int emitGroup(StringBuilder $this$emitGroup, int index, int level) {
/*      */     for (byte b = 0; b < level; ) {
/*      */       int i = b;
/*      */       int $i$a$-repeat-SlotTable$emitGroup$1 = 0;
/*      */       $this$emitGroup.append(' ');
/*      */       b++;
/*      */     } 
/*      */     $this$emitGroup.append("Group(");
/*      */     $this$emitGroup.append(index);
/*      */     $this$emitGroup.append(")");
/*      */     String it = sourceInformationOf(index).getSourceInformation();
/*      */     int $i$a$-let-SlotTable$emitGroup$2 = 0;
/*      */     if (StringsKt.startsWith$default(it, "C(", false, 2, null) || StringsKt.startsWith$default(it, "CC(", false, 2, null)) {
/*      */       int start = StringsKt.indexOf$default(it, "(", 0, false, 6, null) + 1;
/*      */       int endParen = StringsKt.indexOf$default(it, ')', 0, false, 6, null);
/*      */       $this$emitGroup.append(" ");
/*      */       Intrinsics.checkNotNullExpressionValue(it.substring(start, endParen), "substring(...)");
/*      */       $this$emitGroup.append(it.substring(start, endParen));
/*      */       $this$emitGroup.append("()");
/*      */     } 
/*      */     sourceInformationOf(index).getSourceInformation();
/*      */     $this$emitGroup.append(" key=");
/*      */     $this$emitGroup.append(SlotTableKt.access$key(this.groups, index));
/*      */     int groupSize = SlotTableKt.access$groupSize(this.groups, index);
/*      */     $this$emitGroup.append(", nodes=");
/*      */     $this$emitGroup.append(SlotTableKt.access$nodeCount(this.groups, index));
/*      */     $this$emitGroup.append(", size=");
/*      */     $this$emitGroup.append(groupSize);
/*      */     if (SlotTableKt.access$hasMark(this.groups, index))
/*      */       $this$emitGroup.append(", mark"); 
/*      */     if (SlotTableKt.access$containsMark(this.groups, index))
/*      */       $this$emitGroup.append(", contains mark"); 
/*      */     int dataStart = emitGroup$dataIndex(this, index);
/*      */     int dataEnd = emitGroup$dataIndex(this, index + 1);
/*      */     if (((0 <= dataStart) ? ((dataStart <= dataEnd)) : false) && dataEnd <= this.slotsSize) {
/*      */       if (SlotTableKt.access$hasObjectKey(this.groups, index))
/*      */         $this$emitGroup.append(" objectKey=" + SlotTableKt.access$summarize(String.valueOf(this.slots[SlotTableKt.access$objectKeyIndex(this.groups, index)]), 10)); 
/*      */       if (SlotTableKt.access$isNode(this.groups, index))
/*      */         $this$emitGroup.append(" node=" + SlotTableKt.access$summarize(String.valueOf(this.slots[SlotTableKt.access$nodeIndex(this.groups, index)]), 10)); 
/*      */       if (SlotTableKt.access$hasAux(this.groups, index))
/*      */         $this$emitGroup.append(" aux=" + SlotTableKt.access$summarize(String.valueOf(this.slots[SlotTableKt.access$auxIndex(this.groups, index)]), 10)); 
/*      */       int slotStart = SlotTableKt.access$slotAnchor(this.groups, index);
/*      */       if (slotStart < dataEnd) {
/*      */         $this$emitGroup.append(", slots=[");
/*      */         $this$emitGroup.append(slotStart);
/*      */         $this$emitGroup.append(": ");
/*      */         for (int dataIndex = slotStart; dataIndex < dataEnd; dataIndex++) {
/*      */           if (dataIndex != slotStart)
/*      */             $this$emitGroup.append(", "); 
/*      */           $this$emitGroup.append(SlotTableKt.access$summarize(String.valueOf(this.slots[dataIndex]), 10));
/*      */         } 
/*      */         $this$emitGroup.append("]");
/*      */       } 
/*      */     } else {
/*      */       $this$emitGroup.append(", *invalid data offsets " + dataStart + '-' + dataEnd + '*');
/*      */     } 
/*      */     $this$emitGroup.append('\n');
/*      */     int current = index + 1;
/*      */     int end = index + groupSize;
/*      */     while (current < end)
/*      */       current += emitGroup($this$emitGroup, current, level + 1); 
/*      */     return groupSize;
/*      */   }
/*      */   
/*      */   private static final int emitGroup$dataIndex(SlotTable this$0, int index) {
/*      */     return (index >= this$0.groupsSize) ? this$0.slotsSize : SlotTableKt.access$dataAnchor(this$0.groups, index);
/*      */   }
/*      */   
/*      */   private final List<Integer> keys() {
/*      */     return SlotTableKt.access$keys(this.groups, this.groupsSize * 5);
/*      */   }
/*      */   
/*      */   private final List<Integer> nodes() {
/*      */     return SlotTableKt.access$nodeCounts(this.groups, this.groupsSize * 5);
/*      */   }
/*      */   
/*      */   private final List<Integer> parentIndexes() {
/*      */     return SlotTableKt.access$parentAnchors(this.groups, this.groupsSize * 5);
/*      */   }
/*      */   
/*      */   private final List<Integer> dataIndexes() {
/*      */     return SlotTableKt.access$dataAnchors(this.groups, this.groupsSize * 5);
/*      */   }
/*      */   
/*      */   private final List<Integer> groupSizes() {
/*      */     return SlotTableKt.access$groupSizes(this.groups, this.groupsSize * 5);
/*      */   }
/*      */   
/*      */   @NotNull
/*      */   public final List<Object> slotsOf$runtime(int group) {
/*      */     int start = SlotTableKt.access$dataAnchor(this.groups, group);
/*      */     int end = (group + 1 < this.groupsSize) ? SlotTableKt.access$dataAnchor(this.groups, group + 1) : this.slots.length;
/*      */     return ArraysKt.toList(this.slots).subList(start, end);
/*      */   }
/*      */   
/*      */   @Nullable
/*      */   public final Object slot$runtime(int group, int slotIndex) {
/*      */     int start = SlotTableKt.access$slotAnchor(this.groups, group);
/*      */     int end = (group + 1 < this.groupsSize) ? SlotTableKt.access$dataAnchor(this.groups, group + 1) : this.slots.length;
/*      */     int len = end - start;
/*      */     return ((0 <= slotIndex) ? ((slotIndex < len)) : false) ? this.slots[start + slotIndex] : Composer.Companion.getEmpty();
/*      */   }
/*      */   
/*      */   @NotNull
/*      */   public Iterable<CompositionGroup> getCompositionGroups() {
/*      */     return this;
/*      */   }
/*      */   
/*      */   @NotNull
/*      */   public Iterator<CompositionGroup> iterator() {
/*      */     return new GroupIterator(this, 0, this.groupsSize);
/*      */   }
/*      */   
/*      */   @Nullable
/*      */   public CompositionGroup find(@NotNull Object identityToFind) {
/*      */     Intrinsics.checkNotNullParameter(identityToFind, "identityToFind");
/*      */     return (new SlotTableGroup(this, 0, 0, 4, null)).find(identityToFind);
/*      */   }
/*      */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\runtime-desktop-1.7.3.jar!\androidx\compose\runtime\SlotTable.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */