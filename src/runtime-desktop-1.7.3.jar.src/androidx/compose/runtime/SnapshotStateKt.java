/* 1 */ package androidx.compose.runtime;@Metadata(mv = {1, 9, 0}, k = 4, xi = 48, d1 = {"androidx/compose/runtime/SnapshotStateKt__DerivedStateKt", "androidx/compose/runtime/SnapshotStateKt__ProduceStateKt", "androidx/compose/runtime/SnapshotStateKt__SnapshotFlowKt", "androidx/compose/runtime/SnapshotStateKt__SnapshotMutationPolicyKt", "androidx/compose/runtime/SnapshotStateKt__SnapshotStateKt"}) public final class SnapshotStateKt { @StateFactoryMarker @NotNull public static final <T> State<T> derivedStateOf(@NotNull Function0<? extends T> calculation) { return SnapshotStateKt__DerivedStateKt.derivedStateOf(calculation); } @StateFactoryMarker @NotNull public static final <T> State<T> derivedStateOf(@NotNull SnapshotMutationPolicy<T> policy, @NotNull Function0<? extends T> calculation) { return SnapshotStateKt__DerivedStateKt.derivedStateOf(policy, calculation); } @NotNull public static final MutableVector<DerivedStateObserver> derivedStateObservers() { return SnapshotStateKt__DerivedStateKt.derivedStateObservers(); } public static final <R> void observeDerivedStateRecalculations(@NotNull DerivedStateObserver observer, @NotNull Function0<?> block) { SnapshotStateKt__DerivedStateKt.observeDerivedStateRecalculations(observer, block); } @Composable @NotNull public static final <T> State<T> produceState(Object initialValue, @NotNull Function2<? super ProduceStateScope<T>, ? super Continuation<? super Unit>, ? extends Object> producer, @Nullable Composer $composer, int $changed) { return SnapshotStateKt__ProduceStateKt.produceState((T)initialValue, producer, $composer, $changed); } @Composable @NotNull public static final <T> State<T> produceState(Object initialValue, @Nullable Object key1, @NotNull Function2<? super ProduceStateScope<T>, ? super Continuation<? super Unit>, ? extends Object> producer, @Nullable Composer $composer, int $changed) { return SnapshotStateKt__ProduceStateKt.produceState((T)initialValue, key1, producer, $composer, $changed); } @Composable @NotNull public static final <T> State<T> produceState(Object initialValue, @Nullable Object key1, @Nullable Object key2, @NotNull Function2<? super ProduceStateScope<T>, ? super Continuation<? super Unit>, ? extends Object> producer, @Nullable Composer $composer, int $changed) { return SnapshotStateKt__ProduceStateKt.produceState((T)initialValue, key1, key2, producer, $composer, $changed); } @Composable @NotNull public static final <T> State<T> produceState(Object initialValue, @Nullable Object key1, @Nullable Object key2, @Nullable Object key3, @NotNull Function2<? super ProduceStateScope<T>, ? super Continuation<? super Unit>, ? extends Object> producer, @Nullable Composer $composer, int $changed) { return SnapshotStateKt__ProduceStateKt.produceState((T)initialValue, key1, key2, key3, producer, $composer, $changed); } @Composable @NotNull public static final <T> State<T> produceState(Object initialValue, @NotNull Object[] keys, @NotNull Function2<? super ProduceStateScope<T>, ? super Continuation<? super Unit>, ? extends Object> producer, @Nullable Composer $composer, int $changed) { return SnapshotStateKt__ProduceStateKt.produceState((T)initialValue, keys, producer, $composer, $changed); } @Composable @NotNull public static final <T> State<T> collectAsState(@NotNull StateFlow<? extends T> $this$collectAsState, @Nullable CoroutineContext context, @Nullable Composer $composer, int $changed, int paramInt1) { return SnapshotStateKt__SnapshotFlowKt.collectAsState($this$collectAsState, context, $composer, $changed, paramInt1); } @Composable @NotNull public static final <T extends R, R> State<R> collectAsState(@NotNull Flow<? extends R> $this$collectAsState, Object initial, @Nullable CoroutineContext context, @Nullable Composer $composer, int $changed, int paramInt1) { return SnapshotStateKt__SnapshotFlowKt.collectAsState($this$collectAsState, (R)initial, context, $composer, $changed, paramInt1); } @NotNull public static final <T> Flow<T> snapshotFlow(@NotNull Function0<? extends T> block) { return SnapshotStateKt__SnapshotFlowKt.snapshotFlow(block); } @NotNull public static final <T> SnapshotMutationPolicy<T> referentialEqualityPolicy() { return SnapshotStateKt__SnapshotMutationPolicyKt.referentialEqualityPolicy(); } @NotNull public static final <T> SnapshotMutationPolicy<T> structuralEqualityPolicy() { return SnapshotStateKt__SnapshotMutationPolicyKt.structuralEqualityPolicy(); } @NotNull public static final <T> SnapshotMutationPolicy<T> neverEqualPolicy() { return SnapshotStateKt__SnapshotMutationPolicyKt.neverEqualPolicy(); } @StateFactoryMarker @NotNull public static final <T> MutableState<T> mutableStateOf(Object value, @NotNull SnapshotMutationPolicy<T> policy) { return SnapshotStateKt__SnapshotStateKt.mutableStateOf((T)value, policy); } public static final <T> T getValue(@NotNull State<? extends T> $this$getValue, @Nullable Object thisObj, @NotNull KProperty<?> property) { return SnapshotStateKt__SnapshotStateKt.getValue($this$getValue, thisObj, property); } public static final <T> void setValue(@NotNull MutableState $this$setValue, @Nullable Object thisObj, @NotNull KProperty<?> property, Object value) { SnapshotStateKt__SnapshotStateKt.setValue($this$setValue, thisObj, property, value); } @StateFactoryMarker @NotNull public static final <T> SnapshotStateList<T> mutableStateListOf() { return SnapshotStateKt__SnapshotStateKt.mutableStateListOf(); } @StateFactoryMarker @NotNull public static final <T> SnapshotStateList<T> mutableStateListOf(@NotNull Object... elements) { return SnapshotStateKt__SnapshotStateKt.mutableStateListOf((T[])elements); } @NotNull public static final <T> SnapshotStateList<T> toMutableStateList(@NotNull Collection<? extends T> $this$toMutableStateList) { return SnapshotStateKt__SnapshotStateKt.toMutableStateList($this$toMutableStateList); } @StateFactoryMarker @NotNull public static final <K, V> SnapshotStateMap<K, V> mutableStateMapOf() { return SnapshotStateKt__SnapshotStateKt.mutableStateMapOf(); } @StateFactoryMarker @NotNull public static final <K, V> SnapshotStateMap<K, V> mutableStateMapOf(@NotNull Pair... pairs) { return SnapshotStateKt__SnapshotStateKt.mutableStateMapOf((Pair<? extends K, ? extends V>[])pairs); } @NotNull public static final <K, V> SnapshotStateMap<K, V> toMutableStateMap(@NotNull Iterable<? extends Pair<? extends K, ? extends V>> $this$toMutableStateMap) { return SnapshotStateKt__SnapshotStateKt.toMutableStateMap($this$toMutableStateMap); } @Composable @NotNull public static final <T> State<T> rememberUpdatedState(Object newValue, @Nullable Composer $composer, int $changed) { return SnapshotStateKt__SnapshotStateKt.rememberUpdatedState((T)newValue, $composer, $changed); }
/*   */    }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\runtime-desktop-1.7.3.jar!\androidx\compose\runtime\SnapshotStateKt.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */