/*      */ package androidx.compose.runtime.snapshots;
/*      */ 
/*      */ import androidx.collection.MutableScatterSet;
/*      */ import androidx.compose.runtime.ActualJvm_jvmKt;
/*      */ import androidx.compose.runtime.ExperimentalComposeApi;
/*      */ import androidx.compose.runtime.InternalComposeApi;
/*      */ import androidx.compose.runtime.SynchronizedObject;
/*      */ import androidx.compose.runtime.internal.StabilityInferred;
/*      */ import kotlin.Metadata;
/*      */ import kotlin.PublishedApi;
/*      */ import kotlin.Unit;
/*      */ import kotlin.collections.CollectionsKt;
/*      */ import kotlin.jvm.functions.Function0;
/*      */ import kotlin.jvm.functions.Function1;
/*      */ import kotlin.jvm.functions.Function2;
/*      */ import kotlin.jvm.internal.DefaultConstructorMarker;
/*      */ import kotlin.jvm.internal.InlineMarker;
/*      */ import kotlin.jvm.internal.Intrinsics;
/*      */ import kotlin.jvm.internal.SourceDebugExtension;
/*      */ import org.jetbrains.annotations.NotNull;
/*      */ import org.jetbrains.annotations.Nullable;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000R\n\002\030\002\n\002\020\000\n\000\n\002\020\b\n\000\n\002\030\002\n\002\b\002\n\002\020\013\n\002\b\020\n\002\030\002\n\002\030\002\n\002\b\006\n\002\030\002\n\002\020\002\n\002\b\026\n\002\030\002\n\002\b\033\n\002\030\002\n\002\030\002\n\002\030\002\n\002\030\002\n\000\b7\030\000 T2\0020\001:\001TB\027\b\004\022\006\020\002\032\0020\003\022\006\020\004\032\0020\005¢\006\002\020\006J\r\0201\032\0020\"H\000¢\006\002\b2J\r\0203\032\0020\"H\020¢\006\002\b4J\b\0205\032\0020\"H\026J%\0206\032\002H7\"\004\b\000\02072\f\0208\032\b\022\004\022\002H709H\bø\001\000¢\006\002\020:J\b\020;\032\0020\bH&J\n\020<\032\004\030\0010\000H\021J\025\020=\032\0020\"2\006\020>\032\0020\000H ¢\006\002\b?J\025\020@\032\0020\"2\006\020>\032\0020\000H ¢\006\002\bAJ\r\020B\032\0020\"H ¢\006\002\bCJ\025\020D\032\0020\"2\006\020E\032\0020\032H ¢\006\002\bFJ\r\020G\032\0020\"H\000¢\006\002\bHJ\r\020I\032\0020\"H\020¢\006\002\bJJ\022\020K\032\0020\"2\b\020>\032\004\030\0010\000H\021J \020L\032\0020\0002\026\b\002\020 \032\020\022\004\022\0020\001\022\004\022\0020\"\030\0010!H&J\r\020M\032\0020\003H\000¢\006\002\bNJ\n\020O\032\004\030\0010\000H\007J\022\020P\032\0020\"2\b\020Q\032\004\030\0010\000H\007J\r\020R\032\0020\"H\000¢\006\002\bSR\032\020\007\032\0020\bX\016¢\006\016\n\000\032\004\b\t\020\n\"\004\b\013\020\fR$\020\002\032\0020\0032\006\020\r\032\0020\003@PX\016¢\006\016\n\000\032\004\b\016\020\017\"\004\b\020\020\021R\032\020\004\032\0020\005X\016¢\006\016\n\000\032\004\b\022\020\023\"\004\b\024\020\025R\025\020\026\032\0020\b8À\002X\004¢\006\006\032\004\b\027\020\nR\032\020\030\032\n\022\004\022\0020\032\030\0010\031X \004¢\006\006\032\004\b\033\020\034R\024\020\035\032\0020\003X\016¢\006\b\n\000\022\004\b\036\020\037R(\020 \032\020\022\004\022\0020\001\022\004\022\0020\"\030\0010!8 X¡\004¢\006\f\022\004\b#\020\037\032\004\b$\020%R\022\020&\032\0020\bX¦\004¢\006\006\032\004\b'\020\nR\022\020(\032\0020\000X¦\004¢\006\006\032\004\b)\020*R$\020,\032\0020\0032\006\020+\032\0020\0038P@PX\016¢\006\f\032\004\b-\020\017\"\004\b.\020\021R \020/\032\020\022\004\022\0020\001\022\004\022\0020\"\030\0010!X \004¢\006\006\032\004\b0\020%\001\004UVWX\002\007\n\005\b20\001¨\006Y"}, d2 = {"Landroidx/compose/runtime/snapshots/Snapshot;", "", "id", "", "invalid", "Landroidx/compose/runtime/snapshots/SnapshotIdSet;", "(ILandroidx/compose/runtime/snapshots/SnapshotIdSet;)V", "disposed", "", "getDisposed$runtime", "()Z", "setDisposed$runtime", "(Z)V", "<set-?>", "getId", "()I", "setId$runtime", "(I)V", "getInvalid$runtime", "()Landroidx/compose/runtime/snapshots/SnapshotIdSet;", "setInvalid$runtime", "(Landroidx/compose/runtime/snapshots/SnapshotIdSet;)V", "isPinned", "isPinned$runtime", "modified", "Landroidx/collection/MutableScatterSet;", "Landroidx/compose/runtime/snapshots/StateObject;", "getModified$runtime", "()Landroidx/collection/MutableScatterSet;", "pinningTrackingHandle", "getPinningTrackingHandle$annotations", "()V", "readObserver", "Lkotlin/Function1;", "", "getReadObserver$annotations", "getReadObserver", "()Lkotlin/jvm/functions/Function1;", "readOnly", "getReadOnly", "root", "getRoot", "()Landroidx/compose/runtime/snapshots/Snapshot;", "value", "writeCount", "getWriteCount$runtime", "setWriteCount$runtime", "writeObserver", "getWriteObserver$runtime", "closeAndReleasePinning", "closeAndReleasePinning$runtime", "closeLocked", "closeLocked$runtime", "dispose", "enter", "T", "block", "Lkotlin/Function0;", "(Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "hasPendingChanges", "makeCurrent", "nestedActivated", "snapshot", "nestedActivated$runtime", "nestedDeactivated", "nestedDeactivated$runtime", "notifyObjectsInitialized", "notifyObjectsInitialized$runtime", "recordModified", "state", "recordModified$runtime", "releasePinnedSnapshotLocked", "releasePinnedSnapshotLocked$runtime", "releasePinnedSnapshotsForCloseLocked", "releasePinnedSnapshotsForCloseLocked$runtime", "restoreCurrent", "takeNestedSnapshot", "takeoverPinnedSnapshot", "takeoverPinnedSnapshot$runtime", "unsafeEnter", "unsafeLeave", "oldSnapshot", "validateNotDisposed", "validateNotDisposed$runtime", "Companion", "Landroidx/compose/runtime/snapshots/MutableSnapshot;", "Landroidx/compose/runtime/snapshots/NestedReadonlySnapshot;", "Landroidx/compose/runtime/snapshots/ReadonlySnapshot;", "Landroidx/compose/runtime/snapshots/TransparentObserverSnapshot;", "runtime"})
/*      */ @StabilityInferred(parameters = 0)
/*      */ @SourceDebugExtension({"SMAP\nSnapshot.kt\nKotlin\n*S Kotlin\n*F\n+ 1 Snapshot.kt\nandroidx/compose/runtime/snapshots/Snapshot\n+ 2 Snapshot.kt\nandroidx/compose/runtime/snapshots/SnapshotKt\n+ 3 SynchronizedObject.jvm.kt\nandroidx/compose/runtime/ActualJvm_jvmKt__SynchronizedObject_jvmKt\n+ 4 Preconditions.kt\nandroidx/compose/runtime/PreconditionsKt\n+ 5 fake.kt\nkotlin/jvm/internal/FakeKt\n*L\n1#1,2432:1\n1844#2:2433\n1844#2:2442\n26#3:2434\n26#3:2443\n50#4,7:2435\n33#4,7:2444\n1#5:2451\n*S KotlinDebug\n*F\n+ 1 Snapshot.kt\nandroidx/compose/runtime/snapshots/Snapshot\n*L\n101#1:2433\n252#1:2442\n101#1:2434\n252#1:2443\n187#1:2435,7\n281#1:2444,7\n*E\n"})
/*      */ public abstract class Snapshot
/*      */ {
/*      */   @NotNull
/*      */   public static final Companion Companion = new Companion(null);
/*      */   @NotNull
/*      */   private SnapshotIdSet invalid;
/*      */   private int id;
/*      */   private boolean disposed;
/*      */   private int pinningTrackingHandle;
/*      */   public static final int $stable = 8;
/*      */   public static final int PreexistingSnapshotId = 1;
/*      */   
/*      */   private Snapshot(int id, SnapshotIdSet invalid) {
/*   67 */     this.invalid = invalid;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*   73 */     this.id = id;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/*  200 */     this.pinningTrackingHandle = (id != 0) ? SnapshotKt.trackPinning(id, getInvalid$runtime()) : -1;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   @NotNull
/*      */   public SnapshotIdSet getInvalid$runtime() {
/*      */     return this.invalid;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setInvalid$runtime(@NotNull SnapshotIdSet <set-?>) {
/*      */     Intrinsics.checkNotNullParameter(<set-?>, "<set-?>");
/*      */     this.invalid = <set-?>;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int getId() {
/*      */     return this.id;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setId$runtime(int <set-?>) {
/*      */     this.id = <set-?>;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int getWriteCount$runtime() {
/*      */     return 0;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void setWriteCount$runtime(int value) {
/*      */     throw new IllegalStateException("Updating write count is not supported for this snapshot".toString());
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public void dispose() {
/*      */     this.disposed = true;
/*      */     int $i$f$sync = 0;
/* 2433 */     SynchronizedObject lock$iv$iv = SnapshotKt.getLock(); int $i$f$synchronized = 0;
/* 2434 */     synchronized (lock$iv$iv) { int $i$a$-sync-Snapshot$dispose$1 = 0; releasePinnedSnapshotLocked$runtime(); Unit unit = Unit.INSTANCE; } 
/*      */   } public final <T> T enter(@NotNull Function0 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$enter = 0; Snapshot previous = makeCurrent(); try { return (T)block.invoke(); } finally { InlineMarker.finallyStart(1); restoreCurrent(previous); InlineMarker.finallyEnd(1); }  } @PublishedApi @Nullable public Snapshot makeCurrent() { Snapshot previous = (Snapshot)SnapshotKt.access$getThreadSnapshot$p().get(); SnapshotKt.access$getThreadSnapshot$p().set(this); return previous; }
/*      */   @PublishedApi public void restoreCurrent(@Nullable Snapshot snapshot) { SnapshotKt.access$getThreadSnapshot$p().set(snapshot); }
/*      */   @ExperimentalComposeApi @Nullable public final Snapshot unsafeEnter() { return makeCurrent(); }
/*      */   @ExperimentalComposeApi public final void unsafeLeave(@Nullable Snapshot oldSnapshot) { // Byte code:
/*      */     //   0: invokestatic access$getThreadSnapshot$p : ()Landroidx/compose/runtime/SnapshotThreadLocal;
/*      */     //   3: invokevirtual get : ()Ljava/lang/Object;
/*      */     //   6: aload_0
/*      */     //   7: if_acmpne -> 14
/*      */     //   10: iconst_1
/*      */     //   11: goto -> 15
/*      */     //   14: iconst_0
/*      */     //   15: istore_2
/*      */     //   16: iconst_0
/*      */     //   17: istore_3
/*      */     //   18: nop
/*      */     //   19: iload_2
/*      */     //   20: ifne -> 53
/*      */     //   23: iconst_0
/*      */     //   24: istore #4
/*      */     //   26: new java/lang/StringBuilder
/*      */     //   29: dup
/*      */     //   30: invokespecial <init> : ()V
/*      */     //   33: ldc 'Cannot leave snapshot; '
/*      */     //   35: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   38: aload_0
/*      */     //   39: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
/*      */     //   42: ldc ' is not the current snapshot'
/*      */     //   44: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*      */     //   47: invokevirtual toString : ()Ljava/lang/String;
/*      */     //   50: invokestatic throwIllegalStateException : (Ljava/lang/String;)V
/*      */     //   53: nop
/*      */     //   54: aload_0
/*      */     //   55: aload_1
/*      */     //   56: invokevirtual restoreCurrent : (Landroidx/compose/runtime/snapshots/Snapshot;)V
/*      */     //   59: return
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #187	-> 0
/*      */     //   #2435	-> 18
/*      */     //   #2438	-> 19
/*      */     //   #2439	-> 23
/*      */     //   #188	-> 26
/*      */     //   #2439	-> 50
/*      */     //   #2441	-> 53
/*      */     //   #190	-> 54
/*      */     //   #191	-> 59
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   26	24	4	$i$a$-checkPrecondition-Snapshot$unsafeLeave$1	I
/*      */     //   18	36	3	$i$f$checkPrecondition	I
/*      */     //   16	38	2	value$iv	Z
/*      */     //   0	60	0	this	Landroidx/compose/runtime/snapshots/Snapshot;
/*      */     //   0	60	1	oldSnapshot	Landroidx/compose/runtime/snapshots/Snapshot; }
/*      */   public final boolean getDisposed$runtime() { return this.disposed; }
/*      */   public final void setDisposed$runtime(boolean <set-?>) { this.disposed = <set-?>; }
/*      */   public final boolean isPinned$runtime() { int $i$f$isPinned$runtime = 0; return (this.pinningTrackingHandle >= 0); }
/* 2442 */   public final void closeAndReleasePinning$runtime() { int $i$f$sync = 0; SynchronizedObject lock$iv$iv = SnapshotKt.getLock(); int $i$f$synchronized = 0;
/* 2443 */     synchronized (lock$iv$iv) { int $i$a$-sync-Snapshot$closeAndReleasePinning$1 = 0; closeLocked$runtime(); releasePinnedSnapshotsForCloseLocked$runtime(); Unit unit = Unit.INSTANCE; }
/*      */      }
/*      */   public void closeLocked$runtime() { SnapshotKt.access$setOpenSnapshots$p(SnapshotKt.access$getOpenSnapshots$p().clear(getId())); }
/*      */   public void releasePinnedSnapshotsForCloseLocked$runtime() { releasePinnedSnapshotLocked$runtime(); }
/*      */   public final void validateNotDisposed$runtime() { // Byte code:
/*      */     //   0: aload_0
/*      */     //   1: getfield disposed : Z
/*      */     //   4: ifne -> 11
/*      */     //   7: iconst_1
/*      */     //   8: goto -> 12
/*      */     //   11: iconst_0
/*      */     //   12: istore_1
/*      */     //   13: iconst_0
/*      */     //   14: istore_2
/*      */     //   15: nop
/*      */     //   16: iload_1
/*      */     //   17: ifne -> 27
/*      */     //   20: iconst_0
/*      */     //   21: istore_3
/*      */     //   22: ldc 'Cannot use a disposed snapshot'
/*      */     //   24: invokestatic throwIllegalArgumentException : (Ljava/lang/String;)V
/*      */     //   27: nop
/*      */     //   28: return
/*      */     // Line number table:
/*      */     //   Java source line number -> byte code offset
/*      */     //   #281	-> 0
/*      */     //   #2444	-> 15
/*      */     //   #2447	-> 16
/*      */     //   #2448	-> 20
/*      */     //   #281	-> 22
/*      */     //   #2448	-> 24
/*      */     //   #2450	-> 27
/*      */     //   #282	-> 28
/*      */     // Local variable table:
/*      */     //   start	length	slot	name	descriptor
/*      */     //   22	2	3	$i$a$-requirePrecondition-Snapshot$validateNotDisposed$1	I
/*      */     //   15	13	2	$i$f$requirePrecondition	I
/*      */     //   13	15	1	value$iv	Z
/*      */     //   0	29	0	this	Landroidx/compose/runtime/snapshots/Snapshot; }
/*      */   public final void releasePinnedSnapshotLocked$runtime() { if (this.pinningTrackingHandle >= 0) {
/*      */       SnapshotKt.releasePinningLocked(this.pinningTrackingHandle); this.pinningTrackingHandle = -1;
/*      */     }  } @NotNull public abstract Snapshot getRoot(); public abstract boolean getReadOnly(); @NotNull public abstract Snapshot takeNestedSnapshot(@Nullable Function1<Object, Unit> paramFunction1); public abstract boolean hasPendingChanges(); @Nullable public abstract Function1<Object, Unit> getReadObserver(); @Nullable public abstract Function1<Object, Unit> getWriteObserver$runtime(); public final int takeoverPinnedSnapshot$runtime() { int i = this.pinningTrackingHandle, it = i;
/* 2451 */     int $i$a$-also-Snapshot$takeoverPinnedSnapshot$1 = 0; this.pinningTrackingHandle = -1; return i; } public abstract void nestedActivated$runtime(@NotNull Snapshot paramSnapshot); public abstract void nestedDeactivated$runtime(@NotNull Snapshot paramSnapshot); public abstract void recordModified$runtime(@NotNull StateObject paramStateObject); @Nullable public abstract MutableScatterSet<StateObject> getModified$runtime(); public abstract void notifyObjectsInitialized$runtime(); @Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\000l\n\002\030\002\n\002\020\000\n\002\b\002\n\002\020\b\n\002\b\002\n\002\030\002\n\002\b\006\n\002\020\013\n\002\b\003\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\005\n\002\030\002\n\002\b\004\n\002\020\002\n\002\b\002\n\002\030\002\n\002\b\004\n\002\030\002\n\000\n\002\030\002\n\002\020\"\n\002\b\007\n\002\030\002\n\002\b\004\n\002\030\002\n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002J\b\020\027\032\0020\007H\001J%\020\030\032\002H\031\"\004\b\000\020\0312\f\020\032\032\b\022\004\022\002H\0310\033H\bø\001\000¢\006\002\020\034J\022\020\035\032\0020\0072\b\020\036\032\004\030\0010\007H\001J\006\020\037\032\0020 JO\020!\032\002H\031\"\004\b\000\020\0312\026\b\002\020\"\032\020\022\004\022\0020\001\022\004\022\0020 \030\0010#2\026\b\002\020$\032\020\022\004\022\0020\001\022\004\022\0020 \030\0010#2\f\020\032\032\b\022\004\022\002H\0310\033¢\006\002\020%J\b\020&\032\0020\004H\007J&\020'\032\0020(2\036\020)\032\032\022\n\022\b\022\004\022\0020\0010+\022\004\022\0020\007\022\004\022\0020 0*J\032\020,\032\0020(2\022\020)\032\016\022\004\022\0020\001\022\004\022\0020 0#J\n\020-\032\004\030\0010\007H\001J\022\020.\032\0020 2\b\020\036\032\004\030\0010\007H\001J0\020/\032\0020 2\b\020\036\032\004\030\0010\0072\006\0200\032\0020\0072\024\020)\032\020\022\004\022\0020\001\022\004\022\0020 \030\0010#H\001J\006\0201\032\0020 J6\0202\032\002032\026\b\002\020\"\032\020\022\004\022\0020\001\022\004\022\0020 \030\0010#2\026\b\002\020$\032\020\022\004\022\0020\001\022\004\022\0020 \030\0010#J\036\0204\032\0020\0072\026\b\002\020\"\032\020\022\004\022\0020\001\022\004\022\0020 \030\0010#J%\0205\032\002H6\"\004\b\000\02062\f\020\032\032\b\022\004\022\002H60\033H\bø\001\000¢\006\002\020\034J7\0207\032\002H\031\"\004\b\000\020\0312\021\020\032\032\r\022\004\022\002H\0310\033¢\006\002\b8H\bø\001\000\002\n\n\b\b\001\022\002\020\001 \001¢\006\002\020\034R\024\020\003\032\0020\004XT¢\006\b\n\000\022\004\b\005\020\002R\021\020\006\032\0020\0078F¢\006\006\032\004\b\b\020\tR\034\020\n\032\004\030\0010\0078@X\004¢\006\f\022\004\b\013\020\002\032\004\b\f\020\tR\021\020\r\032\0020\0168F¢\006\006\032\004\b\r\020\017R\021\020\020\032\0020\0168F¢\006\006\032\004\b\020\020\017R\031\020\021\032\0020\016*\0020\0228Â\002X\004¢\006\006\032\004\b\023\020\024R\031\020\021\032\0020\016*\0020\0258Â\002X\004¢\006\006\032\004\b\023\020\026\002\007\n\005\b20\001¨\0069"}, d2 = {"Landroidx/compose/runtime/snapshots/Snapshot$Companion;", "", "()V", "PreexistingSnapshotId", "", "getPreexistingSnapshotId$annotations", "current", "Landroidx/compose/runtime/snapshots/Snapshot;", "getCurrent", "()Landroidx/compose/runtime/snapshots/Snapshot;", "currentThreadSnapshot", "getCurrentThreadSnapshot$annotations", "getCurrentThreadSnapshot", "isApplyObserverNotificationPending", "", "()Z", "isInSnapshot", "canBeReused", "Landroidx/compose/runtime/snapshots/TransparentObserverMutableSnapshot;", "getCanBeReused", "(Landroidx/compose/runtime/snapshots/TransparentObserverMutableSnapshot;)Z", "Landroidx/compose/runtime/snapshots/TransparentObserverSnapshot;", "(Landroidx/compose/runtime/snapshots/TransparentObserverSnapshot;)Z", "createNonObservableSnapshot", "global", "T", "block", "Lkotlin/Function0;", "(Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "makeCurrentNonObservable", "previous", "notifyObjectsInitialized", "", "observe", "readObserver", "Lkotlin/Function1;", "writeObserver", "(Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;", "openSnapshotCount", "registerApplyObserver", "Landroidx/compose/runtime/snapshots/ObserverHandle;", "observer", "Lkotlin/Function2;", "", "registerGlobalWriteObserver", "removeCurrent", "restoreCurrent", "restoreNonObservable", "nonObservable", "sendApplyNotifications", "takeMutableSnapshot", "Landroidx/compose/runtime/snapshots/MutableSnapshot;", "takeSnapshot", "withMutableSnapshot", "R", "withoutReadObservation", "Landroidx/compose/runtime/DisallowComposableCalls;", "runtime"}) @SourceDebugExtension({"SMAP\nSnapshot.kt\nKotlin\n*S Kotlin\n*F\n+ 1 Snapshot.kt\nandroidx/compose/runtime/snapshots/Snapshot$Companion\n+ 2 fake.kt\nkotlin/jvm/internal/FakeKt\n+ 3 Snapshot.kt\nandroidx/compose/runtime/snapshots/Snapshot\n+ 4 Snapshot.kt\nandroidx/compose/runtime/snapshots/SnapshotKt\n+ 5 SynchronizedObject.jvm.kt\nandroidx/compose/runtime/ActualJvm_jvmKt__SynchronizedObject_jvmKt\n*L\n1#1,2432:1\n548#1:2439\n548#1:2445\n551#1:2446\n1#2:2433\n139#3,5:2434\n139#3,5:2440\n1844#4:2447\n1844#4:2449\n1844#4:2451\n1844#4:2453\n1844#4:2455\n26#5:2448\n26#5:2450\n26#5:2452\n26#5:2454\n26#5:2456\n*S KotlinDebug\n*F\n+ 1 Snapshot.kt\nandroidx/compose/runtime/snapshots/Snapshot$Companion\n*L\n494#1:2439\n556#1:2445\n560#1:2446\n463#1:2434,5\n530#1:2440,5\n624#1:2447\n651#1:2449\n689#1:2451\n628#1:2453\n656#1:2455\n624#1:2448\n651#1:2450\n689#1:2452\n628#1:2454\n656#1:2456\n*E\n"}) public static final class Companion
/*      */   {
/* 2453 */     private Companion() {} @NotNull public final Snapshot getCurrent() { return SnapshotKt.currentSnapshot(); } public final boolean isInSnapshot() { return (SnapshotKt.access$getThreadSnapshot$p().get() != null); } public final boolean isApplyObserverNotificationPending() { return (SnapshotKt.access$getPendingApplyObserverCount$p().get() > 0); } @NotNull public final Snapshot takeSnapshot(@Nullable Function1<Object, Unit> readObserver) { return SnapshotKt.currentSnapshot().takeNestedSnapshot(readObserver); } @NotNull public final MutableSnapshot takeMutableSnapshot(@Nullable Function1<Object, Unit> readObserver, @Nullable Function1<Object, Unit> writeObserver) { Snapshot snapshot = SnapshotKt.currentSnapshot(); if (((snapshot instanceof MutableSnapshot) ? snapshot : null) == null || ((snapshot instanceof MutableSnapshot) ? snapshot : null).takeNestedMutableSnapshot(readObserver, writeObserver) == null) { ((snapshot instanceof MutableSnapshot) ? snapshot : null).takeNestedMutableSnapshot(readObserver, writeObserver); throw new IllegalStateException("Cannot create a mutable snapshot of an read-only snapshot".toString()); }  return ((snapshot instanceof MutableSnapshot) ? snapshot : null).takeNestedMutableSnapshot(readObserver, writeObserver); } public final <T> T global(@NotNull Function0 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$global = 0; Snapshot previous = removeCurrent(); Object object1 = block.invoke(), it = object1; int $i$a$-also-Snapshot$Companion$global$1 = 0; Snapshot.Companion.restoreCurrent(previous); return (T)object1; } public final <R> R withMutableSnapshot(@NotNull Function0 block) { Object object; Intrinsics.checkNotNullParameter(block, "block"); int $i$f$withMutableSnapshot = 0; MutableSnapshot $this$withMutableSnapshot_u24lambda_u242 = takeMutableSnapshot$default(this, null, null, 3, null); int $i$a$-run-Snapshot$Companion$withMutableSnapshot$1 = 0; try { Snapshot this_$iv = $this$withMutableSnapshot_u24lambda_u242; int $i$f$enter = 0; Snapshot previous$iv = this_$iv.makeCurrent(); try { Object object1 = block.invoke(); } finally { InlineMarker.finallyStart(1); this_$iv.restoreCurrent(previous$iv); InlineMarker.finallyEnd(1); }  object = object1; Object it = object; int $i$a$-also-Snapshot$Companion$withMutableSnapshot$1$1 = 0; $this$withMutableSnapshot_u24lambda_u242.apply().check(); object = object; } finally { InlineMarker.finallyStart(1); $this$withMutableSnapshot_u24lambda_u242.dispose(); InlineMarker.finallyEnd(1); }  return (R)object; } public final <T> T observe(@Nullable Function1<Object, Unit> readObserver, @Nullable Function1<Object, Unit> writeObserver, @NotNull Function0 block) { Intrinsics.checkNotNullParameter(block, "block"); if (readObserver == null && writeObserver == null) return (T)block.invoke();  Snapshot previous = (Snapshot)SnapshotKt.access$getThreadSnapshot$p().get(); if (previous instanceof TransparentObserverMutableSnapshot) { Companion companion = this; TransparentObserverMutableSnapshot $this$canBeReused$iv = (TransparentObserverMutableSnapshot)previous; int $i$f$getCanBeReused = 0; if (($this$canBeReused$iv.getThreadId$runtime() == ActualJvm_jvmKt.currentThreadId())) { Function1<Object, Unit> previousReadObserver = ((TransparentObserverMutableSnapshot)previous).getReadObserver$runtime(); Function1<Object, Unit> previousWriteObserver = ((TransparentObserverMutableSnapshot)previous).getWriteObserver$runtime(); try { ((TransparentObserverMutableSnapshot)previous).setReadObserver(SnapshotKt.mergedReadObserver$default(readObserver, previousReadObserver, false, 4, null)); ((TransparentObserverMutableSnapshot)previous).setWriteObserver(SnapshotKt.access$mergedWriteObserver(writeObserver, previousWriteObserver)); return (T)block.invoke(); } finally { ((TransparentObserverMutableSnapshot)previous).setReadObserver(previousReadObserver); ((TransparentObserverMutableSnapshot)previous).setWriteObserver(previousWriteObserver); }  }  }  if (readObserver == null) return (T)block.invoke();  Snapshot snapshot = (previous == null || previous instanceof MutableSnapshot) ? new TransparentObserverMutableSnapshot((previous instanceof MutableSnapshot) ? (MutableSnapshot)previous : null, readObserver, writeObserver, true, false) : previous.takeNestedSnapshot(readObserver); try { Snapshot this_$iv = snapshot; int $i$f$enter = 0; Snapshot previous$iv = this_$iv.makeCurrent(); try { Object object = block.invoke(); } finally { this_$iv.restoreCurrent(previous$iv); }  return (T)object; } finally { snapshot.dispose(); }  } @PublishedApi @NotNull public final Snapshot createNonObservableSnapshot() { return SnapshotKt.createTransparentSnapshotWithNoParentReadObserver$default((Snapshot)SnapshotKt.access$getThreadSnapshot$p().get(), null, false, 6, null); } @Nullable public final Snapshot getCurrentThreadSnapshot() { return (Snapshot)SnapshotKt.access$getThreadSnapshot$p().get(); } private final boolean getCanBeReused(TransparentObserverMutableSnapshot $this$canBeReused) { int $i$f$getCanBeReused = 0; return ($this$canBeReused.getThreadId$runtime() == ActualJvm_jvmKt.currentThreadId()); } private final boolean getCanBeReused(TransparentObserverSnapshot $this$canBeReused) { int $i$f$getCanBeReused = 0; return ($this$canBeReused.getThreadId$runtime() == ActualJvm_jvmKt.currentThreadId()); } @PublishedApi @NotNull public final Snapshot makeCurrentNonObservable(@Nullable Snapshot previous) { if (previous instanceof TransparentObserverMutableSnapshot) { Companion companion = this; TransparentObserverMutableSnapshot $this$canBeReused$iv = (TransparentObserverMutableSnapshot)previous; int $i$f$getCanBeReused = 0; if (($this$canBeReused$iv.getThreadId$runtime() == ActualJvm_jvmKt.currentThreadId())) ((TransparentObserverMutableSnapshot)previous).setReadObserver(null);  }  if (previous instanceof TransparentObserverSnapshot) { Companion this_$iv = this; TransparentObserverSnapshot $this$canBeReused$iv = (TransparentObserverSnapshot)previous; int $i$f$getCanBeReused = 0; if (($this$canBeReused$iv.getThreadId$runtime() == ActualJvm_jvmKt.currentThreadId())) ((TransparentObserverSnapshot)previous).setReadObserver(null);  }  Snapshot snapshot = SnapshotKt.createTransparentSnapshotWithNoParentReadObserver$default(previous, null, false, 6, null); snapshot.makeCurrent(); return snapshot; } @PublishedApi public final void restoreNonObservable(@Nullable Snapshot previous, @NotNull Snapshot nonObservable, @Nullable Function1<Object, Unit> observer) { Intrinsics.checkNotNullParameter(nonObservable, "nonObservable"); if (previous == nonObservable) { Snapshot snapshot = previous; if (snapshot instanceof TransparentObserverMutableSnapshot) { ((TransparentObserverMutableSnapshot)previous).setReadObserver(observer); } else if (snapshot instanceof TransparentObserverSnapshot) { ((TransparentObserverSnapshot)previous).setReadObserver(observer); } else { throw new IllegalStateException(("Non-transparent snapshot was reused: " + previous).toString()); }  } else { nonObservable.restoreCurrent(previous); nonObservable.dispose(); }  } public final <T> T withoutReadObservation(@NotNull Function0 block) { Intrinsics.checkNotNullParameter(block, "block"); int $i$f$withoutReadObservation = 0; Snapshot previousSnapshot = getCurrentThreadSnapshot(); Function1<Object, Unit> observer = (previousSnapshot != null) ? previousSnapshot.getReadObserver() : null; Snapshot newSnapshot = makeCurrentNonObservable(previousSnapshot); try { return (T)block.invoke(); } finally { InlineMarker.finallyStart(1); restoreNonObservable(previousSnapshot, newSnapshot, observer); InlineMarker.finallyEnd(1); }  } @NotNull public final ObserverHandle registerApplyObserver(@NotNull Function2 observer) { Intrinsics.checkNotNullParameter(observer, "observer"); SnapshotKt.access$advanceGlobalSnapshot(SnapshotKt.access$getEmptyLambda$p()); int $i$f$sync = 0; SynchronizedObject lock$iv$iv = SnapshotKt.getLock(); int $i$f$synchronized = 0; synchronized (lock$iv$iv) { int $i$a$-sync-Snapshot$Companion$registerApplyObserver$1 = 0; SnapshotKt.access$setApplyObservers$p(CollectionsKt.plus(SnapshotKt.access$getApplyObservers$p(), observer)); Unit unit = Unit.INSTANCE; }  return observer::registerApplyObserver$lambda$6; } private static final void registerApplyObserver$lambda$6(Function2 $observer) { Intrinsics.checkNotNullParameter($observer, "$observer"); int $i$f$sync = 0; SynchronizedObject lock$iv$iv = SnapshotKt.getLock(); int $i$f$synchronized = 0;
/* 2454 */       synchronized (lock$iv$iv) { int $i$a$-sync-Snapshot$Companion$registerApplyObserver$2$1 = 0; SnapshotKt.access$setApplyObservers$p(CollectionsKt.minus(SnapshotKt.access$getApplyObservers$p(), $observer)); Unit unit = Unit.INSTANCE; }  } @NotNull public final ObserverHandle registerGlobalWriteObserver(@NotNull Function1 observer) { Intrinsics.checkNotNullParameter(observer, "observer"); int $i$f$sync = 0; SynchronizedObject lock$iv$iv = SnapshotKt.getLock(); int $i$f$synchronized = 0; synchronized (lock$iv$iv) { int $i$a$-sync-Snapshot$Companion$registerGlobalWriteObserver$1 = 0; SnapshotKt.access$setGlobalWriteObservers$p(CollectionsKt.plus(SnapshotKt.access$getGlobalWriteObservers$p(), observer)); Unit unit = Unit.INSTANCE; }  SnapshotKt.access$advanceGlobalSnapshot(); return observer::registerGlobalWriteObserver$lambda$9; }
/* 2455 */     private static final void registerGlobalWriteObserver$lambda$9(Function1 $observer) { Intrinsics.checkNotNullParameter($observer, "$observer"); int $i$f$sync = 0; SynchronizedObject lock$iv$iv = SnapshotKt.getLock(); int $i$f$synchronized = 0;
/* 2456 */       synchronized (lock$iv$iv) { int $i$a$-sync-Snapshot$Companion$registerGlobalWriteObserver$2$1 = 0; SnapshotKt.access$setGlobalWriteObservers$p(CollectionsKt.minus(SnapshotKt.access$getGlobalWriteObservers$p(), $observer)); Unit unit = Unit.INSTANCE; }
/*      */       
/*      */       SnapshotKt.access$advanceGlobalSnapshot(); }
/*      */ 
/*      */     
/*      */     public final void notifyObjectsInitialized() {
/*      */       SnapshotKt.currentSnapshot().notifyObjectsInitialized$runtime();
/*      */     }
/*      */     
/*      */     public final void sendApplyNotifications() {
/*      */       int $i$f$sync = 0;
/*      */       SynchronizedObject lock$iv$iv = SnapshotKt.getLock();
/*      */       int $i$f$synchronized = 0;
/*      */       synchronized (lock$iv$iv) {
/*      */         int $i$a$-sync-Snapshot$Companion$sendApplyNotifications$changes$1 = 0;
/*      */         ((GlobalSnapshot)SnapshotKt.access$getCurrentGlobalSnapshot$p().get()).getModified$runtime();
/*      */         $i$a$-sync-Snapshot$Companion$sendApplyNotifications$changes$1 = (((GlobalSnapshot)SnapshotKt.access$getCurrentGlobalSnapshot$p().get()).getModified$runtime() != null) ? ((((GlobalSnapshot)SnapshotKt.access$getCurrentGlobalSnapshot$p().get()).getModified$runtime().isNotEmpty() == true) ? 1 : 0) : 0;
/*      */       } 
/*      */       int i = $i$a$-sync-Snapshot$Companion$sendApplyNotifications$changes$1;
/*      */       if (i != 0)
/*      */         SnapshotKt.access$advanceGlobalSnapshot(); 
/*      */     }
/*      */     
/*      */     @InternalComposeApi
/*      */     public final int openSnapshotCount() {
/*      */       return CollectionsKt.toList(SnapshotKt.access$getOpenSnapshots$p()).size();
/*      */     }
/*      */     
/*      */     @PublishedApi
/*      */     @Nullable
/*      */     public final Snapshot removeCurrent() {
/*      */       Snapshot previous = (Snapshot)SnapshotKt.access$getThreadSnapshot$p().get();
/*      */       if (previous != null)
/*      */         SnapshotKt.access$getThreadSnapshot$p().set(null); 
/*      */       return previous;
/*      */     }
/*      */     
/*      */     @PublishedApi
/*      */     public final void restoreCurrent(@Nullable Snapshot previous) {
/*      */       if (previous != null)
/*      */         SnapshotKt.access$getThreadSnapshot$p().set(previous); 
/*      */     }
/*      */   }
/*      */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\runtime-desktop-1.7.3.jar!\androidx\compose\runtime\snapshots\Snapshot.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */