/*   */ package ai.grazie.code.indexing.model;
/*   */ @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN)
/*   */ @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/code/indexing/model/IndexingDataStats.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/code/indexing/model/IndexingDataStats;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-indexing"})
/*   */ public final class $serializer implements GeneratedSerializer<IndexingDataStats> {
/*   */   @NotNull
/* 6 */   public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer1 = IndexingDataStats.access$get$childSerializers$cp(), arrayOfKSerializer2 = new KSerializer[15]; arrayOfKSerializer2[0] = (KSerializer)Snapshot$.serializer.INSTANCE; arrayOfKSerializer2[1] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[2] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[3] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[4] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[5] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[6] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[7] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[8] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[9] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[10] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[11] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[12] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[13] = (KSerializer)LongSerializer.INSTANCE; arrayOfKSerializer2[14] = arrayOfKSerializer1[14]; return (KSerializer<?>[])arrayOfKSerializer2; } @NotNull public IndexingDataStats deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; Snapshot snapshot = null; long l1 = 0L, l2 = 0L, l3 = 0L, l4 = 0L, l5 = 0L, l6 = 0L, l7 = 0L, l8 = 0L, l9 = 0L, l10 = 0L, l11 = 0L, l12 = 0L, l13 = 0L; List list = null; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); KSerializer[] arrayOfKSerializer = IndexingDataStats.access$get$childSerializers$cp(); if (compositeDecoder.decodeSequentially()) { snapshot = (Snapshot)compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)Snapshot$.serializer.INSTANCE, snapshot); i |= 0x1; l1 = compositeDecoder.decodeLongElement(serialDescriptor, 1); i |= 0x2; l2 = compositeDecoder.decodeLongElement(serialDescriptor, 2); i |= 0x4; l3 = compositeDecoder.decodeLongElement(serialDescriptor, 3); i |= 0x8; l4 = compositeDecoder.decodeLongElement(serialDescriptor, 4); i |= 0x10; l5 = compositeDecoder.decodeLongElement(serialDescriptor, 5); i |= 0x20; l6 = compositeDecoder.decodeLongElement(serialDescriptor, 6); i |= 0x40; l7 = compositeDecoder.decodeLongElement(serialDescriptor, 7); i |= 0x80; l8 = compositeDecoder.decodeLongElement(serialDescriptor, 8); i |= 0x100; l9 = compositeDecoder.decodeLongElement(serialDescriptor, 9); i |= 0x200; l10 = compositeDecoder.decodeLongElement(serialDescriptor, 10); i |= 0x400; l11 = compositeDecoder.decodeLongElement(serialDescriptor, 11); i |= 0x800; l12 = compositeDecoder.decodeLongElement(serialDescriptor, 12); i |= 0x1000; l13 = compositeDecoder.decodeLongElement(serialDescriptor, 13); i |= 0x2000; list = (List)compositeDecoder.decodeSerializableElement(serialDescriptor, 14, (DeserializationStrategy)arrayOfKSerializer[14], list); i |= 0x4000; } else { while (bool) { int j = compositeDecoder.decodeElementIndex(serialDescriptor); switch (j) { case -1: bool = false; continue;case 0: snapshot = (Snapshot)compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)Snapshot$.serializer.INSTANCE, snapshot); i |= 0x1; continue;case 1: l1 = compositeDecoder.decodeLongElement(serialDescriptor, 1); i |= 0x2; continue;case 2: l2 = compositeDecoder.decodeLongElement(serialDescriptor, 2); i |= 0x4; continue;case 3: l3 = compositeDecoder.decodeLongElement(serialDescriptor, 3); i |= 0x8; continue;case 4: l4 = compositeDecoder.decodeLongElement(serialDescriptor, 4); i |= 0x10; continue;case 5: l5 = compositeDecoder.decodeLongElement(serialDescriptor, 5); i |= 0x20; continue;case 6: l6 = compositeDecoder.decodeLongElement(serialDescriptor, 6); i |= 0x40; continue;case 7: l7 = compositeDecoder.decodeLongElement(serialDescriptor, 7); i |= 0x80; continue;case 8: l8 = compositeDecoder.decodeLongElement(serialDescriptor, 8); i |= 0x100; continue;case 9: l9 = compositeDecoder.decodeLongElement(serialDescriptor, 9); i |= 0x200; continue;case 10: l10 = compositeDecoder.decodeLongElement(serialDescriptor, 10); i |= 0x400; continue;case 11: l11 = compositeDecoder.decodeLongElement(serialDescriptor, 11); i |= 0x800; continue;case 12: l12 = compositeDecoder.decodeLongElement(serialDescriptor, 12); i |= 0x1000; continue;case 13: l13 = compositeDecoder.decodeLongElement(serialDescriptor, 13); i |= 0x2000; continue;case 14: list = (List)compositeDecoder.decodeSerializableElement(serialDescriptor, 14, (DeserializationStrategy)arrayOfKSerializer[14], list); i |= 0x4000; continue; }  throw new UnknownFieldException(j); }  }  compositeDecoder.endStructure(serialDescriptor); return new IndexingDataStats(i, snapshot, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, list, null); } public void serialize(@NotNull Encoder encoder, @NotNull IndexingDataStats value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); IndexingDataStats.write$Self$model_indexing(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("ai.grazie.code.indexing.model.IndexingDataStats", INSTANCE, 15); pluginGeneratedSerialDescriptor.addElement("snapshot", false); pluginGeneratedSerialDescriptor.addElement("storageSize", true); pluginGeneratedSerialDescriptor.addElement("clusterizationTime", true); pluginGeneratedSerialDescriptor.addElement("indexingTime", true); pluginGeneratedSerialDescriptor.addElement("vectorFetchingTime", true); pluginGeneratedSerialDescriptor.addElement("startupTime", true); pluginGeneratedSerialDescriptor.addElement("sourceFileCount", true); pluginGeneratedSerialDescriptor.addElement("clusterCount", true); pluginGeneratedSerialDescriptor.addElement("vectorCount", true); pluginGeneratedSerialDescriptor.addElement("embedCallCount", true); pluginGeneratedSerialDescriptor.addElement("embedMaxParallelCalls", true); pluginGeneratedSerialDescriptor.addElement("llmCallCount", true); pluginGeneratedSerialDescriptor.addElement("llmCallTotalTime", true); pluginGeneratedSerialDescriptor.addElement("llmMaxParallelCalls", true); pluginGeneratedSerialDescriptor.addElement("chunksSample", true); descriptor = pluginGeneratedSerialDescriptor; }
/*   */ 
/*   */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\model-indexing-jvm-0.4.32.jar!\ai\grazie\code\indexing\model\IndexingDataStats$$serializer.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */