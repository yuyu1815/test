/*    */ package com.intellij.ml.llm.matterhorn.configuration;@Metadata(mv = {2, 1, 0}, k = 2, xi = 48, d1 = {"\000\016\n\000\n\002\020\002\n\002\030\002\n\002\b\n\032\n\020\000\032\0020\001*\0020\002\032\n\020\003\032\0020\001*\0020\002\032\n\020\004\032\0020\001*\0020\002\032\n\020\005\032\0020\001*\0020\002\032\n\020\006\032\0020\001*\0020\002\032\n\020\007\032\0020\001*\0020\002\032\n\020\b\032\0020\001*\0020\002\032\n\020\t\032\0020\001*\0020\002\032\n\020\n\032\0020\001*\0020\002\032\n\020\013\032\0020\001*\0020\002Â¨\006\f"}, d2 = {"assertHasRedisCache", "", "Lcom/intellij/ml/llm/matterhorn/configuration/Env;", "assertHasLocalCache", "assertHasJbAI", "assertHasIngrazzio", "assertHasDirectAccess", "assertCanSendNonAnonymizedStats", "assertHasEAPLicenseAgreement", "assertHasMatterhornSettings", "assertHasMatterhornProxy", "assertMatterhornEnvironmentServerMode", "core"})
/*    */ @SourceDebugExtension({"SMAP\nEnvExtensions.kt\nKotlin\n*S Kotlin\n*F\n+ 1 EnvExtensions.kt\ncom/intellij/ml/llm/matterhorn/configuration/EnvExtensionsKt\n+ 2 fake.kt\nkotlin/jvm/internal/FakeKt\n*L\n1#1,14:1\n1#2:15\n*E\n"})
/*  3 */ public final class EnvExtensionsKt { public static final void assertHasRedisCache(@NotNull Env $this$assertHasRedisCache) { Intrinsics.checkNotNullParameter($this$assertHasRedisCache, "<this>"); boolean bool = $this$assertHasRedisCache.getHasRedisCache(); if (_Assertions.ENABLED && !bool)
/*    */     
/*    */     { 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */       
/* 15 */       int $i$a$-assert-EnvExtensionsKt$assertHasRedisCache$1 = 0; String str = "hasRedisCache is false"; throw new AssertionError(str); }  } public static final void assertHasLocalCache(@NotNull Env $this$assertHasLocalCache) { Intrinsics.checkNotNullParameter($this$assertHasLocalCache, "<this>"); boolean bool = $this$assertHasLocalCache.getHasLocalCache(); if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertHasLocalCache$1 = 0; String str = "hasLocalCache is false"; throw new AssertionError(str); }  } public static final void assertHasJbAI(@NotNull Env $this$assertHasJbAI) { Intrinsics.checkNotNullParameter($this$assertHasJbAI, "<this>"); boolean bool = $this$assertHasJbAI.getHasJbAI(); if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertHasJbAI$1 = 0; String str = "hasJbAI is false"; throw new AssertionError(str); }  } public static final void assertHasIngrazzio(@NotNull Env $this$assertHasIngrazzio) { Intrinsics.checkNotNullParameter($this$assertHasIngrazzio, "<this>"); boolean bool = $this$assertHasIngrazzio.getHasIngrazzio(); if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertHasIngrazzio$1 = 0; String str = "hasIngrazzio is false"; throw new AssertionError(str); }  } public static final void assertHasDirectAccess(@NotNull Env $this$assertHasDirectAccess) { Intrinsics.checkNotNullParameter($this$assertHasDirectAccess, "<this>"); boolean bool = $this$assertHasDirectAccess.getHasDirectAccess(); if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertHasDirectAccess$1 = 0; String str = "hasDirectAccess is false"; throw new AssertionError(str); }  } public static final void assertCanSendNonAnonymizedStats(@NotNull Env $this$assertCanSendNonAnonymizedStats) { Intrinsics.checkNotNullParameter($this$assertCanSendNonAnonymizedStats, "<this>"); boolean bool = $this$assertCanSendNonAnonymizedStats.getCanSendNonAnonymizedStats(); if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertCanSendNonAnonymizedStats$1 = 0; String str = "canSendNonAnonymizedStats is false"; throw new AssertionError(str); }  } public static final void assertHasEAPLicenseAgreement(@NotNull Env $this$assertHasEAPLicenseAgreement) { Intrinsics.checkNotNullParameter($this$assertHasEAPLicenseAgreement, "<this>"); boolean bool = $this$assertHasEAPLicenseAgreement.getHasEAPLicenseAgreement(); if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertHasEAPLicenseAgreement$1 = 0; String str = "hasEAPLicenseAgreement is false"; throw new AssertionError(str); }  } public static final void assertHasMatterhornSettings(@NotNull Env $this$assertHasMatterhornSettings) { Intrinsics.checkNotNullParameter($this$assertHasMatterhornSettings, "<this>"); boolean bool = $this$assertHasMatterhornSettings.getHasMatterhornSettings(); if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertHasMatterhornSettings$1 = 0; String str = "hasMatterhornSettings is false"; throw new AssertionError(str); }  } public static final void assertHasMatterhornProxy(@NotNull Env $this$assertHasMatterhornProxy) { Intrinsics.checkNotNullParameter($this$assertHasMatterhornProxy, "<this>"); boolean bool = ($this$assertHasMatterhornProxy.getHasIngrazzio() || $this$assertHasMatterhornProxy.getHasDirectAccess()) ? true : false; if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertHasMatterhornProxy$1 = 0; String str = "(hasIngrazzio || hasDirectAccess) is false"; throw new AssertionError(str); }  } public static final void assertMatterhornEnvironmentServerMode(@NotNull Env $this$assertMatterhornEnvironmentServerMode) { Intrinsics.checkNotNullParameter($this$assertMatterhornEnvironmentServerMode, "<this>"); boolean bool = $this$assertMatterhornEnvironmentServerMode.getMatterhornEnvironmentServerMode(); if (_Assertions.ENABLED && !bool) { int $i$a$-assert-EnvExtensionsKt$assertMatterhornEnvironmentServerMode$1 = 0;
/*    */       String str = "matterhornEnvironmentServerMode is false";
/*    */       throw new AssertionError(str); }
/*    */      }
/*    */    }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\core-llm.jar!\com\intellij\ml\llm\matterhorn\configuration\EnvExtensionsKt.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */