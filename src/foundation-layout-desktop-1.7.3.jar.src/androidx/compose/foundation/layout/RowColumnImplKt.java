/*     */ package androidx.compose.foundation.layout;
/*     */ 
/*     */ import androidx.compose.ui.layout.IntrinsicMeasurable;
/*     */ import androidx.compose.ui.layout.Placeable;
/*     */ import java.util.List;
/*     */ import kotlin.Metadata;
/*     */ import kotlin.jvm.functions.Function2;
/*     */ import kotlin.jvm.internal.Intrinsics;
/*     */ import kotlin.jvm.internal.SourceDebugExtension;
/*     */ import org.jetbrains.annotations.NotNull;
/*     */ import org.jetbrains.annotations.Nullable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ @Metadata(mv = {1, 9, 0}, k = 2, xi = 48, d1 = {"\000F\n\000\n\002\030\002\n\002\030\002\n\002\b\003\n\002\020\013\n\002\b\004\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\002\n\002\020\007\n\002\b\003\n\002\020\b\n\000\n\002\020 \n\000\n\002\030\002\n\002\030\002\n\002\b\006\032e\020\024\032\0020\0252\f\020\026\032\b\022\004\022\0020\0130\0272\035\020\030\032\031\022\004\022\0020\013\022\004\022\0020\025\022\004\022\0020\0250\031¢\006\002\b\0322\035\020\033\032\031\022\004\022\0020\013\022\004\022\0020\025\022\004\022\0020\0250\031¢\006\002\b\0322\006\020\034\032\0020\0252\006\020\035\032\0020\025H\b\032F\020\036\032\0020\0252\f\020\026\032\b\022\004\022\0020\0130\0272\035\020\030\032\031\022\004\022\0020\013\022\004\022\0020\025\022\004\022\0020\0250\031¢\006\002\b\0322\006\020\037\032\0020\0252\006\020\035\032\0020\025H\b\"\034\020\000\032\004\030\0010\001*\004\030\0010\0028@X\004¢\006\006\032\004\b\003\020\004\"\032\020\005\032\0020\006*\004\030\0010\0028@X\004¢\006\006\032\004\b\007\020\b\"\032\020\t\032\0020\006*\004\030\0010\0028@X\004¢\006\006\032\004\b\t\020\b\"\032\020\n\032\004\030\0010\002*\0020\0138@X\004¢\006\006\032\004\b\f\020\r\"\032\020\n\032\004\030\0010\002*\0020\0168@X\004¢\006\006\032\004\b\f\020\017\"\032\020\020\032\0020\021*\004\030\0010\0028@X\004¢\006\006\032\004\b\022\020\023¨\006 "}, d2 = {"crossAxisAlignment", "Landroidx/compose/foundation/layout/CrossAxisAlignment;", "Landroidx/compose/foundation/layout/RowColumnParentData;", "getCrossAxisAlignment", "(Landroidx/compose/foundation/layout/RowColumnParentData;)Landroidx/compose/foundation/layout/CrossAxisAlignment;", "fill", "", "getFill", "(Landroidx/compose/foundation/layout/RowColumnParentData;)Z", "isRelative", "rowColumnParentData", "Landroidx/compose/ui/layout/IntrinsicMeasurable;", "getRowColumnParentData", "(Landroidx/compose/ui/layout/IntrinsicMeasurable;)Landroidx/compose/foundation/layout/RowColumnParentData;", "Landroidx/compose/ui/layout/Placeable;", "(Landroidx/compose/ui/layout/Placeable;)Landroidx/compose/foundation/layout/RowColumnParentData;", "weight", "", "getWeight", "(Landroidx/compose/foundation/layout/RowColumnParentData;)F", "intrinsicCrossAxisSize", "", "children", "", "mainAxisSize", "Lkotlin/Function2;", "Lkotlin/ExtensionFunctionType;", "crossAxisSize", "mainAxisAvailable", "mainAxisSpacing", "intrinsicMainAxisSize", "crossAxisAvailable", "foundation-layout"})
/*     */ @SourceDebugExtension({"SMAP\nRowColumnImpl.kt\nKotlin\n*S Kotlin\n*F\n+ 1 RowColumnImpl.kt\nandroidx/compose/foundation/layout/RowColumnImplKt\n+ 2 ListUtils.kt\nandroidx/compose/ui/util/ListUtilsKt\n+ 3 InlineClassHelper.jvm.kt\nandroidx/compose/ui/util/InlineClassHelper_jvmKt\n*L\n1#1,723:1\n33#2,4:724\n38#2:729\n33#2,6:731\n33#2,4:738\n38#2:743\n26#3:728\n26#3:730\n26#3:737\n26#3:742\n*S KotlinDebug\n*F\n+ 1 RowColumnImpl.kt\nandroidx/compose/foundation/layout/RowColumnImplKt\n*L\n432#1:724,4\n432#1:729\n457#1:731,6\n485#1:738,4\n485#1:743\n439#1:728\n442#1:730\n482#1:737\n493#1:742\n*E\n"})
/*     */ public final class RowColumnImplKt
/*     */ {
/*     */   @Nullable
/*     */   public static final RowColumnParentData getRowColumnParentData(@NotNull IntrinsicMeasurable $this$rowColumnParentData) {
/* 302 */     Intrinsics.checkNotNullParameter($this$rowColumnParentData, "<this>"); Object object = $this$rowColumnParentData.getParentData(); return (object instanceof RowColumnParentData) ? (RowColumnParentData)object : null;
/*     */   } @Nullable
/*     */   public static final RowColumnParentData getRowColumnParentData(@NotNull Placeable $this$rowColumnParentData) {
/* 305 */     Intrinsics.checkNotNullParameter($this$rowColumnParentData, "<this>"); Object object = $this$rowColumnParentData.getParentData(); return (object instanceof RowColumnParentData) ? (RowColumnParentData)object : null;
/*     */   }
/*     */   public static final float getWeight(@Nullable RowColumnParentData $this$weight) {
/* 308 */     return ($this$weight != null) ? $this$weight.getWeight() : 0.0F;
/*     */   }
/*     */   public static final boolean getFill(@Nullable RowColumnParentData $this$fill) {
/* 311 */     return ($this$fill != null) ? $this$fill.getFill() : true;
/*     */   } @Nullable
/*     */   public static final CrossAxisAlignment getCrossAxisAlignment(@Nullable RowColumnParentData $this$crossAxisAlignment) {
/* 314 */     return ($this$crossAxisAlignment != null) ? $this$crossAxisAlignment.getCrossAxisAlignment() : null;
/*     */   }
/*     */   public static final boolean isRelative(@Nullable RowColumnParentData $this$isRelative) {
/* 317 */     getCrossAxisAlignment($this$isRelative); return (getCrossAxisAlignment($this$isRelative) != null) ? getCrossAxisAlignment($this$isRelative).isRelative$foundation_layout() : false;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private static final int intrinsicMainAxisSize(List children, Function2 mainAxisSize, int crossAxisAvailable, int mainAxisSpacing) {
/* 428 */     int $i$f$intrinsicMainAxisSize = 0; if (children.isEmpty()) return 0; 
/* 429 */     int weightUnitSpace = 0;
/* 430 */     int fixedSpace = 0;
/* 431 */     float totalWeight = 0.0F;
/* 432 */     List $this$fastForEach$iv = children; int $i$f$fastForEach = 0;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 725 */     int index$iv = 0, i = $this$fastForEach$iv.size(); if (index$iv < i) {
/* 726 */       Object item$iv = $this$fastForEach$iv.get(index$iv);
/* 727 */       IntrinsicMeasurable child = (IntrinsicMeasurable)item$iv; int $i$a$-fastForEach-RowColumnImplKt$intrinsicMainAxisSize$1 = 0; float weight = getWeight(getRowColumnParentData(child)); int size = ((Number)mainAxisSize.invoke(child, Integer.valueOf(crossAxisAvailable))).intValue();
/*     */     }  float $this$fastRoundToInt$iv = weightUnitSpace * totalWeight;
/*     */     int $i$f$fastRoundToInt = 0;
/* 730 */     return Math.round($this$fastRoundToInt$iv) + fixedSpace + (children.size() - 1) * mainAxisSpacing; } private static final int intrinsicCrossAxisSize(List children, Function2 mainAxisSize, Function2 crossAxisSize, int mainAxisAvailable, int mainAxisSpacing) { int $i$f$intrinsicCrossAxisSize = 0; if (children.isEmpty())
/*     */       return 0;  int fixedSpace = 0; fixedSpace = Math.min((children.size() - 1) * mainAxisSpacing, mainAxisAvailable); int crossAxisMax = 0; float totalWeight = 0.0F; List $this$fastForEach$iv = children; int $i$f$fastForEach = 0;
/* 732 */     int index$iv = 0, k = $this$fastForEach$iv.size(); if (index$iv < k) {
/* 733 */       Object item$iv = $this$fastForEach$iv.get(index$iv);
/* 734 */       IntrinsicMeasurable child = (IntrinsicMeasurable)item$iv; int $i$a$-fastForEach-RowColumnImplKt$intrinsicCrossAxisSize$1 = 0; float weight = getWeight(getRowColumnParentData(child));
/*     */     }  float $this$fastRoundToInt$iv = Math.max(mainAxisAvailable - fixedSpace, 0) / totalWeight;
/*     */     int $i$f$fastRoundToInt = 0;
/* 737 */     int weightUnitSpace = ((totalWeight == 0.0F)) ? 0 : ((mainAxisAvailable == Integer.MAX_VALUE) ? Integer.MAX_VALUE : Math.round($this$fastRoundToInt$iv)); List list1 = children;
/*     */     int i = 0;
/* 739 */     int j = 0, m = list1.size(); if (j < m) {
/* 740 */       Object item$iv = list1.get(j);
/* 741 */       IntrinsicMeasurable child = (IntrinsicMeasurable)item$iv; int $i$a$-fastForEach-RowColumnImplKt$intrinsicCrossAxisSize$2 = 0;
/*     */       float weight = getWeight(getRowColumnParentData(child));
/*     */     } 
/*     */     return crossAxisMax; }
/*     */ 
/*     */ }


/* Location:              C:\Users\yuzum\Downloads\ej-release-243.132.63.zip!\ej\lib\foundation-layout-desktop-1.7.3.jar!\androidx\compose\foundation\layout\RowColumnImplKt.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */